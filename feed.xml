<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://piolabs.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://piolabs.com/" rel="alternate" type="text/html" /><updated>2021-05-06T15:40:09+03:00</updated><id>https://piolabs.com/feed.xml</id><title type="html">PlatformIO Labs</title><subtitle>A proven technology used by global innovators and by over a million embedded developers around the world.</subtitle><author><name>PlatformIO Labs</name><email>contact@piolabs.com</email></author><entry><title type="html">PlatformIO Open Source April Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-april-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source April Updates" /><published>2021-05-06T00:00:00+03:00</published><updated>2021-05-06T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-april-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-april-2021-updates.html">&lt;p&gt;Welcome to the April 2021 updates of the &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so let’s go through the updates pushed in this month.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-april-news.jpg&quot; alt=&quot;PlatformIO Open Source April Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In April, we have released a new dev-platform for Raspberry Pi RP2040, updated Arduino core for mbed-enabled devices to the latest v2.0, rolled out a major update for the ST STM8 dev-platform with debugging support, integrated the OVPSim and Renode simulators into the OpenHW dev-platform. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#raspberry-pi-rp2040-dev-platform&quot; id=&quot;markdown-toc-raspberry-pi-rp2040-dev-platform&quot;&gt;Raspberry Pi RP2040 dev-platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stmicroelectronics-stm8-dev-platform-v20&quot; id=&quot;markdown-toc-stmicroelectronics-stm8-dev-platform-v20&quot;&gt;STMicroelectronics STM8 dev-platform v2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#openhw-dev-platform-v02&quot; id=&quot;markdown-toc-openhw-dev-platform-v02&quot;&gt;OpenHW dev-platform v0.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino-core-for-mbed-enabled-devices-v20&quot; id=&quot;markdown-toc-arduino-core-for-mbed-enabled-devices-v20&quot;&gt;Arduino Core for mbed-enabled devices v2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;raspberry-pi-rp2040-dev-platform&quot;&gt;Raspberry Pi RP2040 dev-platform&lt;/h2&gt;

&lt;p&gt;During the last few months, we have received a lot of private and public inquiries from the Raspberry Pi community about the integration of the recently announced RP2040 MCU into the PlatformIO ecosystem. We value your opinion and welcome your feedback, so we’re happy to announce the initial support for Raspberry Pi RP2040 MCU - a low-cost, high-performance device with a large on-chip memory, a dual-core Arm Cortex-M0+ processor, and a rich peripheral set augmented with a unique Programmable I/O (PIO) subsystem.&lt;/p&gt;

&lt;p&gt;As a company with a strong commitment to the open-source community, we welcome any valuable contribution to further develop the Raspberry Pi ecosystem with modern and flexible open-source development tools.&lt;/p&gt;

&lt;p&gt;The first release of the Raspberry Pi dev-platform brings initial support for the &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/raspberrypi/pico.html&quot;&gt;Raspberry Pi Pico&lt;/a&gt; and &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/raspberrypi/nanorp2040connect.html&quot;&gt;Arduino Nano RP2040 Connect&lt;/a&gt; boards. Only the Arduino framework is supported at the moment. See &lt;a href=&quot;https://github.com/platformio/platform-raspberrypi/releases/tag/v1.0.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Raspberry Pi RP2040 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/raspberrypi.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-raspberrypi/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stmicroelectronics-stm8-dev-platform-v20&quot;&gt;STMicroelectronics STM8 dev-platform v2.0&lt;/h2&gt;

&lt;p&gt;Thanks to our great community represented by &lt;a href=&quot;https://github.com/maxgerhardt&quot;&gt;Maximilian Gerhardt&lt;/a&gt; and &lt;a href=&quot;https://github.com/cocus&quot;&gt;Santiago Hormazabal&lt;/a&gt;, the new release of the &lt;a href=&quot;https://platformio.org/platforms/ststm8&quot;&gt;STMicroelectronics STM8&lt;/a&gt; brings initial support for debugging feature:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-05-06-oss-april-updates/stm8-debug.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-05-06-oss-april-updates/stm8-debug.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now developers are able to quickly and easily debug their bare-metal applications thanks to preconfigured &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debugging.html&quot;&gt;PlatformIO Unified Debugger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The latest release also includes severals new boards, updated toolchains and the latest Sduino core:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm8/nucleo_8s207k8.html&quot;&gt;ST NUCLEO-8S207K8&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm8/nucleo_8s208rb.html&quot;&gt;ST NUCLEO-8S208RB&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm8/stm8s003f3.html&quot;&gt;ST STM8S003F3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Added initial support for debugging feature&lt;/li&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDuino&lt;/code&gt; to the latest v0.5 (&lt;a href=&quot;https://github.com/tenbaht/sduino/releases/tag/v0.5&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDCC&lt;/code&gt; toolchain to the latest v4.1.0&lt;/li&gt;
  &lt;li&gt;Updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stm8gal&lt;/code&gt; uploader to the latest v1.5.0&lt;/li&gt;
  &lt;li&gt;Added &lt;a href=&quot;https://github.com/platformio/platform-ststm8/tree/develop/examples/native-blink&quot;&gt;a new example&lt;/a&gt; based on &lt;a href=&quot;https://github.com/gicking/STM8_headers&quot;&gt;Open-Sources device headers for STM8 MCUs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the STMicroelectronics STM8 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm8.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm8/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openhw-dev-platform-v02&quot;&gt;OpenHW dev-platform v0.2&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/openhw&quot;&gt;OpenHW&lt;/a&gt; dev-platform brings initial support for the popular &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debug-tools/ovpsim.html&quot;&gt;Imperas OVPSim&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debug-tools/renode.html&quot;&gt;Antmicro Renode&lt;/a&gt; simulators, several minor bugfixes and improvements. Simulators are very valuable in the early stages of project development when there is no real hardware available for the developers to experiment with. Combined with the &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debugging.html&quot;&gt;PlatformIO Unified Debugger&lt;/a&gt;, simulators are great instruments to develop, debug and test embedded applications on your host machine or in a CI environment.&lt;/p&gt;

&lt;h2 id=&quot;arduino-core-for-mbed-enabled-devices-v20&quot;&gt;Arduino Core for mbed-enabled devices v2.0&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;ST STM32&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.0. According to the release notes, v2.0 brings a lot of bugfixes and improvements in core and accompanying libraries.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the April 2021 updates of the PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so let’s go through the updates pushed in this month.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-april-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-april-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source March Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-march-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source March Updates" /><published>2021-04-01T00:00:00+03:00</published><updated>2021-04-01T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-march-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-march-2021-updates.html">&lt;p&gt;Welcome to the March 2021 updates of the &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-march-news.jpg&quot; alt=&quot;PlatformIO Open Source March Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During March, we released a new version of PlatformIO IDE for Visual Studio Code, added support for the latest Mbed OS, rolled out major updates for Espressif32, STMicroelectronics STM32, Nordic nRF52 dev-platforms and fixed a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-ide-for-visual-studio-code-v23&quot; id=&quot;markdown-toc-platformio-ide-for-visual-studio-code-v23&quot;&gt;PlatformIO IDE for Visual Studio Code v2.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mbed-os-v69&quot; id=&quot;markdown-toc-mbed-os-v69&quot;&gt;Mbed OS v6.9&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif32-dev-platform-v32&quot; id=&quot;markdown-toc-espressif32-dev-platform-v32&quot;&gt;Espressif32 dev-platform v3.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stmicroelectronics-stm32-dev-platform-v121&quot; id=&quot;markdown-toc-stmicroelectronics-stm32-dev-platform-v121&quot;&gt;STMicroelectronics STM32 dev-platform v12.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nordic-nrf52-dev-platform-v71&quot; id=&quot;markdown-toc-nordic-nrf52-dev-platform-v71&quot;&gt;Nordic nRF52 dev-platform v7.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-avr-dev-platform-v33&quot; id=&quot;markdown-toc-atmel-avr-dev-platform-v33&quot;&gt;Atmel AVR dev-platform v3.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-ide-for-visual-studio-code-v23&quot;&gt;PlatformIO IDE for Visual Studio Code v2.3&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html&quot;&gt;&lt;img class=&quot;figure-img img-fluid&quot; src=&quot;/assets/posts/oss-updates/platformio-ide-for-vscode-laptop.png&quot; alt=&quot;PlatformIO IDE for VSCode&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are pleased to announce a new release &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.3&lt;/code&gt; of PlatformIO IDE for &lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html&quot;&gt;Visual Studio Code&lt;/a&gt; that brings new functionality for project management, new settings and several bugfixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project management:
    &lt;ul&gt;
      &lt;li&gt;Show active project in the status bar (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2276&quot;&gt;#2276&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Automatically switch to the latest project on restart (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2365&quot;&gt;#2365&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Automatically restore the latest project environment (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2344&quot;&gt;#2344&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Allowed passing custom base URL of the Python Package Index using new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;customPyPiIndexUrl&lt;/code&gt; setting&lt;/li&gt;
  &lt;li&gt;Open &lt;a href=&quot;https://docs.platformio.org/page/projectconf/index.html&quot;&gt;“platformio.ini” configuration file&lt;/a&gt; from newly added project (if there are no other active editors) (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2263&quot;&gt;#2263&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added protection for infinite IntelliSense index rebuilding (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2363&quot;&gt;#2363&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added “OpenAPI (Swagger) Editor” extension to the conflicted list (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2324&quot;&gt;#2324&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added a new setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio-ide.autoOpenPlatformIOIniFile&lt;/code&gt; to control an automatic opening of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; file from a project when no other editors are opened (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2419&quot;&gt;#2419&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added a new setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio-ide.activateProjectOnTextEditorChange&lt;/code&gt; to enable automatic project activation depending on an active opened text editor (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2410&quot;&gt;#2410&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Automatically activate project environment opened via “PIO Home &amp;gt; New Project / Open Project” (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2414&quot;&gt;#2414&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Do not show “Default” environment when a project does not have any build environments (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2450&quot;&gt;#2450&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed issues when the “Upload and Monitor” command didn’t terminate the running task and didn’t reopen a monitor with delay (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2266&quot;&gt;#2266&lt;/a&gt;, issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2319&quot;&gt;#2319&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue with broken IntelliSense index rebuilding or tasks loading for big projects (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2321&quot;&gt;#2321&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue when a debug breakpoint was not allowed for Assembly files&lt;/li&gt;
  &lt;li&gt;Fixed an issue “Failed to load symbols from executable file” when debugging native/desktop application&lt;/li&gt;
  &lt;li&gt;PlatformIO IDE Installer
    &lt;ul&gt;
      &lt;li&gt;Updated PlatformIO Core installer to v1.0.1&lt;/li&gt;
      &lt;li&gt;Rebuild project index only when the environment changes&lt;/li&gt;
      &lt;li&gt;Fixed an issue “The ‘path’ argument must be of type string. Received undefined”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/releases/tag/v2.3.1&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;mbed-os-v69&quot;&gt;Mbed OS v6.9&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for the latest &lt;strong&gt;Mbed OS 6&lt;/strong&gt; - an open source embedded operating system designed specifically for the Internet of Things. It includes all the features you need to develop a connected product based on an Arm Cortex-M microcontroller, including security, connectivity, an RTOS and drivers for sensors and I/O devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in the latest releases:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for the TF-M reference software v1.2 by the Trusted Firmware project&lt;/li&gt;
  &lt;li&gt;Extended BLE functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on project configuration for Mbed OS can be found &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Mbed OS&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.9.0&quot;&gt;Release notes for v6.9.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.8.0&quot;&gt;Release notes for v6.8.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.7.0&quot;&gt;Release notes for v6.7.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html&quot;&gt;Documentation for Mbed OS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html#platforms&quot;&gt;Supported development platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif32-dev-platform-v32&quot;&gt;Espressif32 dev-platform v3.2&lt;/h2&gt;

&lt;p&gt;The latest revision of the &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif 32&lt;/a&gt; dev-platform brings support for the latest Arduino core v1.0.6 and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new board  &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/heltec_wifi_kit_32_v2.html&quot;&gt;Heltec Wifi Kit 32 V2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Updated Arduino framework to 1.0.6 (&lt;a href=&quot;https://github.com/espressif/arduino-esp32/releases/tag/1.0.6&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated default upload speed for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m5stack-atom&lt;/code&gt; board&lt;/li&gt;
  &lt;li&gt;Preparations for updated debug configuration process in upcoming PlatformIO Core 5.2+&lt;/li&gt;
  &lt;li&gt;Fixed variant name for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ttgo-t-beam&lt;/code&gt; board&lt;/li&gt;
  &lt;li&gt;Fixed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildfs&lt;/code&gt; target declaration to be used with pre/post actions&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Espressif32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/espressif32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-espressif32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stmicroelectronics-stm32-dev-platform-v121&quot;&gt;STMicroelectronics STM32 dev-platform v12.1&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/ststm32&quot;&gt;ST STM32&lt;/a&gt; platform comes with initial support for mbed-based Arduino core, improvements for STM32Cube integration and several minor fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added a new board &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/portenta_h7_m4.html&quot;&gt;Arduino Portenta H7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Added initial support for Arduino core for mbed enabled boards&lt;/li&gt;
  &lt;li&gt;Updated Mbed OS6 to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v6.9.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.9.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Better handling of the pregenerated STM32Cube configuration file&lt;/li&gt;
  &lt;li&gt;Fixed dynamic configuration of serverless debug probes&lt;/li&gt;
  &lt;li&gt;Fixed RAM size for STM32F407VG&lt;/li&gt;
  &lt;li&gt;Nucleo-Gxxx boards now support uploading and debugging via on-board STLink probes&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the ST STM32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nordic-nrf52-dev-platform-v71&quot;&gt;Nordic nRF52 dev-platform v7.1&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/nordicnrf52&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platform brings updated Arduino core &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.3.2&lt;/code&gt; for mbed-enabled devices, several minor bugfixes and improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Mbed OS6 to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v6.9.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.9.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.3.2&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/1.3.2&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed dynamic configuration of serverless debug probes&lt;/li&gt;
  &lt;li&gt;Fixed RAM size for &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/bbcmicrobit_v2.html&quot;&gt;BBC Micro:Bit v2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Nordic nRF52 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-nordicnrf52/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-avr-dev-platform-v33&quot;&gt;Atmel AVR dev-platform v3.3&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelavr&quot;&gt;Atmel AVR&lt;/a&gt; v3.3.0 comes with updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATTinyCore&lt;/code&gt; v1.5.2 and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATTinyCore&lt;/code&gt; to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.5.2&lt;/code&gt; (&lt;a href=&quot;https://github.com/SpenceKonde/ATTinyCore/releases/tag/1.5.2&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Removed unnecessary wrapping quotes from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avrdude&lt;/code&gt; upload command&lt;/li&gt;
  &lt;li&gt;Minor improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Atmel AVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the March 2021 updates of the PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-march-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-march-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unit Testing with PlatformIO: Part 2. Running tests on an embedded target</title><link href="https://piolabs.com/blog/insights/unit-testing-part-2.html" rel="alternate" type="text/html" title="Unit Testing with PlatformIO: Part 2. Running tests on an embedded target" /><published>2021-03-29T00:00:00+03:00</published><updated>2021-03-29T00:00:00+03:00</updated><id>https://piolabs.com/blog/insights/unit-testing-part-2</id><content type="html" xml:base="https://piolabs.com/blog/insights/unit-testing-part-2.html">&lt;p&gt;In most cases, testing on a host machine is enough to find almost all sorts of typical programming errors (integer overflow, off-by-one error, etc) in the business logic of an embedded application, but it is not the same as testing on the real hardware.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;A different compiler, endianness, or even unpredictable hardware issues can greatly affect the correctness of the code.&lt;/p&gt;

&lt;p&gt;This is the second part of a three-part blog series where we’re setting up a testing environment for embedded development. In the &lt;a href=&quot;/blog/insights/unit-testing-part-1.html&quot; target=&quot;_blank&quot;&gt;first post&lt;/a&gt;, we briefly went through the basics of testing within the PlatformIO ecosystem, created a useful data structure called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circular buffer&lt;/code&gt; and tested it on a host machine.&lt;/p&gt;

&lt;p&gt;In this post, we will continue to set up a convenient testing environment for our project. We will be using &lt;a href=&quot;https://docs.platformio.org/page/boards/sifive/hifive1-revb.html#board-sifive-hifive1-revb&quot; target=&quot;_blank&quot;&gt;SiFive HiFive-RevB&lt;/a&gt; - a low-cost RISC-V board based on &lt;a href=&quot;https://sifive.cdn.prismic.io/sifive%2F9ecbb623-7c7f-4acc-966f-9bb10ecdb62e_fe310-g002.pdf&quot; target=&quot;_blank&quot;&gt;FE310-G002&lt;/a&gt; microcontroller from SiFive.&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot; id=&quot;markdown-toc-prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-a-new-environment&quot; id=&quot;markdown-toc-adding-a-new-environment&quot;&gt;Adding a New Environment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-custom-test-transport&quot; id=&quot;markdown-toc-adding-custom-test-transport&quot;&gt;Adding Custom Test Transport&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html&quot; target=&quot;_blank&quot;&gt;VSCode with installed PlatformIO IDE extension&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/boards/sifive/hifive1-revb.html#board-sifive-hifive1-revb&quot; target=&quot;_blank&quot;&gt;SiFive HiFive-RevB&lt;/a&gt; board&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adding-a-new-environment&quot;&gt;Adding a New Environment&lt;/h2&gt;

&lt;p&gt;In this part, we’ll carry on working with the project from the previous post.
Adding new hardware is as easy as adding several new lines to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:native]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;native&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[env:hifive1-revb]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sifive&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;freedom-e-sdk&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hifive1-revb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The configuration file is pretty simple, the first two lines we already discussed in the previous post, the new environment &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hifive1-revb&lt;/code&gt; includes general information about the platform, framework, board and describes the new embedded target on which we want to run our tests (no need to install the &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/sifive.html&quot; target=&quot;_blank&quot;&gt;sifive&lt;/a&gt; dev-platform manually, PlatformIO will do it automatically before the first compilation).&lt;/p&gt;

&lt;h2 id=&quot;adding-custom-test-transport&quot;&gt;Adding Custom Test Transport&lt;/h2&gt;

&lt;p&gt;Usually, the test sequence consists of compiling and deploying a test executable from a host machine, starting it on the embedded side, and collecting the test results via some sort of communication channel. After that, the host machine analyzes the logs and provides a detailed report.&lt;/p&gt;

&lt;figure class=&quot;figure mb-7&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-03-29-unit-testing-part-2/unit-testing-part-2-2.png&quot; alt=&quot;Compilation and linking process&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Communication between the host and the embedded device
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;PlatformIO Unit Testing Engine supports several transports for popular frameworks/SDKs. But, for this article, we deliberately used an unsupported low-level framework to show you how easy it is to add a custom communication transport for collecting testing results.&lt;/p&gt;

&lt;p&gt;Adding a custom transport boils down to implementing the following interface:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only mandatory function is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unittest_uart_putchar&lt;/code&gt; which is responsible for redirecting the test output to a proper channel. Fortunately, the board used in this article has an on-board debug probe that also acts as a virtual COM port. The &lt;a href=&quot;https://docs.platformio.org/page/frameworks/freedom-e-sdk.html&quot; target=&quot;_blank&quot;&gt;Freedom SDK&lt;/a&gt; framework is configured to redirect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt; output to that virtual COM port which greatly simplifies the implementation of the custom test transport for our case:&lt;/p&gt;

&lt;p&gt;The header file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unit_test_transport.h&lt;/code&gt; with function declarations:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef UNITEST_TRANSPORT_H
#define UNITEST_TRANSPORT_H
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unittest_uart_begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unittest_uart_putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unittest_uart_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unittest_uart_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif // UNITEST_TRANSPORT_H
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the accompanying source file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unit_test_transport.c&lt;/code&gt; with the implementation:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &quot;unittest_transport.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our case, we needed to implement only one function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unittest_uart_putchar&lt;/code&gt; that redirects the test output to the virtual COM port via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt; function.
In the last step we need to specify that we want to use a custom test transport:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:native]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;native&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[env:hifive1-revb]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sifive&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;freedom-e-sdk&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hifive1-revb&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Select custom test transport
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;test_transport&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;custom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we are ready to run our test on the real hardware. After connecting the board and validating that it’s visible to our OS, we can select our environment on the PlatformIO toolbar and run the tests:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-29-unit-testing-part-2/unit-testing-part-2-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-29-unit-testing-part-2/unit-testing-part-2-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s it! Now, we can run tests on the real board as well.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;When developing software for an embedded device, testing only on a host machine is usually not sufficient enough to cover all possible issues. Ideally, a development environment should be capable of running tests on both ends: a host machine and a target device. Besides, creating a proper communication channel to represent test results on a host machine may turn out to be a tedious task that requires a lot of manual work from developers.&lt;/p&gt;

&lt;p&gt;In this article, we explored how PlatformIO solves that problem by abstracting away all heavy lifting. We looked into the process of running tests directly on the embedded device by implementing a custom test transport for collecting results from the &lt;a href=&quot;https://docs.platformio.org/page/boards/sifive/hifive1-revb.html#board-sifive-hifive1-revb&quot; target=&quot;_blank&quot;&gt;SiFive HiFive-RevB&lt;/a&gt; board on the fly.&lt;/p&gt;

&lt;p&gt;In the next article, we will explore how to run the tests on a CI service on both native and embedded sides by utilizing an advanced PlatformIO feature called &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/pio-remote.html&quot;&gt;Remote&lt;/a&gt;.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html">In most cases, testing on a host machine is enough to find almost all sorts of typical programming errors (integer overflow, off-by-one error, etc) in the business logic of an embedded application, but it is not the same as testing on the real hardware.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-03-29-unit-testing-part-2/unit-testing-part-2-1.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-03-29-unit-testing-part-2/unit-testing-part-2-1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Labs Helps Imagination Technologies Improve RISC-V Computer Architecture Training</title><link href="https://piolabs.com/blog/press-releases/platformio-labs-helps-imagination-technologies.html" rel="alternate" type="text/html" title="PlatformIO Labs Helps Imagination Technologies Improve RISC-V Computer Architecture Training" /><published>2021-03-08T00:00:00+02:00</published><updated>2021-03-08T00:00:00+02:00</updated><id>https://piolabs.com/blog/press-releases/platformio-labs-helps-imagination-technologies</id><content type="html" xml:base="https://piolabs.com/blog/press-releases/platformio-labs-helps-imagination-technologies.html">&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-1.jpg&quot; alt=&quot;PlatformIO Labs Helps Imagination Technologies Improve RISC-V Computer Architecture Training&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RISC-V has been described as the “open silicon” of the technology revolution spurred by open hardware and open software. The ability to understand and innovate upon computer architectures has been a weak element of academic research and collaborative professional communities due to the typical proprietary nature of chip designs. Now open architectures can be combined with open hardware and software to provide unique and advanced solutions to tackle problems in our rapidly growing and complex technological world.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Due to the increasing popularity of RISC-V within the semiconductor industry, Imagination Technologies and Western Digital have teamed up to sponsor the development of new RISC-V centered coursework, designed by academics, for academics. The goal of this coursework is to provide top quality materials and an equity of opportunity to learn from them to students globally. PlatformIO Labs was chosen to support this coursework because of its open source tooling that provides best-of-breed quality for the embedded hardware industry, because of it being easy to use, because it seamlessly integrates with modern development editors such as VS Code.&lt;/p&gt;

&lt;p&gt;More and more companies have announced or have already extended their portfolio with new RISC-V products. Popular commercial and open source Real-Time Operating Systems (RTOS), debuggers, and compilers are adding support for cutting-edge RISC-V hardware. The RISC-V ISA is open source, vendor agnostic, and flexible enough to satisfy the growing demand for complex embedded systems. Because of these qualities, the RISC-V ISA is a perfect choice for FPGA soft processor designs, which will further enable RISC-V to gain increased adoption within the embedded systems industry and academic community.&lt;/p&gt;

&lt;p&gt;This growing adoption fuels the need for approachable and in-depth educational materials, especially to satisfy the increasing need and global benefits available through remote learning. It’s crucial for the RISC-V community to collaborate with universities and other academic partners to develop comprehensive curricula so undergraduates will have a deep fundamental knowledge of modern real-world computer architectures.&lt;/p&gt;

&lt;p&gt;While RISC-V adoption is on the rise, one challenge is the currently arduous development environment associated with the architecture. When working with FPGAs, developers rely on convoluted instruments simply to evaluate and interact with their RISC-V designs on real hardware. Working with FPGAs can be a daunting task even for seasoned developers, not to mention students and newly graduated specialists. The industry needs an open-source and easy-to-use development environment that covers all sets of common tasks (debugging, testing, simulating, etc.) that engineers perform on a daily basis when working with deployed designs.&lt;/p&gt;

&lt;p&gt;PlatformIO satisfies this need to bring top quality development tools to the RISC-V community, without being vendor-specific, without a hefty financial barrier, and without being locked behind the wall of a proprietary software license.&lt;/p&gt;

&lt;h2 id=&quot;about-imagination-university-programme&quot;&gt;About Imagination University Programme&lt;/h2&gt;

&lt;p&gt;Imagination Technologies offers a complete course on RISC-V computer architecture titled &lt;a href=&quot;https://university.imgtec.com/rvfpga/&quot; target=&quot;_blank&quot;&gt;“RVfpga: Understanding Computer Architecture”&lt;/a&gt;. It includes a rich set of teaching materials and practical exercises to help students understand the key elements of processor architecture, including IP cores, and how to modify a RISC-V core and its microarchitectures.&lt;/p&gt;

&lt;p&gt;The initial course consists of 10 labs with detailed instructions, examples, short questions, and hands-on exercises with solutions, giving teachers the flexibility to choose between a practical and an exam-based structure for the course. The course uses the Chips Alliance’s SweRVolf SoC, which is based on Western Digital’s RISC-V SweRV EH1 core. SweRV is one of the most developed cores in the RISC-V market that’s fully verified and ready for production.&lt;/p&gt;

&lt;p&gt;The RVfpga course was created by Dr. Sarah Harris, Associate Professor of Electrical and Computer Engineering at University of Nevada, co-author of the popular “Digital Design &amp;amp; Computer Architecture” textbook, and Dr. Daniel Chaver-Martínez, Associate Professor of Department of Computer Architecture and System Engineering at Universidad Complutense de Madrid (Spain). The course engaged several widely reputed sponsors and supporters who have given outstanding support to this large and complex project. Key contributors are listed below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-2.jpg&quot; alt=&quot;The sponsors and supporters of Imagination University Programme&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;platormio-labs-contribution&quot;&gt;PlatormIO Labs’ Contribution&lt;/h2&gt;

&lt;p&gt;One of the main missions of PlatformIO Labs is to bring together academics, developers, and silicon vendors, and to help them leverage modern open source software and hardware on anything from simple prototypes to truly groundbreaking projects, developed at any scale. We believe that when technology is open from top to bottom, that the collaboration afforded within such a community is the perfect place to explore new ideas and opens up tremendous opportunities. Our team is proud to be an active participant in this venture.&lt;/p&gt;

&lt;p&gt;The RVfpga course uses PlatformIO — the open-source core of our Technology as a Service (TaaS) platform — for collaborative embedded development. PlatformIO’s development ecosystem integrates both hardware and software aspects of the course. Its open source license and flexible design are constantly being adapted to keep up with industry advancements. Students can avoid the burden of setting up unique, expensive, or vendor-specific tooling, and instead easily jump right in with a proper development environment and proceed directly to interacting with their RISC-V soft processors.&lt;/p&gt;

&lt;p&gt;The main contributions of our work are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Powerful Unified Debugger&lt;/strong&gt;. The integrated debugger supports both real hardware and hardware simulators (Whisper-ISS, Verilator), so that students can easily switch to a mixed-mode disassembly view to evaluate symbols, registers, and complex expressions, in watch windows.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trusted Package Registry&lt;/strong&gt;. The registry quickly and securely delivers pre-built packages to students and professionals worldwide. Just-in-time, only what is needed, and fully automated downloads of dependent packages is an essential feature when it comes to online delivery of the curriculum, and ease of getting started for the students.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;In-depth Memory Analysis&lt;/strong&gt;. A user-friendly UI allows students to access memory stores and get deeper insight into the internal application structure.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PlatformIO Home&lt;/strong&gt;. Like a welcoming dashboard, the PlatformIO Home page makes it easy for anyone to get started. It provides easy access to a comprehensive set of documentation and examples that were created specifically for this course, together with the main authors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-quick-tutorial&quot;&gt;A Quick Tutorial&lt;/h2&gt;

&lt;p&gt;To demonstrate PlatformIO Labs’ contribution to this course and to show how PlatformIO reduces the usual complexity of executing ASM/C/C++ code in the RVfpga course, we are providing a short tutorial below. This tutorial shows how to import a project example, starting from the PlatformIO Home page, and how to run it even without hardware, by using an Instruction Set Simulator (ISS) called Whisper. This brief tutorial assumes you have already installed the PlatformIO IDE extension for Visual Studio Code. If you do not have the PlatformIO IDE installed, please follow &lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html#installation&quot;&gt;these instructions&lt;/a&gt; before continuing with the tutorial.&lt;/p&gt;

&lt;h3 id=&quot;installing-chips-alliance-development-platform&quot;&gt;Installing CHIPS Alliance Development Platform&lt;/h3&gt;

&lt;p&gt;To start developing for the SweRV core you first need to install the CHIPS Alliance dev-platform from PlatformIO Home. Click on the icons near the numbers highlighted in orange, from 1 to 4. Note that at step 3 you will need to input “CHIPS Alliance” into the search string.&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above procedure shows how easy it is to set up a RISC-V development environment. PlatformIO will do all the heavy lifting for us by installing everything that is needed (toolchains, frameworks, etc.) automatically. When the one-click “Install” method is complete, a dialog window will pop up to tell you that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chipsalliance&lt;/code&gt; platform has been successfully installed.&lt;/p&gt;

&lt;h3 id=&quot;importing-and-compiling-an-example&quot;&gt;Importing and Compiling an Example&lt;/h3&gt;

&lt;p&gt;For the sake of simplicity, we will import one of the readily available examples prepared by the authors of the course. From the PlatformIO Home page, under the heading “Quick Access”, select the “Project Examples” button and select “rtosal-freertos” within the CHIPS Alliance platform, as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To build the project we can invoke different options, some of which are highlighted by an orange rectangle in the screenshot below. Simply use the method that feels most comfortable to you.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build&lt;/code&gt; option under the PlatformIO &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Tasks&lt;/code&gt; menu on the left navigation column&lt;/li&gt;
  &lt;li&gt;Click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;✓&lt;/code&gt; icon  (next to the home icon) toward the left side of the bottom blue PlatformIO Toolbar&lt;/li&gt;
  &lt;li&gt;From the VS Code top header menu, select and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View: Command Palette... &amp;gt; PlatformIO: Build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;From the VS Code top header menu, select and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Terminal: Run Build Task... &amp;gt; PlatformIO: Build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Using the hot keys for your OS: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd-alt-b / ctrl-alt-b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;From a terminal prompt at the command line by typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio run&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-5.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-5.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything went well, we should see the successful result in the terminal window.&lt;/p&gt;

&lt;h3 id=&quot;debugging-experience&quot;&gt;Debugging Experience&lt;/h3&gt;

&lt;p&gt;As we mentioned in the beginning of this tutorial, we will be using the Whisper ISS to debug the example. Configuring Whisper as the debug tool is as simple as adding one line to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; file (which is located in the top level of the project folder, that you can find and open by clicking on it in the project file Explorer view):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;platform = chipsalliance
framework = wd-riscv-sdk, freertos
board = swervolf_nexys
debug_tool = whisper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To start a debug session we can use one of the following options (the first two are highlighted in an orange rectangle in the screenshot):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VS Code menu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run &amp;gt; Start Debugging&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start Debugging&lt;/code&gt; option from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlatformIO &amp;gt; Quick Access &amp;gt; Debug menu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F5&lt;/code&gt; hotkey&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-6.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-6.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the debug session is started we can walk through the code using control buttons, set breakpoints, and add variables to the Watch window:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-7.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-7.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: this introductory tutorial only shows how to get started and execute a simple example using ISS as part of the RVfpga course. To understand the SweRV core in greater depth, please refer to the &lt;a href=&quot;https://university.imgtec.com/&quot;&gt;Imagination University Programme&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;PlatformIO Labs is proud to partner with Imagination Technologies and Western Digital on the development and deployment of the RISC-V educational curriculum, as we firmly believe in the importance of collaboration between industry and academia. We are happy to see how our modern development instruments can enable an improved experience around these important educational materials. We hope that developers and students appreciate our efforts to support this combination of the RISC-V ISA, comprehensive teaching materials, and the opportunity to study the SweRVolf SoC. It’s even more fun to know that we are providing a more pleasant RISC-V learning experience for the academic community all around the world. We encourage all educational institutions to participate in the future growth of the RISC-V ecosystem.&lt;/p&gt;

&lt;h2 id=&quot;about-imagination-technologies&quot;&gt;About Imagination Technologies&lt;/h2&gt;

&lt;p&gt;Imagination was founded in 1985 and is one of the UK’s leading success stories as a developer of highly advanced intellectual property (IP) that creates considerable value in the electronic systems value chain, and ultimately improves the user experience in many different consumer electronic devices, including games consoles, mobile phones, and cars. Imagination Technologies has over 25 years of experience in designing and licensing market-leading processor solutions for graphics and vision &amp;amp; AI processing that offer strong differentiation compared to competing solutions for our customers.&lt;/p&gt;

&lt;h2 id=&quot;about-platformio-labs&quot;&gt;About PlatformIO Labs&lt;/h2&gt;

&lt;p&gt;PlatformIO Labs is the corporate sponsor behind the PlatformIO open-source project. PlatformIO is a next-generation, professional collaborative platform for embedded development that enables customers to save resources and time by vastly reducing the expenses and labor associated with creating and maintaining product software. Its modern architecture is unmatched in the embedded tools market, and the result benefits developers everywhere by simplifying complexity and increasing productivity. PlatformIO Labs is a privately-held company headquartered in Tallinn, Estonia and with an R&amp;amp;D branch in Ukraine. To learn more, follow them on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt;, Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt;, or visit &lt;a href=&quot;https://piolabs.com/&quot;&gt;piolabs.com&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="press-releases" /><summary type="html">RISC-V has been described as the “open silicon” of the technology revolution spurred by open hardware and open software. The ability to understand and innovate upon computer architectures has been a weak element of academic research and collaborative professional communities due to the typical proprietary nature of chip designs. Now open architectures can be combined with open hardware and software to provide unique and advanced solutions to tackle problems in our rapidly growing and complex technological world.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-1.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source February Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-february-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source February Updates" /><published>2021-03-04T00:00:00+02:00</published><updated>2021-03-04T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-february-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-february-2021-updates.html">&lt;p&gt;Welcome to the February 2021 updates of the &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-february-news.jpg&quot; alt=&quot;PlatformIO Open Source February Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During February, we added support for Zephyr v2.5.0, rolled out updates for the Espressif32, STMicroelectronics STM32, Microchip SAM/AVR and Texas Instruments MSP430 platforms, resolved a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#zephyr-v250-new-boards-initial-support-for-thread-local-storage-new-synchronization-mechanisms&quot; id=&quot;markdown-toc-zephyr-v250-new-boards-initial-support-for-thread-local-storage-new-synchronization-mechanisms&quot;&gt;Zephyr v2.5.0: New boards, initial support for Thread Local Storage, new synchronization mechanisms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif32-dev-platform-v31&quot; id=&quot;markdown-toc-espressif32-dev-platform-v31&quot;&gt;Espressif32 dev-platform v3.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-avr-dev-platform-v32&quot; id=&quot;markdown-toc-atmel-avr-dev-platform-v32&quot;&gt;Atmel AVR dev-platform v3.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v60&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v60&quot;&gt;Atmel SAM dev-platform v6.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stmicroelectronics-stm32-dev-platform-v120&quot; id=&quot;markdown-toc-stmicroelectronics-stm32-dev-platform-v120&quot;&gt;STMicroelectronics STM32 dev-platform v12.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#texas-instruments-msp430-dev-platform-v23&quot; id=&quot;markdown-toc-texas-instruments-msp430-dev-platform-v23&quot;&gt;Texas Instruments MSP430 dev-platform v2.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;zephyr-v250-new-boards-initial-support-for-thread-local-storage-new-synchronization-mechanisms&quot;&gt;Zephyr v2.5.0: New boards, initial support for Thread Local Storage, new synchronization mechanisms&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for a new release v2.5.0 of Zephyr Project - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in v2.5.0:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added Thread Local Storage (TLS) support&lt;/li&gt;
  &lt;li&gt;Added support for per thread runtime statistics&lt;/li&gt;
  &lt;li&gt;Added new synchronization mechanisms using Condition Variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Zephyr framework&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.5.0&quot;&gt;Release notes for v2.5.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html&quot;&gt;Documentation for Zephyr framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms&quot;&gt;Supported development platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif32-dev-platform-v31&quot;&gt;Espressif32 dev-platform v3.1&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif 32&lt;/a&gt; dev-platform comes with a ton of new boards, support for the latest Arduino core v1.0.5, updated toolchains and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/wifiduino32.html&quot;&gt;Blinker WiFiduino32&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/esp32doit-espduino.html&quot;&gt;DOIT ESPduino32&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/esp32thing_plus.html&quot;&gt;SparkFun ESP32 Thing Plus&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/etboard.html&quot;&gt;ETBoard&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/piranha_esp32.html&quot;&gt;Fishino Piranha ESP-32&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/healthypi4.html&quot;&gt;ProtoCentral HealthyPi 4&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/heltec_wireless_stick_lite.html&quot;&gt;Heltec Wireless Stick Lite&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/honeylemon.html&quot;&gt;HONEYLemon&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/imbrios-logsens-v1p1.html&quot;&gt;Imbrios LogSens V1P1&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/inex_openkb.html&quot;&gt;INEX OpenKB&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/kits-edu.html&quot;&gt;KITS ESP32 EDU&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/labplus_mpython.html&quot;&gt;Labplus mPython&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/m5stack-atom.html&quot;&gt;M5Stack ATOM&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32//m5stack-core2.html&quot;&gt;M5Stack Core2&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/m5stack-coreink.html&quot;&gt;M5Stick Core Ink&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/m5stack-timer-cam.html&quot;&gt;M5Stack Timer CAM&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/mgbot-iotik32a.html&quot;&gt;MGBOT IOTIK 32A&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/mgbot-iotik32b.html&quot;&gt;MGBOT IOTIK 32B&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/s_odi_ultra.html&quot;&gt;S.ODI Ultra v1&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/sensesiot_weizen.html&quot;&gt;LOGISENSES Senses Weizen&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/ttgo-lora32-v21.html&quot;&gt;TTGO LoRa32-OLED v2.1.6&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/ttgo-t7-v13-mini32.html&quot;&gt;TTGO T7 V1.3 Mini32&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/ttgo-t7-v14-mini32.html&quot;&gt;TTGO T7 V1.4 Mini32&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/lolin32_lite.html&quot;&gt;WEMOS LOLIN32 Lite&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Arduino framework to 1.0.5 (&lt;a href=&quot;https://github.com/espressif/arduino-esp32/releases/tag/1.0.5&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed missing argument to OTA tool when uploading SPIFFS image&lt;/li&gt;
  &lt;li&gt;Fixed memory configuration for the Lolin D32 Pro board&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Espressif32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/espressif32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-espressif32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-avr-dev-platform-v32&quot;&gt;Atmel AVR dev-platform v3.2&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelavr&quot;&gt;Atmel AVR&lt;/a&gt; v3.2.0 brings updates for highly customizable Arduino cores by MCUdude, new Arduino core for digispark boards, updated toolchain packages and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated MCUdude’s cores:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MajorCore&lt;/code&gt; v2.1.1 (&lt;a href=&quot;https://github.com/MCUdude/MajorCore/releases/tag/v2.1.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MegaCore&lt;/code&gt; v2.1.1 (&lt;a href=&quot;https://github.com/MCUdude/MegaCore/releases/tag/v2.1.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MightyCore&lt;/code&gt; v2.1.1 (&lt;a href=&quot;https://github.com/MCUdude/MightyCore/releases/tag/v2.1.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MiniCore&lt;/code&gt; v2.1.1 (&lt;a href=&quot;https://github.com/MCUdude/MiniCore/releases/tag/v2.1.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MicroCore&lt;/code&gt; to v2.0.3 (&lt;a href=&quot;https://github.com/MCUdude/MicroCore/releases/tag/v2.0.3&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;digispark&lt;/code&gt; boards were switched to Arduino core by @ArminJo and updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;micronucleus&lt;/code&gt; tool&lt;/li&gt;
  &lt;li&gt;The default toolchain switched to GCC &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v7.3.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Atmel AVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v60&quot;&gt;Atmel SAM dev-platform v6.0&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; v6.0.0 includes updates for the Adafruit and Seeed Arduino cores, updated SVD files for better debugging experience and several minor updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.5.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.5.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Adafruit SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.6.5&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/ArduinoCore-samd/releases/tag/1.6.5&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Seeed SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.1&lt;/code&gt; (&lt;a href=&quot;https://github.com/Seeed-Studio/ArduinoCore-samd/releases/tag/v1.8.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated SVD files&lt;/li&gt;
  &lt;li&gt;Added support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug_speed&lt;/code&gt;(https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-speed) option&lt;/li&gt;
  &lt;li&gt;Minor improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Atmel SAM dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelsam.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelsam/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stmicroelectronics-stm32-dev-platform-v120&quot;&gt;STMicroelectronics STM32 dev-platform v12.0&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/ststm32&quot;&gt;ST STM32&lt;/a&gt; platform comes with new generic boards, improvements for STM32Cube integration and several minor fixes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/genericSTM32F373RC.html&quot;&gt;genericSTM32F373RC&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/genericSTM32F407IGT6.html&quot;&gt;genericSTM32F407IG&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.5.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.5.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added support for &lt;a href=&quot;https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-speed&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug_speed&lt;/code&gt;&lt;/a&gt; option&lt;/li&gt;
  &lt;li&gt;Improvements to the STM32Cube integration:
    &lt;ul&gt;
      &lt;li&gt;Link STM32Cube HAL files as objects&lt;/li&gt;
      &lt;li&gt;Fixed filter template for internal libs&lt;/li&gt;
      &lt;li&gt;Added missing path to CMSIS-DSP headers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the ST STM32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;texas-instruments-msp430-dev-platform-v23&quot;&gt;Texas Instruments MSP430 dev-platform v2.3&lt;/h2&gt;

&lt;p&gt;The new &lt;a href=&quot;https://platformio.org/platforms/timsp430&quot;&gt;TI MSP430&lt;/a&gt; v2.3 is mostly a maintenance release that comes with the most recent Energia core, updated toolchain and auxiliary packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/timsp430/lpmsp430g2476.html&quot;&gt;TI LaunchPad MSP-EXP430FR2476LP&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Energia core to 1.8.10E23&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the TI MSP430 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/timsp430.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-timsp430/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the February 2021 updates of the PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-february-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-february-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source January Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-january-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source January Updates" /><published>2021-02-04T00:00:00+02:00</published><updated>2021-02-04T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-january-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-january-2021-updates.html">&lt;p&gt;Welcome to the January 2021 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
The beginning of the year can often take off with a slow start for any project, but we managed to prepare several great updates. As usual, we’d like to walk you through everything that’s new across the PlatformIO ecosystem.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-january-news.jpg&quot; alt=&quot;PlatformIO Open Source January Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During January, we have released a new version of PlatformIO Core, published a new RISC-V based development platform, added support for ESP-IDF v4.2, rolled out updates for the Espressif32 and Microchip SAM/megaAVR platforms, fixed a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-core-51&quot; id=&quot;markdown-toc-platformio-core-51&quot;&gt;PlatformIO Core 5.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#esp-idf-v42&quot; id=&quot;markdown-toc-esp-idf-v42&quot;&gt;ESP-IDF v4.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#openhw-risc-v-dev-platform&quot; id=&quot;markdown-toc-openhw-risc-v-dev-platform&quot;&gt;OpenHW RISC-V dev-platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif32-dev-platform-v30&quot; id=&quot;markdown-toc-espressif32-dev-platform-v30&quot;&gt;Espressif32 dev-platform v3.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-megaavr-dev-platform-v14&quot; id=&quot;markdown-toc-atmel-megaavr-dev-platform-v14&quot;&gt;Atmel megaAVR dev-platform v1.4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v511&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v511&quot;&gt;Atmel SAM dev-platform v5.1.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-core-51&quot;&gt;PlatformIO Core 5.1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/core/index.html&quot;&gt;PlatformIO Core&lt;/a&gt; is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v5.1.0 release. This milestone we again received helpful feedback from our community, which let us identify and tackle many issues and prepare a lot of great improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PlatformIO Home&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Boosted &lt;a href=&quot;https://docs.platformio.org/page/home/index.html&quot;&gt;PlatformIO Home&lt;/a&gt; performance thanks to migrating the codebase to the pure Python 3 Asynchronous I/O stack&lt;/li&gt;
      &lt;li&gt;Added a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--session-id&lt;/code&gt; option to &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/cmd_home.html&quot;&gt;pio home&lt;/a&gt; command that helps to keep PlatformIO Home isolated from other instances and protect from 3rd party access (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3397&quot;&gt;issue #3397&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build System&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Upgraded build engine to the SCons 4.1 (&lt;a href=&quot;https://scons.org/scons-410-is-available.html&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Refactored a workaround for a maximum command line character limitation (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3792&quot;&gt;issue #3792&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue with Python 3.8+ on Windows when a network drive is used (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3417&quot;&gt;issue #3417&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Package Management&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;New options for &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/system/cmd_prune.html&quot;&gt;pio system prune&lt;/a&gt; command:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--dry-run&lt;/code&gt; option to show data that will be removed&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--core-packages&lt;/code&gt; option to remove unnecessary core packages&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--platform-packages&lt;/code&gt; option to remove unnecessary development platform packages (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/923&quot;&gt;issue #923&lt;/a&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Added new &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/cmd_settings.html#check-prune-system-threshold&quot;&gt;check_prune_system_threshold&lt;/a&gt; setting&lt;/li&gt;
      &lt;li&gt;Disabled automatic removal of unnecessary development platform packages (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3708&quot;&gt;issue #3708&lt;/a&gt;, &lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3770&quot;&gt;issue #3770&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue when unnecessary packages were removed in  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update --dry-run&lt;/code&gt; mode (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3809&quot;&gt;issue #3809&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed a “ValueError: Invalid simple block” when uninstalling a package with a custom name and external source (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3816&quot;&gt;issue #3816&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Configure a custom debug adapter speed using a new &lt;a href=&quot;https://docs.platformio.org/page/projectconf/section_env_debug.html#debug-speed&quot;&gt;debug_speed&lt;/a&gt; option (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3799&quot;&gt;issue #3799&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Handle debugging server’s “ready_pattern” in “stderr” output&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Improved listing of &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/device/cmd_list.html&quot;&gt;multicast DNS services&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Fixed a “UnicodeDecodeError: ‘utf-8’ codec can’t decode byte” when using J-Link for firmware uploading on Linux (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3804&quot;&gt;issue #3804&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue with a compiler driver for “.ccls” language server (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3808&quot;&gt;issue #3808&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue when &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html#cmdoption-pio-device-monitor-eol&quot;&gt;pio device monitor –eol&lt;/a&gt; and “send_on_enter” filter do not work properly (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3787&quot;&gt;issue #3787&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information and use &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html&quot;&gt;pio upgrade&lt;/a&gt; command to update to the latest version.&lt;/p&gt;

&lt;h2 id=&quot;esp-idf-v42&quot;&gt;ESP-IDF v4.2&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for the latest stable &lt;strong&gt;ESP-IDF v4.2&lt;/strong&gt; - the official development framework for the ESP32 and ESP32-S Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in the latest release:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP32-S2&lt;/code&gt; SoC&lt;/li&gt;
  &lt;li&gt;Support of Bluetooth 5.0 for ESP32&lt;/li&gt;
  &lt;li&gt;Improvements to the Wi-Fi stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on project configuration for ESP-IDF can be found &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for ESP-IDF&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/espressif/esp-idf/releases/tag/v4.2&quot;&gt;Release notes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4.2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html&quot;&gt;Documentation for ESP-IDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openhw-risc-v-dev-platform&quot;&gt;OpenHW RISC-V dev-platform&lt;/h2&gt;

&lt;p&gt;OpenHW Group is a not-for-profit, global organization that provides an infrastructure for hosting high quality open-source HW developments in line with industry best practices. The OpenHW CV32E40P RISC-V core is the first open-source core for high-volume chips verified with the state-of-the-art process required for high-integrity, commercial SoCs.&lt;/p&gt;

&lt;p&gt;The first release of the OpenHW dev-platform includes basic functionality for uploading pregenerated bitstreams to FPGA boards, developing and debugging applications based on the PULP SDK.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-openhw/releases/tag/v0.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for OpenHW dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/openhw.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-openhw/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif32-dev-platform-v30&quot;&gt;Espressif32 dev-platform v3.0&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif 32&lt;/a&gt; dev-platform comes with new boards including the new ESP32-S2 SoC, support for ESP-IDF v4.2 and several improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/featheresp32-s2.html&quot;&gt;Adafruit ESP32-S2 Feather Development Board&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/esp32-s2-kaluga-1.html&quot;&gt;Espressif ESP32-S2-Kaluga-1 Kit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/esp32-s2-saola-1.html&quot;&gt;Espressif ESP32-S2-Saola-1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/nscreen-32.html&quot;&gt;YeaCreate NSCREEN-32&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP-IDF&lt;/code&gt; to the latest stable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added support for the new &lt;a href=&quot;https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-speed&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug_speed&lt;/code&gt;&lt;/a&gt; option&lt;/li&gt;
  &lt;li&gt;Default Arduino partitions moved to a separate section&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-megaavr-dev-platform-v14&quot;&gt;Atmel megaAVR dev-platform v1.4&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelmegaavr&quot;&gt;Atmel megaAVR&lt;/a&gt; includes initial support for megaTinyCore - a lightweight Arduino core for the tinyAVR 0-series and 1-series chips, a lot of new generic boards, updated Arduino packages, and several minor updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New board manifests for the following generic MCUs: &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1604.html&quot;&gt;ATtiny1604&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1606.html&quot;&gt;ATtiny1606&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1607.html&quot;&gt;ATtiny1607&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1614.html&quot;&gt;ATtiny1614&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1616.html&quot;&gt;ATtiny1616&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1617.html&quot;&gt;ATtiny1617&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny202.html&quot;&gt;ATtiny202&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny204.html&quot;&gt;ATtiny204&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny212.html&quot;&gt;ATtiny212&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny214.html&quot;&gt;ATtiny214&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny3216.html&quot;&gt;ATtiny3216&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny3217.html&quot;&gt;ATtiny3217&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny402.html&quot;&gt;ATtiny402&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny404.html&quot;&gt;ATtiny404&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny406.html&quot;&gt;ATtiny406&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny412.html&quot;&gt;ATtiny412&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny414.html&quot;&gt;ATtiny414&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny416.html&quot;&gt;ATtiny416&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny417.html&quot;&gt;ATtiny417&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny804.html&quot;&gt;ATtiny804&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega64.html&quot;&gt;ATmega64&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny806.html&quot;&gt;ATtiny806&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny817.html&quot;&gt;ATtiny817&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initial support for &lt;a href=&quot;https://github.com/SpenceKonde/megaTinyCore&quot;&gt;megaTinyCore&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Updated megaAVR Arduino core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.7&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-megaavr/releases/tag/1.8.7&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated MegaCoreX to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.0.7&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MegaCoreX/releases/tag/v1.0.7&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Improvements to fuses and bootloader programming process&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/releases/tag/v1.4.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Atmel megaAVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v511&quot;&gt;Atmel SAM dev-platform v5.1.1&lt;/h2&gt;

&lt;p&gt;The new &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; v5.1.1 is mostly a maintenance release that comes with updated Arduino core and minor fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Adafruit SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.11&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-samd/releases/tag/1.8.11&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelsam/releases/tag/v5.1.1&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the January 2021 updates of PlatformIO Open Source professional collaborative platform for embedded development. The beginning of the year can often take off with a slow start for any project, but we managed to prepare several great updates. As usual, we’d like to walk you through everything that’s new across the PlatformIO ecosystem.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Core 5.1 🚀</title><link href="https://piolabs.com/blog/news/platformio-core-5-1-released.html" rel="alternate" type="text/html" title="PlatformIO Core 5.1 🚀" /><published>2021-01-28T00:00:00+02:00</published><updated>2021-01-28T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-core-5-1-released</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-core-5-1-released.html">&lt;p&gt;We are happy to announce the next release of PlatformIO Core with the boosted performance for PlatformIO Home, support for SCons 4.1, and the improved package management system!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/2021-01-28-platformio-core-5-1-released/platformio-core-5-1-released.png&quot; alt=&quot;PlatformIO Core 5.1 🚀&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-new&quot; id=&quot;markdown-toc-what-is-new&quot;&gt;What is New&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#platformio-home&quot; id=&quot;markdown-toc-platformio-home&quot;&gt;PlatformIO Home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build-system&quot; id=&quot;markdown-toc-build-system&quot;&gt;Build System&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#package-management&quot; id=&quot;markdown-toc-package-management&quot;&gt;Package Management&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#debugging&quot; id=&quot;markdown-toc-debugging&quot;&gt;Debugging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#upgrade&quot; id=&quot;markdown-toc-upgrade&quot;&gt;Upgrade&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-tuned&quot; id=&quot;markdown-toc-stay-tuned&quot;&gt;Stay tuned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-new&quot;&gt;What is New&lt;/h2&gt;

&lt;p&gt;In this section, we are going to highlight the most important changes and features introduced in PlatformIO Core 5.1.
Please visit &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.1.0&quot; target=&quot;_blank&quot;&gt;PlatformIO 5.1.0 Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h3 id=&quot;platformio-home&quot;&gt;PlatformIO Home&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/page/home/index.html&quot;&gt;PlatformIO Home&lt;/a&gt; is a powerful, modern, and interactive user interface (UI) for PlatformIO collaborative platform.
It’s powered by &lt;a href=&quot;/technology/modern-ui-toolkit.html&quot;&gt;PlatformIO Labs’ Modern UI Toolkit&lt;/a&gt; and contains the following key instruments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project Management&lt;/li&gt;
  &lt;li&gt;Library Management&lt;/li&gt;
  &lt;li&gt;Development Platforms, frameworks, and boards Management&lt;/li&gt;
  &lt;li&gt;Device Management (serial, logical, and multicast DNS services)&lt;/li&gt;
  &lt;li&gt;Static Code Analysis&lt;/li&gt;
  &lt;li&gt;Firmware File Explorer&lt;/li&gt;
  &lt;li&gt;Firmware Memory Inspection&lt;/li&gt;
  &lt;li&gt;Firmware Sections &amp;amp; Symbols Viewer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PlatformIO Core 5.1 brings significantly boosted performance to PlatformIO Home by migrating the codebase to the pure Python 3 Asynchronous I/O stack.
This approach solves previous issues caused by the Twisted engine that depends on operating system libraries and 3rd-party Python packages.&lt;/p&gt;

&lt;h3 id=&quot;build-system&quot;&gt;Build System&lt;/h3&gt;

&lt;h4 id=&quot;scons-41&quot;&gt;SCons 4.1&lt;/h4&gt;

&lt;p&gt;The PlatformIO Core 5.1 build engine has been upgraded to the latest &lt;a href=&quot;https://scons.org/&quot; target=&quot;_blank&quot;&gt;SCons 4.1 - a next-generation software construction tool&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/projectconf/advanced_scripting.html&quot;&gt;Configuration files are Python scripts&lt;/a&gt; – use the power of a real programming language to solve build problems&lt;/li&gt;
  &lt;li&gt;Built-in reliable and automatic dependency analysis&lt;/li&gt;
  &lt;li&gt;Improved support for parallel builds&lt;/li&gt;
  &lt;li&gt;Ability to &lt;a href=&quot;https://docs.platformio.org/page/projectconf/section_platformio.html#projectconf-pio-cache-dir&quot;&gt;share built files in a cache&lt;/a&gt; to speed up multiple builds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;command-line-character-limitation&quot;&gt;Command-line character limitation&lt;/h4&gt;

&lt;p&gt;Operating systems have their own default command-line character limitations. Windows OS is limited to 8192 characters where most Unix OSes to 131072.
These limitations lead to build issues caused by development frameworks that pass multiple “include” flags or dependent libraries per one command.&lt;/p&gt;

&lt;p&gt;PlatformIO Core 5.1 was switched to the SCons TempFileMunge that automatically handles long commands and moves flags to a temporary file.&lt;/p&gt;

&lt;h3 id=&quot;package-management&quot;&gt;Package Management&lt;/h3&gt;

&lt;p&gt;Starting with PlatformIO Core 5.1, the package management system does not cleanup unnecessary packages automatically.
We had a lot of discussion around this case, and the best solution was to allow users to personally maintain PlatformIO System.&lt;/p&gt;

&lt;p&gt;Hence, PlatformIO Core 5.1 introduces updated &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/system/cmd_prune.html&quot;&gt;pio system prune&lt;/a&gt; command with new options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--dry-run&lt;/code&gt; option to show data that will be removed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--core-packages&lt;/code&gt; option to remove unnecessary core packages&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--platform-packages&lt;/code&gt; option to remove unnecessary development platform packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that PlatformIO Core 5.1 will monitor PlatformIO installation and inform you about unnecessary data when their size on disk crosses a value set in &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/cmd_settings.html#check-prune-system-threshold&quot;&gt;check_prune_system_threshold&lt;/a&gt; setting. A default value is set to 1024Mb (1Gb).&lt;/p&gt;

&lt;p&gt;To list unnecessary data without pruning, please use the following command – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio system prune --dry-run&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;debugging&quot;&gt;Debugging&lt;/h3&gt;

&lt;p&gt;The initial debug adapter speed is an important setting that greatly affects the overall debugging experience. This new option will help users to more easily tune that value directly from their project configuration file regardless of what debug server is used. Here are some typical examples:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:custom_debug_speed_examples]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; fixed speed in kHz
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;debug_speed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;500&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; automatic speed (only J-Link)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;debug_speed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;auto&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; adaptive clocking instead of fixed JTAG speed (only J-Link)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;debug_speed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;adaptive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that not all dev-platforms support this feature at the moment, but we’ll gradually implement this functionality in all eligible platforms. Stay tuned!&lt;/p&gt;

&lt;h2 id=&quot;upgrade&quot;&gt;Upgrade&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PlatformIO IDE&lt;/strong&gt;: Left Sidebar &amp;gt; PlatformIO (icon) &amp;gt; Quick Access &amp;gt; Upgrade PlatformIO Core&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Terminal&lt;/strong&gt;: Please run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio upgrade&lt;/code&gt; command in terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-tuned&quot;&gt;Stay tuned&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><summary type="html">We are happy to announce the next release of PlatformIO Core with the boosted performance for PlatformIO Home, support for SCons 4.1, and the improved package management system!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-01-28-platformio-core-5-1-released/platformio-core-5-1-released.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-01-28-platformio-core-5-1-released/platformio-core-5-1-released.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unit Testing with PlatformIO: Part 1. The Basics</title><link href="https://piolabs.com/blog/insights/unit-testing-part-1.html" rel="alternate" type="text/html" title="Unit Testing with PlatformIO: Part 1. The Basics" /><published>2021-01-25T00:00:00+02:00</published><updated>2021-01-25T00:00:00+02:00</updated><id>https://piolabs.com/blog/insights/unit-testing-part-1</id><content type="html" xml:base="https://piolabs.com/blog/insights/unit-testing-part-1.html">&lt;p&gt;Unit testing isn’t a new concept in the software engineering field, it has been around for at least the past three decades. At the same time, it is still not so widespread in the embedded industry, even though the situation is getting better in recent years.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot; id=&quot;markdown-toc-prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot; id=&quot;markdown-toc-getting-started&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-first-tests&quot; id=&quot;markdown-toc-adding-first-tests&quot;&gt;Adding first tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In a nutshell, unit testing boils down to splitting the code into small units which can be tested in isolation to verify their behavior in different circumstances. The main benefit of thorough unit testing is looser coupling between software modules which implicitly leads to better software design. A broad set of tests also improves developer confidence in the project codebase by exposing errors very early in the development cycle and preventing regression bugs.&lt;/p&gt;

&lt;p&gt;Thanks to proper module isolation, tests can be run directly on the host machine which allows us to start developing software even without real hardware at hand. Besides, well-structured tests represent a form of documentation on the proper use of each tested module.&lt;/p&gt;

&lt;p&gt;In embedded software, a “unit” usually represents a single module that consists of a source file and an accompanying header file. This module usually abstracts a part of the system and packs together a group of related functions and data, for example, a peripheral driver, data structure, etc.&lt;/p&gt;

&lt;p&gt;This article is the beginning of a series that concentrates on creating a convenient environment for test-driven development for embedded devices. We will implement and test a very useful array-based data structure called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circular buffer&lt;/code&gt;. In a nutshell, the main advantage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circular buffer&lt;/code&gt; is that it does not need to have its elements shifted each time when a new element is added.&lt;/p&gt;

&lt;p&gt;Please note, the project in this series has been purposefully made as simple as possible for the sake of clarity. A comprehensive description of all nuances of implementing a proper circular buffer can easily take an entire dedicated article. The goal of this series is to concentrate on testing workflow, so don’t rely on the code presented in this series in real projects.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html&quot; target=&quot;_blank&quot;&gt;VSCode with installed PlatformIO IDE extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;We will start with testing our module on the host machine. First, we need to install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;native&lt;/code&gt; development platform. PlatformIO doesn’t install any toolchains automatically for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;native&lt;/code&gt; dev-platform and uses the toolchain (preferably based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GCC&lt;/code&gt;) native for your OS (on Windows it’s recommended to install &lt;a href=&quot;http://www.mingw.org/&quot; target=&quot;_blank&quot;&gt;MinGW&lt;/a&gt; and make it available via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable). Let’s install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;native&lt;/code&gt; dev-platform via PlatformIO Home:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-2.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-2.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of creating our project from scratch, we can conveniently import the “Hello World” example and use it as a boilerplate:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s replace the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.c&lt;/code&gt; file with an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we try to build the project, we should see the successful result:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;adding-first-tests&quot;&gt;Adding first tests&lt;/h2&gt;

&lt;p&gt;PlatformIO comes with its own tool called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unit Testing Engine&lt;/code&gt; to help you start testing as quickly as possible. Out-of-the-box support for a unit testing framework called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unity&lt;/code&gt; and a built-in test runner allows us to start writing tests without any preconfiguration. We just need to add new files with test cases to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; folder. For more details on the Unity Test API used in this project, see the overview in &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/unit-testing.html#api&quot; target=&quot;_blank&quot;&gt;PlatformIO Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Back to the project, let’s create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_circular_buffer.c&lt;/code&gt; with the following boilerplate code:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unity.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UNITY_BEGIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UNITY_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if we run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt; task in the PlatformIO shortcut menu we should see that PlatformIO successfully detected our new file with no tests inside:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-5.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-5.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it’s time to think through the API for our implementation. We recommend to split any application into isolated modules and place them into the special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt; folder in the root of the project. PlatformIO offers a very convenient mechanism called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Library Dependency Finder (LDF)&lt;/code&gt; that will find these modules and automatically add them to the project build tree based on included header files or explicit dependencies specified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;For the sake of simplicity, our buffer will be fixed-sized with 8-bit bytes as elements. The basic functionality will include the following functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initialization of a circular buffer&lt;/li&gt;
  &lt;li&gt;Adding a new element to a circular buffer&lt;/li&gt;
  &lt;li&gt;Getting an element from a circular buffer&lt;/li&gt;
  &lt;li&gt;Reporting whether a circular buffer is empty&lt;/li&gt;
  &lt;li&gt;Cleaning the entire circular buffer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The requirements above lead us to the following header file for our module:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef CIRCULAR_BUFFER_H
#define CIRCULAR_BUFFER_H
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;stdbool.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
    If the buffer is of a power-of-2 size,
    then a much quicker bitwise-AND instruction can be used instead.
*/&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifndef BUFFER_SIZE
#define BUFFER_SIZE (32)
#endif
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if (BUFFER_SIZE &amp;amp; (BUFFER_SIZE - 1)) != 0
#error &quot;BUFFER_SIZE must be a power of two&quot;
#endif
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define BUFFER_MASK (BUFFER_SIZE-1)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbuffer_s&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif // CIRCULAR_BUFFER_H
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s create a new folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/cbuffer&lt;/code&gt; and add two new files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer.h&lt;/code&gt; with the code above and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer.c&lt;/code&gt; with empty implementations:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;cbuffer.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function stubs above do nothing in terms of functionality, but they are required at this step so we can compile test binary without linker issues.&lt;/p&gt;

&lt;p&gt;It’s time to add the first test case. It’s logical to assume that after initialization a circular buffer shouldn’t contain any elements, let’s test this behavior by adding the first test case to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_circular_buffer.c&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unity.h&amp;gt;
#include &quot;cbuffer.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_circular_buffer_empty_after_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TEST_ASSERT_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UNITY_BEGIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;RUN_TEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_circular_buffer_empty_after_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;UNITY_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The body of the test function is pretty simple. We create a new buffer and initialize it in the default state. By using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_ASSERT_TRUE&lt;/code&gt; statement we check that the return value from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer_empty&lt;/code&gt; function is exactly what we expect. If we run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt; task again, PlatformIO will report that everything worked as expected, and that seems correct since we hardcoded the return value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer_empty&lt;/code&gt; to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;. Let’s add another test that adds a new element to the buffer and checks that it’s not empty:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_circular_buffer_not_empty_after_new_element_added&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TEST_ASSERT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time PlatformIO complains that our new test failed:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-6.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-6.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that it’s time to implement some missing parts of our module in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/cbuffer/cbuffer.c&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, if we run our tests, we see that all of them passed:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-7.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-7.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the same way, we can add a new test &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_circular_buffer_reports_full_correctly&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_circular_buffer_reports_full_correctly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TEST_ASSERT_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer_full&lt;/code&gt; function and ensure that it works as expected:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next step is to implement reading from the buffer. Let’s write a new test case for this functionality and run the tests:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_circular_buffer_read_element_succesful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TEST_ASSERT_EQUAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbuffer_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Predictably, the new test failed because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer_get&lt;/code&gt; function is not implemented yet. Let’s fix that by adding the following code to our module:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last requirement states that we have to provide a function that clears the entire buffer. Let’s start by writing a simple test case which uses this feature and fails if we run the tests:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_circular_buffer_cleaned_succesfully&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TEST_ASSERT_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer_clear&lt;/code&gt; function in the following way:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unit testing often deals with a lot of repeated code. Usually, we need to prepare some context before a test can be run and we also might have some finishing work after. Fortunately, testing frameworks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unity&lt;/code&gt; have helper functions which can help us get rid of that code duplication:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setUp&lt;/code&gt; function is called before the invocation of each test method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tearDown&lt;/code&gt; function is called after the invocation of each test method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we take a look at the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_circular_buffer.c&lt;/code&gt; file, we can notice that all tests contain code where we initialize a buffer before validating behavior. Let’s extract that initialization step into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setUp&lt;/code&gt; function and clean the buffer in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tearDown&lt;/code&gt; function accordingly:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the tests look much better and if we run our tests again, PlatformIO will report that all tests are successful.&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-8.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-8.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At his point we’ve satisfied all the requirements specified in the beginning of this post. There are plenty of features that haven’t been implemented and probably even more edge cases that haven’t been tested properly. All of them could greatly improve our implementation, but they are out of the scope of this post since the main goal of this series is to introduce you to the unit testing mechanism used in PlatformIO.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Unit testing may look like an exhausting and boring process that introduces additional challenges, but in the long run, there are significant benefits. Unit testing forces the developers to write testable code which implicitly leads to better modular and loosely-coupled design, fewer bugs and less debug time. The more checks are covered in unit tests, the higher the quality of the final code.&lt;/p&gt;

&lt;p&gt;In the next article, we will try to run our tests on real hardware and explore the subtleties of setting up a communication channel for getting results from an embedded device.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html">Unit testing isn’t a new concept in the software engineering field, it has been around for at least the past three decades. At the same time, it is still not so widespread in the embedded industry, even though the situation is getting better in recent years.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-1.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source December Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-december-2020-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source December Updates" /><published>2021-01-07T00:00:00+02:00</published><updated>2021-01-07T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-december-2020-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-december-2020-updates.html">&lt;p&gt;Welcome to the December 2020 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-december-news.jpg&quot; alt=&quot;PlatformIO Open Source December Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During December, we implemented several feature requests, added support for Mbed OS v6.6.0, rolled out major updates for Nordic nRF52 and Microchip SAM/megaAVR platforms and fixed a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-core-504&quot; id=&quot;markdown-toc-platformio-core-504&quot;&gt;PlatformIO Core 5.0.4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mbed-os-updates&quot; id=&quot;markdown-toc-mbed-os-updates&quot;&gt;Mbed OS Updates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v51&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v51&quot;&gt;Atmel SAM dev-platform v5.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nordic-nrf52-dev-platform-v60&quot; id=&quot;markdown-toc-nordic-nrf52-dev-platform-v60&quot;&gt;Nordic nRF52 dev-platform v6.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-avr-dev-platform-v31&quot; id=&quot;markdown-toc-atmel-avr-dev-platform-v31&quot;&gt;Atmel AVR dev-platform v3.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wrapping-up-2020--intro-to-2021&quot; id=&quot;markdown-toc-wrapping-up-2020--intro-to-2021&quot;&gt;Wrapping Up 2020 &amp;amp; Intro to 2021&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-core-504&quot;&gt;PlatformIO Core 5.0.4&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/core/index.html&quot;&gt;PlatformIO Core&lt;/a&gt; is the heart of the whole PlatformIO ecosystem and we are glad to announce the next v5.0.4 release with improvements and bugfixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added “Core” suffix when showing PlatformIO Core version using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio --version&lt;/code&gt; command&lt;/li&gt;
  &lt;li&gt;Improved &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ccls&lt;/code&gt; configuration file for Emacs, Vim, and Sublime Text integrations&lt;/li&gt;
  &lt;li&gt;Updated analysis tools:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/plus/check-tools/cppcheck.html&quot;&gt;Cppcheck&lt;/a&gt; v2.3 with improved C++ parser and several new MISRA rules&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/plus/check-tools/pvs-studio.html&quot;&gt;PVS-Studio&lt;/a&gt; v7.11 with new diagnostics and updated mass suppression mechanism&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Show a warning message about deprecated support for Python 2 and Python 3.5&lt;/li&gt;
  &lt;li&gt;Do not provide “intelliSenseMode” option when generating configuration for VSCode C/C++ extension&lt;/li&gt;
  &lt;li&gt;Fixed a “git-sh-setup: file not found” error when installing project dependencies from Git VCS (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3740&quot;&gt;issue #3740&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue with package publishing on Windows when Unix permissions are not preserved (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3776&quot;&gt;issue #3776&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.0.4&quot;&gt;Release Notes&lt;/a&gt; for more detailed information and use &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html&quot;&gt;pio upgrade&lt;/a&gt; command to update to the latest version.&lt;/p&gt;

&lt;h2 id=&quot;mbed-os-updates&quot;&gt;Mbed OS Updates&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for the latest &lt;strong&gt;Mbed OS 6&lt;/strong&gt; - an open source embedded operating system designed specifically for the Internet of Things. It includes all the features you need to develop a connected product based on an Arm Cortex-M microcontroller, including security, connectivity, an RTOS and drivers for sensors and I/O devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in the latest releases:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improvements to BLE and COAP implementations&lt;/li&gt;
  &lt;li&gt;Additional cloud connectivity integrations&lt;/li&gt;
  &lt;li&gt;Better support for the bare metal profile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Legacy &lt;strong&gt;Mbed OS 5&lt;/strong&gt; was updated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v5.15.6&lt;/code&gt; - the latest version for the Mbed OS 5.15 branch to keep legacy projects up to date with the latest bugfixes and improvements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important fixes in v5.15.6:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nanostack release &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v12.6.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Improvements to WiSUN functionality&lt;/li&gt;
  &lt;li&gt;Mbed CoAP updated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v5.1.8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on project configuration for Mbed OS can be found &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Mbed OS&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.6.0&quot;&gt;Release notes for v6.6.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.5.0&quot;&gt;Release notes for v6.5.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.4.0&quot;&gt;Release notes for v6.4.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.3.0&quot;&gt;Release notes for v6.3.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-5.15.6&quot;&gt;Release notes for v5.15.6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html&quot;&gt;Documentation for Mbed OS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html#platforms&quot;&gt;Supported development platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v51&quot;&gt;Atmel SAM dev-platform v5.1&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; dev-platform brings new boards, updated Arduino cores and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_blm_badge.html&quot;&gt;Adafruit BLM Badge&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_feather_m4_can.html&quot;&gt;Adafruit Feather M4 CAN&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_matrix_portal_m4.html&quot;&gt;Adafruit Matrix Portal M4&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_qt_py_m0.html&quot;&gt;Adafruit QT Py M0&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Arduino SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.10&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/ArduinoCore-samd/releases/tag/1.6.4&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Adafruit SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.6.4&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-samd/releases/tag/1.8.10&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelsam/releases/tag/v5.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;nordic-nrf52-dev-platform-v60&quot;&gt;Nordic nRF52 dev-platform v6.0&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/nordicnrf52&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platform comes with new boards and updated Arduino nRF5 core:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/bbcmicrobit_v2.html&quot;&gt;BBC micro:bit V2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/dwm1001_dev.html&quot;&gt;decaWave DWM1001 Module Development Board&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/raytac_mdbt50q_rx.html&quot;&gt;Raytac MDBT50Q-RX Dongle&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/reel_board.html&quot;&gt;PHYTEC reel board&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/reel_board_v2.html&quot;&gt;PHYTEC reel board v2&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Arduino nRF5 core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.7&lt;/code&gt; (&lt;a href=&quot;https://github.com/sandeepmistry/arduino-nRF5/releases/tag/0.7.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-nordicnrf52/releases/tag/v6.0.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;atmel-avr-dev-platform-v31&quot;&gt;Atmel AVR dev-platform v3.1&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelavr&quot;&gt;Atmel AVR&lt;/a&gt; includes a major update of MicroCore - a lightweight Arduino core for ATtiny13 MCUs, dynamic flash memory calculation for bootloader-enabled devices and several minor updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated MicroCore to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.2&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MicroCore/releases/tag/v2.0.2&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;The bootloader size for MCUdude’s cores is now calculated dynamically&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Minor releases of MCUdude’s cores&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MightyCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.8&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MightyCore/releases/tag/v2.0.8&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;MiniCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.9&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MiniCore/releases/tag/v2.0.9&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;MegaCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.6&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MegaCore/releases/tag/v2.0.6&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;MajorCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.5&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MajorCore/releases/tag/v2.0.5&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelavr/releases/tag/v3.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Atmel AVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrapping-up-2020--intro-to-2021&quot;&gt;Wrapping Up 2020 &amp;amp; Intro to 2021&lt;/h2&gt;

&lt;p&gt;2020 was challenging in many aspects, but all that obstacles and constraints didn’t diminish our commitment to the growing Open Source Community. Ensuring the OSS part of PlatformIO Labs is thriving, stable, and up to date has always been one of our main goals. We remained motivated and did our best even in this difficult time thanks to our users and their open and sincere feedback.&lt;/p&gt;

&lt;p&gt;We want to thank everyone who has been a part of all of this work and progress, whether you worked with us as a client, contributed to our projects, or participated in any other way. We look forward to continuing our mission of consistent improvement in 2021. PlatformIO Labs will keep improving and bringing features to the community and we hope you will continue to be a part of our big global family!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have a great 2021!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the December 2020 updates of PlatformIO Open Source professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-december-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-december-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Analyze your firmware footprint with PlatformIO: Part 2. Project Inspector</title><link href="https://piolabs.com/blog/insights/memory-analysis-part-2.html" rel="alternate" type="text/html" title="Analyze your firmware footprint with PlatformIO: Part 2. Project Inspector" /><published>2020-12-14T00:00:00+02:00</published><updated>2020-12-14T00:00:00+02:00</updated><id>https://piolabs.com/blog/insights/memory-analysis-part-2</id><content type="html" xml:base="https://piolabs.com/blog/insights/memory-analysis-part-2.html">&lt;p&gt;Have you ever wondered how the linker is assigning physical memory, where your code is placed in Flash, or how much RAM is used by an OS or peripheral drivers?&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the &lt;a href=&quot;/blog/insights/memory-analysis-part-1.html&quot;&gt;previous post&lt;/a&gt;, we briefly looked into general aspects of the memory layout of executable files. In this post, we will go deeper into the ELF file structure and memory analysis using a very useful PlatformIO tool called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Inspector&lt;/code&gt; which allows analyzing application memory usage or to answer specific questions about which memory section a variable or function is placed in or what file this symbol is located in.&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#running-analysis&quot; id=&quot;markdown-toc-running-analysis&quot;&gt;Running Analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#inspecting-results&quot; id=&quot;markdown-toc-inspecting-results&quot;&gt;Inspecting Results&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#project-statistics&quot; id=&quot;markdown-toc-project-statistics&quot;&gt;Project Statistics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#project-explorer&quot; id=&quot;markdown-toc-project-explorer&quot;&gt;Project Explorer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#symbol-table&quot; id=&quot;markdown-toc-symbol-table&quot;&gt;Symbol Table&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#memory-sections&quot; id=&quot;markdown-toc-memory-sections&quot;&gt;Memory Sections&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;running-analysis&quot;&gt;Running Analysis&lt;/h2&gt;

&lt;p&gt;We already installed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ststm32&lt;/code&gt; platform and imported a basic example in the previous blog post. Let’s analyze the same project, but this time via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Inspector&lt;/code&gt;. On the PlatformIO Home page, navigate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; tab, select your project and environment, press the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-2.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-2.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;inspecting-results&quot;&gt;Inspecting Results&lt;/h2&gt;

&lt;h3 id=&quot;project-statistics&quot;&gt;Project Statistics&lt;/h3&gt;

&lt;p&gt;Once the analysis is done, PlatformIO will show a detailed report on memory usage. The first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Statistics&lt;/code&gt; tab displays general information about used hardware, a graphical representation of the percentage of used memory, Top-5 files with the most significant contribution to the memory footprint, along with Top-5 largest symbols defined in the firmware:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, in our case, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stm32f4xx_hal_gpio.c&lt;/code&gt; file has the highest memory consumption of 428 bytes.&lt;/p&gt;

&lt;p&gt;As we can see, the report from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Inspector&lt;/code&gt; a bit differs from the regular information reported after each build step. In this case, the differences can be explained by a different calculation method of memory consumption. Project Inspector also takes into account the memory section which was allocated for the stack and heap. Usually, it’s done in the project linker script and used to ensure that there is enough free memory left for the stack and heap to fit into the RAM. In code  such verification may look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_Min_Heap_Size = 0x200;      /* required amount of heap  */
_Min_Stack_Size = 0x400;     /* required amount of stack */
...
._user_heap_stack :
{
    . = ALIGN(4);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(4);
} &amp;gt;RAM
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;._user_heap_stack&lt;/code&gt; (or similar name) is exactly the section that declares the memory area that could be allocated at runtime.&lt;/p&gt;

&lt;h3 id=&quot;project-explorer&quot;&gt;Project Explorer&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Explorer&lt;/code&gt; tab provides a convenient way for navigating through project source files while displaying used RAM and Flash memory for each file. By clicking on any particular file we can see a detailed report on symbols defined in this file and their size:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;symbol-table&quot;&gt;Symbol Table&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Symbols&lt;/code&gt; page lists the most memory-consuming symbols in the entire project. Besides the information about size, address, and the memory segment where that symbols are located, there are also two additional columns that provide extra information:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-5.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-5.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt; column describes the specific type of each symbol. The most interesting for us are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STT_OBJECT&lt;/code&gt; - This symbol is associated with a data object, such as a variable, an array, and so on.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STT_FUNC&lt;/code&gt; - This symbol indicates that this symbol represents a function or other executable code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bind&lt;/code&gt; column shows symbol binding type. For most applications, symbol types fall into the following three categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STB_LOCAL&lt;/code&gt; - Local symbols that are not visible outside the object file containing their definition. Local symbols with the same name may exist in multiple files without interfering with each other.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STB_GLOBAL&lt;/code&gt; - Global symbols. These symbols are visible to all object files being combined.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STB_WEAK&lt;/code&gt; - Weak symbols resemble global symbols, but their definitions have lower precedence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can also click on the magnifier icon on the right to the symbol name to open the corresponding source file and highlight the line where that symbol was defined.&lt;/p&gt;

&lt;h3 id=&quot;memory-sections&quot;&gt;Memory Sections&lt;/h3&gt;

&lt;p&gt;The last tab &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sections&lt;/code&gt; is similar to the memory report after the verbose build, but shows extra information like section types and attributes:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-6.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-6.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt; column categorizes the section contents and semantics. A short description of the possible values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_PROGBITS&lt;/code&gt; - The section holds information defined by the program, includes executable code and data&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_NOBITS&lt;/code&gt; - A section of this type occupies no space in the file but otherwise resembles &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_PROGBITS&lt;/code&gt; (for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; section)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_STRTAB&lt;/code&gt; - The section holds the string table&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_SYMTAB&lt;/code&gt; - The section holds the symbol table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flags&lt;/code&gt; column describes miscellaneous section attributes The most interesting for us are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W (SHF_WRITE)&lt;/code&gt; - The section contains data that should be writable during process execution.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A (SHF_ALLOC)&lt;/code&gt; - The section occupies memory during process execution (used to attribute control sections that don’t reside in the memory image of an object file).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X (SHF_EXECINSTR)&lt;/code&gt; - The section contains executable machine instructions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested in more detailed information about the structure of ELF files, here is a great &lt;a href=&quot;https://man7.org/linux/man-pages/man5/elf.5.html&quot; target=&quot;_blank&quot;&gt;man page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Advanced analysis tools are becoming more useful as the modern firmware in embedded systems is getting highly complicated. Such tools enable developers to better understand how optimization flags, standard libraries, or even coding style affect memory consumption. Dismissive attitude towards optimization may lead to nonrecoverable software failures after deployment, especially on embedded systems where code space is a very constrained resource.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html">Have you ever wondered how the linker is assigning physical memory, where your code is placed in Flash, or how much RAM is used by an OS or peripheral drivers?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-1.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>