<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://piolabs.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://piolabs.com/" rel="alternate" type="text/html" /><updated>2021-02-04T15:10:13+02:00</updated><id>https://piolabs.com/feed.xml</id><title type="html">PlatformIO Labs</title><subtitle>A proven technology used by global innovators and by over a million embedded developers around the world.</subtitle><author><name>PlatformIO Labs</name><email>contact@piolabs.com</email></author><entry><title type="html">PlatformIO Open Source January Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-january-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source January Updates" /><published>2021-02-04T00:00:00+02:00</published><updated>2021-02-04T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-january-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-january-2021-updates.html">&lt;p&gt;Welcome to the January 2021 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
The beginning of the year can often take off with a slow start for any project, but we managed to prepare several great updates. As usual, we’d like to walk you through everything that’s new across the PlatformIO ecosystem.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-january-news.jpg&quot; alt=&quot;PlatformIO Open Source January Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During January, we have released a new version of PlatformIO Core, published a new RISC-V based development platform, added support for ESP-IDF v4.2, rolled out updates for the Espressif32 and Microchip SAM/megaAVR platforms, fixed a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-core-51&quot; id=&quot;markdown-toc-platformio-core-51&quot;&gt;PlatformIO Core 5.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#esp-idf-v42&quot; id=&quot;markdown-toc-esp-idf-v42&quot;&gt;ESP-IDF v4.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#openhw-risc-v-dev-platform&quot; id=&quot;markdown-toc-openhw-risc-v-dev-platform&quot;&gt;OpenHW RISC-V dev-platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif32-dev-platform-v30&quot; id=&quot;markdown-toc-espressif32-dev-platform-v30&quot;&gt;Espressif32 dev-platform v3.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-megaavr-dev-platform-v14&quot; id=&quot;markdown-toc-atmel-megaavr-dev-platform-v14&quot;&gt;Atmel megaAVR dev-platform v1.4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v511&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v511&quot;&gt;Atmel SAM dev-platform v5.1.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-core-51&quot;&gt;PlatformIO Core 5.1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/core/index.html&quot;&gt;PlatformIO Core&lt;/a&gt; is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v5.1.0 release. This milestone we again received helpful feedback from our community, which let us identify and tackle many issues and prepare a lot of great improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PlatformIO Home&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Boosted &lt;a href=&quot;https://docs.platformio.org/page/home/index.html&quot;&gt;PlatformIO Home&lt;/a&gt; performance thanks to migrating the codebase to the pure Python 3 Asynchronous I/O stack&lt;/li&gt;
      &lt;li&gt;Added a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--session-id&lt;/code&gt; option to &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/cmd_home.html&quot;&gt;pio home&lt;/a&gt; command that helps to keep PlatformIO Home isolated from other instances and protect from 3rd party access (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3397&quot;&gt;issue #3397&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build System&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Upgraded build engine to the SCons 4.1 (&lt;a href=&quot;https://scons.org/scons-410-is-available.html&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Refactored a workaround for a maximum command line character limitation (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3792&quot;&gt;issue #3792&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue with Python 3.8+ on Windows when a network drive is used (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3417&quot;&gt;issue #3417&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Package Management&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;New options for &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/system/cmd_prune.html&quot;&gt;pio system prune&lt;/a&gt; command:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--dry-run&lt;/code&gt; option to show data that will be removed&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--core-packages&lt;/code&gt; option to remove unnecessary core packages&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--platform-packages&lt;/code&gt; option to remove unnecessary development platform packages (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/923&quot;&gt;issue #923&lt;/a&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Added new &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/cmd_settings.html#check-prune-system-threshold&quot;&gt;check_prune_system_threshold&lt;/a&gt; setting&lt;/li&gt;
      &lt;li&gt;Disabled automatic removal of unnecessary development platform packages (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3708&quot;&gt;issue #3708&lt;/a&gt;, &lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3770&quot;&gt;issue #3770&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue when unnecessary packages were removed in  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update --dry-run&lt;/code&gt; mode (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3809&quot;&gt;issue #3809&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed a “ValueError: Invalid simple block” when uninstalling a package with a custom name and external source (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3816&quot;&gt;issue #3816&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Configure a custom debug adapter speed using a new &lt;a href=&quot;https://docs.platformio.org/page/projectconf/section_env_debug.html#debug-speed&quot;&gt;debug_speed&lt;/a&gt; option (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3799&quot;&gt;issue #3799&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Handle debugging server’s “ready_pattern” in “stderr” output&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Improved listing of &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/device/cmd_list.html&quot;&gt;multicast DNS services&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Fixed a “UnicodeDecodeError: ‘utf-8’ codec can’t decode byte” when using J-Link for firmware uploading on Linux (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3804&quot;&gt;issue #3804&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue with a compiler driver for “.ccls” language server (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3808&quot;&gt;issue #3808&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue when &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html#cmdoption-pio-device-monitor-eol&quot;&gt;pio device monitor –eol&lt;/a&gt; and “send_on_enter” filter do not work properly (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3787&quot;&gt;issue #3787&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information and use &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html&quot;&gt;pio upgrade&lt;/a&gt; command to update to the latest version.&lt;/p&gt;

&lt;h2 id=&quot;esp-idf-v42&quot;&gt;ESP-IDF v4.2&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for the latest stable &lt;strong&gt;ESP-IDF v4.2&lt;/strong&gt; - the official development framework for the ESP32 and ESP32-S Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in the latest release:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP32-S2&lt;/code&gt; SoC&lt;/li&gt;
  &lt;li&gt;Support of Bluetooth 5.0 for ESP32&lt;/li&gt;
  &lt;li&gt;Improvements to the Wi-Fi stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on project configuration for ESP-IDF can be found &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for ESP-IDF&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/espressif/esp-idf/releases/tag/v4.2&quot;&gt;Release notes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4.2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html&quot;&gt;Documentation for ESP-IDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openhw-risc-v-dev-platform&quot;&gt;OpenHW RISC-V dev-platform&lt;/h2&gt;

&lt;p&gt;OpenHW Group is a not-for-profit, global organization that provides an infrastructure for hosting high quality open-source HW developments in line with industry best practices. The OpenHW CV32E40P RISC-V core is the first open-source core for high-volume chips verified with the state-of-the-art process required for high-integrity, commercial SoCs.&lt;/p&gt;

&lt;p&gt;The first release of the OpenHW dev-platform includes basic functionality for uploading pregenerated bitstreams to FPGA boards, developing and debugging applications based on the PULP SDK.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-openhw/releases/tag/v0.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for OpenHW dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/openhw.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-openhw/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif32-dev-platform-v30&quot;&gt;Espressif32 dev-platform v3.0&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif 32&lt;/a&gt; dev-platform comes with new boards including the new ESP32-S2 SoC, support for ESP-IDF v4.2 and several improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/featheresp32-s2.html&quot;&gt;Adafruit ESP32-S2 Feather Development Board&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/esp32-s2-kaluga-1.html&quot;&gt;Espressif ESP32-S2-Kaluga-1 Kit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/esp32-s2-saola-1.html&quot;&gt;Espressif ESP32-S2-Saola-1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/nscreen-32.html&quot;&gt;YeaCreate NSCREEN-32&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP-IDF&lt;/code&gt; to the latest stable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added support for the new &lt;a href=&quot;https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-speed&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug_speed&lt;/code&gt;&lt;/a&gt; option&lt;/li&gt;
  &lt;li&gt;Default Arduino partitions moved to a separate section&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-megaavr-dev-platform-v14&quot;&gt;Atmel megaAVR dev-platform v1.4&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelmegaavr&quot;&gt;Atmel megaAVR&lt;/a&gt; includes initial support for megaTinyCore - a lightweight Arduino core for the tinyAVR 0-series and 1-series chips, a lot of new generic boards, updated Arduino packages, and several minor updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New board manifests for the following generic MCUs: &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1604.html&quot;&gt;ATtiny1604&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1606.html&quot;&gt;ATtiny1606&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1607.html&quot;&gt;ATtiny1607&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1614.html&quot;&gt;ATtiny1614&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1616.html&quot;&gt;ATtiny1616&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1617.html&quot;&gt;ATtiny1617&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny202.html&quot;&gt;ATtiny202&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny204.html&quot;&gt;ATtiny204&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny212.html&quot;&gt;ATtiny212&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny214.html&quot;&gt;ATtiny214&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny3216.html&quot;&gt;ATtiny3216&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny3217.html&quot;&gt;ATtiny3217&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny402.html&quot;&gt;ATtiny402&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny404.html&quot;&gt;ATtiny404&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny406.html&quot;&gt;ATtiny406&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny412.html&quot;&gt;ATtiny412&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny414.html&quot;&gt;ATtiny414&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny416.html&quot;&gt;ATtiny416&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny417.html&quot;&gt;ATtiny417&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny804.html&quot;&gt;ATtiny804&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega64.html&quot;&gt;ATmega64&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny806.html&quot;&gt;ATtiny806&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny817.html&quot;&gt;ATtiny817&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initial support for &lt;a href=&quot;https://github.com/SpenceKonde/megaTinyCore&quot;&gt;megaTinyCore&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Updated megaAVR Arduino core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.7&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-megaavr/releases/tag/1.8.7&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated MegaCoreX to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.0.7&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MegaCoreX/releases/tag/v1.0.7&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Improvements to fuses and bootloader programming process&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/releases/tag/v1.4.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Atmel megaAVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v511&quot;&gt;Atmel SAM dev-platform v5.1.1&lt;/h2&gt;

&lt;p&gt;The new &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; v5.1.1 is mostly a maintenance release that comes with updated Arduino core and minor fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Adafruit SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.11&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-samd/releases/tag/1.8.11&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelsam/releases/tag/v5.1.1&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the January 2021 updates of PlatformIO Open Source professional collaborative platform for embedded development. The beginning of the year can often take off with a slow start for any project, but we managed to prepare several great updates. As usual, we’d like to walk you through everything that’s new across the PlatformIO ecosystem.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Core 5.1 🚀</title><link href="https://piolabs.com/blog/news/platformio-core-5-1-released.html" rel="alternate" type="text/html" title="PlatformIO Core 5.1 🚀" /><published>2021-01-28T00:00:00+02:00</published><updated>2021-01-28T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-core-5-1-released</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-core-5-1-released.html">&lt;p&gt;We are happy to announce the next release of PlatformIO Core with the boosted performance for PlatformIO Home, support for SCons 4.1, and the improved package management system!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/2021-01-28-platformio-core-5-1-released/platformio-core-5-1-released.png&quot; alt=&quot;PlatformIO Core 5.1 🚀&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-new&quot; id=&quot;markdown-toc-what-is-new&quot;&gt;What is New&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#platformio-home&quot; id=&quot;markdown-toc-platformio-home&quot;&gt;PlatformIO Home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build-system&quot; id=&quot;markdown-toc-build-system&quot;&gt;Build System&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#package-management&quot; id=&quot;markdown-toc-package-management&quot;&gt;Package Management&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#debugging&quot; id=&quot;markdown-toc-debugging&quot;&gt;Debugging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#upgrade&quot; id=&quot;markdown-toc-upgrade&quot;&gt;Upgrade&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-tuned&quot; id=&quot;markdown-toc-stay-tuned&quot;&gt;Stay tuned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-new&quot;&gt;What is New&lt;/h2&gt;

&lt;p&gt;In this section, we are going to highlight the most important changes and features introduced in PlatformIO Core 5.1.
Please visit &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.1.0&quot; target=&quot;_blank&quot;&gt;PlatformIO 5.1.0 Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h3 id=&quot;platformio-home&quot;&gt;PlatformIO Home&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/page/home/index.html&quot;&gt;PlatformIO Home&lt;/a&gt; is a powerful, modern, and interactive user interface (UI) for PlatformIO collaborative platform.
It’s powered by &lt;a href=&quot;/technology/modern-ui-toolkit.html&quot;&gt;PlatformIO Labs’ Modern UI Toolkit&lt;/a&gt; and contains the following key instruments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project Management&lt;/li&gt;
  &lt;li&gt;Library Management&lt;/li&gt;
  &lt;li&gt;Development Platforms, frameworks, and boards Management&lt;/li&gt;
  &lt;li&gt;Device Management (serial, logical, and multicast DNS services)&lt;/li&gt;
  &lt;li&gt;Static Code Analysis&lt;/li&gt;
  &lt;li&gt;Firmware File Explorer&lt;/li&gt;
  &lt;li&gt;Firmware Memory Inspection&lt;/li&gt;
  &lt;li&gt;Firmware Sections &amp;amp; Symbols Viewer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PlatformIO Core 5.1 brings significantly boosted performance to PlatformIO Home by migrating the codebase to the pure Python 3 Asynchronous I/O stack.
This approach solves previous issues caused by the Twisted engine that depends on operating system libraries and 3rd-party Python packages.&lt;/p&gt;

&lt;h3 id=&quot;build-system&quot;&gt;Build System&lt;/h3&gt;

&lt;h4 id=&quot;scons-41&quot;&gt;SCons 4.1&lt;/h4&gt;

&lt;p&gt;The PlatformIO Core 5.1 build engine has been upgraded to the latest &lt;a href=&quot;https://scons.org/&quot; target=&quot;_blank&quot;&gt;SCons 4.1 - a next-generation software construction tool&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/projectconf/advanced_scripting.html&quot;&gt;Configuration files are Python scripts&lt;/a&gt; – use the power of a real programming language to solve build problems&lt;/li&gt;
  &lt;li&gt;Built-in reliable and automatic dependency analysis&lt;/li&gt;
  &lt;li&gt;Improved support for parallel builds&lt;/li&gt;
  &lt;li&gt;Ability to &lt;a href=&quot;https://docs.platformio.org/page/projectconf/section_platformio.html#projectconf-pio-cache-dir&quot;&gt;share built files in a cache&lt;/a&gt; to speed up multiple builds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;command-line-character-limitation&quot;&gt;Command-line character limitation&lt;/h4&gt;

&lt;p&gt;Operating systems have their own default command-line character limitations. Windows OS is limited to 8192 characters where most Unix OSes to 131072.
These limitations lead to build issues caused by development frameworks that pass multiple “include” flags or dependent libraries per one command.&lt;/p&gt;

&lt;p&gt;PlatformIO Core 5.1 was switched to the SCons TempFileMunge that automatically handles long commands and moves flags to a temporary file.&lt;/p&gt;

&lt;h3 id=&quot;package-management&quot;&gt;Package Management&lt;/h3&gt;

&lt;p&gt;Starting with PlatformIO Core 5.1, the package management system does not cleanup unnecessary packages automatically.
We had a lot of discussion around this case, and the best solution was to allow users to personally maintain PlatformIO System.&lt;/p&gt;

&lt;p&gt;Hence, PlatformIO Core 5.1 introduces updated &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/system/cmd_prune.html&quot;&gt;pio system prune&lt;/a&gt; command with new options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--dry-run&lt;/code&gt; option to show data that will be removed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--core-packages&lt;/code&gt; option to remove unnecessary core packages&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--platform-packages&lt;/code&gt; option to remove unnecessary development platform packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that PlatformIO Core 5.1 will monitor PlatformIO installation and inform you about unnecessary data when their size on disk crosses a value set in &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/cmd_settings.html#check-prune-system-threshold&quot;&gt;check_prune_system_threshold&lt;/a&gt; setting. A default value is set to 1024Mb (1Gb).&lt;/p&gt;

&lt;p&gt;To list unnecessary data without pruning, please use the following command – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio system prune --dry-run&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;debugging&quot;&gt;Debugging&lt;/h3&gt;

&lt;p&gt;The initial debug adapter speed is an important setting that greatly affects the overall debugging experience. This new option will help users to more easily tune that value directly from their project configuration file regardless of what debug server is used. Here are some typical examples:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:custom_debug_speed_examples]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; fixed speed in kHz
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;debug_speed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;500&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; automatic speed (only J-Link)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;debug_speed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;auto&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; adaptive clocking instead of fixed JTAG speed (only J-Link)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;debug_speed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;adaptive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that not all dev-platforms support this feature at the moment, but we’ll gradually implement this functionality in all eligible platforms. Stay tuned!&lt;/p&gt;

&lt;h2 id=&quot;upgrade&quot;&gt;Upgrade&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PlatformIO IDE&lt;/strong&gt;: Left Sidebar &amp;gt; PlatformIO (icon) &amp;gt; Quick Access &amp;gt; Upgrade PlatformIO Core&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Terminal&lt;/strong&gt;: Please run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio upgrade&lt;/code&gt; command in terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-tuned&quot;&gt;Stay tuned&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><summary type="html">We are happy to announce the next release of PlatformIO Core with the boosted performance for PlatformIO Home, support for SCons 4.1, and the improved package management system!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-01-28-platformio-core-5-1-released/platformio-core-5-1-released.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-01-28-platformio-core-5-1-released/platformio-core-5-1-released.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unit Testing with PlatformIO: Part 1. The Basics</title><link href="https://piolabs.com/blog/insights/unit-testing-part-1.html" rel="alternate" type="text/html" title="Unit Testing with PlatformIO: Part 1. The Basics" /><published>2021-01-25T00:00:00+02:00</published><updated>2021-01-25T00:00:00+02:00</updated><id>https://piolabs.com/blog/insights/unit-testing-part-1</id><content type="html" xml:base="https://piolabs.com/blog/insights/unit-testing-part-1.html">&lt;p&gt;Unit testing isn’t a new concept in the software engineering field, it has been around for at least the past three decades. At the same time, it is still not so widespread in the embedded industry, even though the situation is getting better in recent years.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot; id=&quot;markdown-toc-prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot; id=&quot;markdown-toc-getting-started&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-first-tests&quot; id=&quot;markdown-toc-adding-first-tests&quot;&gt;Adding first tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In a nutshell, unit testing boils down to splitting the code into small units which can be tested in isolation to verify their behavior in different circumstances. The main benefit of thorough unit testing is looser coupling between software modules which implicitly leads to better software design. A broad set of tests also improves developer confidence in the project codebase by exposing errors very early in the development cycle and preventing regression bugs.&lt;/p&gt;

&lt;p&gt;Thanks to proper module isolation, tests can be run directly on the host machine which allows us to start developing software even without real hardware at hand. Besides, well-structured tests represent a form of documentation on the proper use of each tested module.&lt;/p&gt;

&lt;p&gt;In embedded software, a “unit” usually represents a single module that consists of a source file and an accompanying header file. This module usually abstracts a part of the system and packs together a group of related functions and data, for example, a peripheral driver, data structure, etc.&lt;/p&gt;

&lt;p&gt;This article is the beginning of a series that concentrates on creating a convenient environment for test-driven development for embedded devices. We will implement and test a very useful array-based data structure called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circular buffer&lt;/code&gt;. In a nutshell, the main advantage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circular buffer&lt;/code&gt; is that it does not need to have its elements shifted each time when a new element is added.&lt;/p&gt;

&lt;p&gt;Please note, the project in this series has been purposefully made as simple as possible for the sake of clarity. A comprehensive description of all nuances of implementing a proper circular buffer can easily take an entire dedicated article. The goal of this series is to concentrate on testing workflow, so don’t rely on the code presented in this series in real projects.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html&quot; target=&quot;_blank&quot;&gt;VSCode with installed PlatformIO IDE extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;We will start with testing our module on the host machine. First, we need to install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;native&lt;/code&gt; development platform. PlatformIO doesn’t install any toolchains automatically for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;native&lt;/code&gt; dev-platform and uses the toolchain (preferably based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GCC&lt;/code&gt;) native for your OS (on Windows it’s recommended to install &lt;a href=&quot;http://www.mingw.org/&quot; target=&quot;_blank&quot;&gt;MinGW&lt;/a&gt; and make it available via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable). Let’s install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;native&lt;/code&gt; dev-platform via PlatformIO Home:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-2.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-2.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of creating our project from scratch, we can conveniently import the “Hello World” example and use it as a boilerplate:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s replace the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.c&lt;/code&gt; file with an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we try to build the project, we should see the successful result:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;adding-first-tests&quot;&gt;Adding first tests&lt;/h2&gt;

&lt;p&gt;PlatformIO comes with its own tool called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unit Testing Engine&lt;/code&gt; to help you start testing as quickly as possible. Out-of-the-box support for a unit testing framework called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unity&lt;/code&gt; and a built-in test runner allows us to start writing tests without any preconfiguration. We just need to add new files with test cases to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; folder. For more details on the Unity Test API used in this project, see the overview in &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/unit-testing.html#api&quot; target=&quot;_blank&quot;&gt;PlatformIO Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Back to the project, let’s create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_circular_buffer.c&lt;/code&gt; with the following boilerplate code:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unity.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UNITY_BEGIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UNITY_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if we run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt; task in the PlatformIO shortcut menu we should see that PlatformIO successfully detected our new file with no tests inside:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-5.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-5.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it’s time to think through the API for our implementation. We recommend to split any application into isolated modules and place them into the special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt; folder in the root of the project. PlatformIO offers a very convenient mechanism called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Library Dependency Finder (LDF)&lt;/code&gt; that will find these modules and automatically add them to the project build tree based on included header files or explicit dependencies specified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;For the sake of simplicity, our buffer will be fixed-sized with 8-bit bytes as elements. The basic functionality will include the following functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initialization of a circular buffer&lt;/li&gt;
  &lt;li&gt;Adding a new element to a circular buffer&lt;/li&gt;
  &lt;li&gt;Getting an element from a circular buffer&lt;/li&gt;
  &lt;li&gt;Reporting whether a circular buffer is empty&lt;/li&gt;
  &lt;li&gt;Cleaning the entire circular buffer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The requirements above lead us to the following header file for our module:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef CIRCULAR_BUFFER_H
#define CIRCULAR_BUFFER_H
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;stdbool.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
    If the buffer is of a power-of-2 size,
    then a much quicker bitwise-AND instruction can be used instead.
*/&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifndef BUFFER_SIZE
#define BUFFER_SIZE (32)
#endif
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if (BUFFER_SIZE &amp;amp; (BUFFER_SIZE - 1)) != 0
#error &quot;BUFFER_SIZE must be a power of two&quot;
#endif
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define BUFFER_MASK (BUFFER_SIZE-1)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbuffer_s&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif // CIRCULAR_BUFFER_H
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s create a new folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/cbuffer&lt;/code&gt; and add two new files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer.h&lt;/code&gt; with the code above and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer.c&lt;/code&gt; with empty implementations:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;cbuffer.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function stubs above do nothing in terms of functionality, but they are required at this step so we can compile test binary without linker issues.&lt;/p&gt;

&lt;p&gt;It’s time to add the first test case. It’s logical to assume that after initialization a circular buffer shouldn’t contain any elements, let’s test this behavior by adding the first test case to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_circular_buffer.c&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unity.h&amp;gt;
#include &quot;cbuffer.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_circular_buffer_empty_after_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TEST_ASSERT_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UNITY_BEGIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;RUN_TEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_circular_buffer_empty_after_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;UNITY_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The body of the test function is pretty simple. We create a new buffer and initialize it in the default state. By using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_ASSERT_TRUE&lt;/code&gt; statement we check that the return value from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer_empty&lt;/code&gt; function is exactly what we expect. If we run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt; task again, PlatformIO will report that everything worked as expected, and that seems correct since we hardcoded the return value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer_empty&lt;/code&gt; to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;. Let’s add another test that adds a new element to the buffer and checks that it’s not empty:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_circular_buffer_not_empty_after_new_element_added&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TEST_ASSERT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time PlatformIO complains that our new test failed:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-6.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-6.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that it’s time to implement some missing parts of our module in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/cbuffer/cbuffer.c&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, if we run our tests, we see that all of them passed:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-7.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-7.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the same way, we can add a new test &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_circular_buffer_reports_full_correctly&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_circular_buffer_reports_full_correctly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TEST_ASSERT_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer_full&lt;/code&gt; function and ensure that it works as expected:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next step is to implement reading from the buffer. Let’s write a new test case for this functionality and run the tests:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_circular_buffer_read_element_succesful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TEST_ASSERT_EQUAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbuffer_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Predictably, the new test failed because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer_get&lt;/code&gt; function is not implemented yet. Let’s fix that by adding the following code to our module:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last requirement states that we have to provide a function that clears the entire buffer. Let’s start by writing a simple test case which uses this feature and fails if we run the tests:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_circular_buffer_cleaned_succesfully&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cbuffer_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TEST_ASSERT_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbuffer_clear&lt;/code&gt; function in the following way:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cbuffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbuffer_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unit testing often deals with a lot of repeated code. Usually, we need to prepare some context before a test can be run and we also might have some finishing work after. Fortunately, testing frameworks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unity&lt;/code&gt; have helper functions which can help us get rid of that code duplication:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setUp&lt;/code&gt; function is called before the invocation of each test method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tearDown&lt;/code&gt; function is called after the invocation of each test method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we take a look at the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_circular_buffer.c&lt;/code&gt; file, we can notice that all tests contain code where we initialize a buffer before validating behavior. Let’s extract that initialization step into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setUp&lt;/code&gt; function and clean the buffer in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tearDown&lt;/code&gt; function accordingly:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cbuffer_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the tests look much better and if we run our tests again, PlatformIO will report that all tests are successful.&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-8.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-8.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At his point we’ve satisfied all the requirements specified in the beginning of this post. There are plenty of features that haven’t been implemented and probably even more edge cases that haven’t been tested properly. All of them could greatly improve our implementation, but they are out of the scope of this post since the main goal of this series is to introduce you to the unit testing mechanism used in PlatformIO.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Unit testing may look like an exhausting and boring process that introduces additional challenges, but in the long run, there are significant benefits. Unit testing forces the developers to write testable code which implicitly leads to better modular and loosely-coupled design, fewer bugs and less debug time. The more checks are covered in unit tests, the higher the quality of the final code.&lt;/p&gt;

&lt;p&gt;In the next article, we will try to run our tests on real hardware and explore the subtleties of setting up a communication channel for getting results from an embedded device.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html">Unit testing isn’t a new concept in the software engineering field, it has been around for at least the past three decades. At the same time, it is still not so widespread in the embedded industry, even though the situation is getting better in recent years.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-1.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-01-25-unit-testing-part-1/unit-testing-part-1-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source December Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-december-2020-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source December Updates" /><published>2021-01-07T00:00:00+02:00</published><updated>2021-01-07T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-december-2020-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-december-2020-updates.html">&lt;p&gt;Welcome to the December 2020 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-december-news.jpg&quot; alt=&quot;PlatformIO Open Source December Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During December, we implemented several feature requests, added support for Mbed OS v6.6.0, rolled out major updates for Nordic nRF52 and Microchip SAM/megaAVR platforms and fixed a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-core-504&quot; id=&quot;markdown-toc-platformio-core-504&quot;&gt;PlatformIO Core 5.0.4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mbed-os-updates&quot; id=&quot;markdown-toc-mbed-os-updates&quot;&gt;Mbed OS Updates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v51&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v51&quot;&gt;Atmel SAM dev-platform v5.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nordic-nrf52-dev-platform-v60&quot; id=&quot;markdown-toc-nordic-nrf52-dev-platform-v60&quot;&gt;Nordic nRF52 dev-platform v6.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-avr-dev-platform-v31&quot; id=&quot;markdown-toc-atmel-avr-dev-platform-v31&quot;&gt;Atmel AVR dev-platform v3.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wrapping-up-2020--intro-to-2021&quot; id=&quot;markdown-toc-wrapping-up-2020--intro-to-2021&quot;&gt;Wrapping Up 2020 &amp;amp; Intro to 2021&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-core-504&quot;&gt;PlatformIO Core 5.0.4&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/core/index.html&quot;&gt;PlatformIO Core&lt;/a&gt; is the heart of the whole PlatformIO ecosystem and we are glad to announce the next v5.0.4 release with improvements and bugfixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added “Core” suffix when showing PlatformIO Core version using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio --version&lt;/code&gt; command&lt;/li&gt;
  &lt;li&gt;Improved &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ccls&lt;/code&gt; configuration file for Emacs, Vim, and Sublime Text integrations&lt;/li&gt;
  &lt;li&gt;Updated analysis tools:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/plus/check-tools/cppcheck.html&quot;&gt;Cppcheck&lt;/a&gt; v2.3 with improved C++ parser and several new MISRA rules&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/plus/check-tools/pvs-studio.html&quot;&gt;PVS-Studio&lt;/a&gt; v7.11 with new diagnostics and updated mass suppression mechanism&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Show a warning message about deprecated support for Python 2 and Python 3.5&lt;/li&gt;
  &lt;li&gt;Do not provide “intelliSenseMode” option when generating configuration for VSCode C/C++ extension&lt;/li&gt;
  &lt;li&gt;Fixed a “git-sh-setup: file not found” error when installing project dependencies from Git VCS (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3740&quot;&gt;issue #3740&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue with package publishing on Windows when Unix permissions are not preserved (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3776&quot;&gt;issue #3776&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.0.4&quot;&gt;Release Notes&lt;/a&gt; for more detailed information and use &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html&quot;&gt;pio upgrade&lt;/a&gt; command to update to the latest version.&lt;/p&gt;

&lt;h2 id=&quot;mbed-os-updates&quot;&gt;Mbed OS Updates&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for the latest &lt;strong&gt;Mbed OS 6&lt;/strong&gt; - an open source embedded operating system designed specifically for the Internet of Things. It includes all the features you need to develop a connected product based on an Arm Cortex-M microcontroller, including security, connectivity, an RTOS and drivers for sensors and I/O devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in the latest releases:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improvements to BLE and COAP implementations&lt;/li&gt;
  &lt;li&gt;Additional cloud connectivity integrations&lt;/li&gt;
  &lt;li&gt;Better support for the bare metal profile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Legacy &lt;strong&gt;Mbed OS 5&lt;/strong&gt; was updated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v5.15.6&lt;/code&gt; - the latest version for the Mbed OS 5.15 branch to keep legacy projects up to date with the latest bugfixes and improvements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important fixes in v5.15.6:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nanostack release &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v12.6.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Improvements to WiSUN functionality&lt;/li&gt;
  &lt;li&gt;Mbed CoAP updated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v5.1.8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on project configuration for Mbed OS can be found &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Mbed OS&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.6.0&quot;&gt;Release notes for v6.6.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.5.0&quot;&gt;Release notes for v6.5.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.4.0&quot;&gt;Release notes for v6.4.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.3.0&quot;&gt;Release notes for v6.3.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-5.15.6&quot;&gt;Release notes for v5.15.6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html&quot;&gt;Documentation for Mbed OS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html#platforms&quot;&gt;Supported development platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v51&quot;&gt;Atmel SAM dev-platform v5.1&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; dev-platform brings new boards, updated Arduino cores and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_blm_badge.html&quot;&gt;Adafruit BLM Badge&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_feather_m4_can.html&quot;&gt;Adafruit Feather M4 CAN&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_matrix_portal_m4.html&quot;&gt;Adafruit Matrix Portal M4&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_qt_py_m0.html&quot;&gt;Adafruit QT Py M0&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Arduino SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.10&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/ArduinoCore-samd/releases/tag/1.6.4&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Adafruit SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.6.4&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-samd/releases/tag/1.8.10&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelsam/releases/tag/v5.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;nordic-nrf52-dev-platform-v60&quot;&gt;Nordic nRF52 dev-platform v6.0&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/nordicnrf52&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platform comes with new boards and updated Arduino nRF5 core:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/bbcmicrobit_v2.html&quot;&gt;BBC micro:bit V2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/dwm1001_dev.html&quot;&gt;decaWave DWM1001 Module Development Board&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/raytac_mdbt50q_rx.html&quot;&gt;Raytac MDBT50Q-RX Dongle&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/reel_board.html&quot;&gt;PHYTEC reel board&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/reel_board_v2.html&quot;&gt;PHYTEC reel board v2&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Arduino nRF5 core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.7&lt;/code&gt; (&lt;a href=&quot;https://github.com/sandeepmistry/arduino-nRF5/releases/tag/0.7.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-nordicnrf52/releases/tag/v6.0.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;atmel-avr-dev-platform-v31&quot;&gt;Atmel AVR dev-platform v3.1&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelavr&quot;&gt;Atmel AVR&lt;/a&gt; includes a major update of MicroCore - a lightweight Arduino core for ATtiny13 MCUs, dynamic flash memory calculation for bootloader-enabled devices and several minor updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated MicroCore to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.2&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MicroCore/releases/tag/v2.0.2&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;The bootloader size for MCUdude’s cores is now calculated dynamically&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Minor releases of MCUdude’s cores&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MightyCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.8&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MightyCore/releases/tag/v2.0.8&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;MiniCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.9&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MiniCore/releases/tag/v2.0.9&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;MegaCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.6&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MegaCore/releases/tag/v2.0.6&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;MajorCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.5&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MajorCore/releases/tag/v2.0.5&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelavr/releases/tag/v3.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Atmel AVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrapping-up-2020--intro-to-2021&quot;&gt;Wrapping Up 2020 &amp;amp; Intro to 2021&lt;/h2&gt;

&lt;p&gt;2020 was challenging in many aspects, but all that obstacles and constraints didn’t diminish our commitment to the growing Open Source Community. Ensuring the OSS part of PlatformIO Labs is thriving, stable, and up to date has always been one of our main goals. We remained motivated and did our best even in this difficult time thanks to our users and their open and sincere feedback.&lt;/p&gt;

&lt;p&gt;We want to thank everyone who has been a part of all of this work and progress, whether you worked with us as a client, contributed to our projects, or participated in any other way. We look forward to continuing our mission of consistent improvement in 2021. PlatformIO Labs will keep improving and bringing features to the community and we hope you will continue to be a part of our big global family!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have a great 2021!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the December 2020 updates of PlatformIO Open Source professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-december-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-december-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Analyze your firmware footprint with PlatformIO: Part 2. Project Inspector</title><link href="https://piolabs.com/blog/insights/memory-analysis-part-2.html" rel="alternate" type="text/html" title="Analyze your firmware footprint with PlatformIO: Part 2. Project Inspector" /><published>2020-12-14T00:00:00+02:00</published><updated>2020-12-14T00:00:00+02:00</updated><id>https://piolabs.com/blog/insights/memory-analysis-part-2</id><content type="html" xml:base="https://piolabs.com/blog/insights/memory-analysis-part-2.html">&lt;p&gt;Have you ever wondered how the linker is assigning physical memory, where your code is placed in Flash, or how much RAM is used by an OS or peripheral drivers?&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the &lt;a href=&quot;/blog/insights/memory-analysis-part-1.html&quot;&gt;previous post&lt;/a&gt;, we briefly looked into general aspects of the memory layout of executable files. In this post, we will go deeper into the ELF file structure and memory analysis using a very useful PlatformIO tool called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Inspector&lt;/code&gt; which allows analyzing application memory usage or to answer specific questions about which memory section a variable or function is placed in or what file this symbol is located in.&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#running-analysis&quot; id=&quot;markdown-toc-running-analysis&quot;&gt;Running Analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#inspecting-results&quot; id=&quot;markdown-toc-inspecting-results&quot;&gt;Inspecting Results&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#project-statistics&quot; id=&quot;markdown-toc-project-statistics&quot;&gt;Project Statistics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#project-explorer&quot; id=&quot;markdown-toc-project-explorer&quot;&gt;Project Explorer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#symbol-table&quot; id=&quot;markdown-toc-symbol-table&quot;&gt;Symbol Table&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#memory-sections&quot; id=&quot;markdown-toc-memory-sections&quot;&gt;Memory Sections&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;running-analysis&quot;&gt;Running Analysis&lt;/h2&gt;

&lt;p&gt;We already installed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ststm32&lt;/code&gt; platform and imported a basic example in the previous blog post. Let’s analyze the same project, but this time via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Inspector&lt;/code&gt;. On the PlatformIO Home page, navigate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; tab, select your project and environment, press the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-2.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-2.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;inspecting-results&quot;&gt;Inspecting Results&lt;/h2&gt;

&lt;h3 id=&quot;project-statistics&quot;&gt;Project Statistics&lt;/h3&gt;

&lt;p&gt;Once the analysis is done, PlatformIO will show a detailed report on memory usage. The first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Statistics&lt;/code&gt; tab displays general information about used hardware, a graphical representation of the percentage of used memory, Top-5 files with the most significant contribution to the memory footprint, along with Top-5 largest symbols defined in the firmware:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, in our case, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stm32f4xx_hal_gpio.c&lt;/code&gt; file has the highest memory consumption of 428 bytes.&lt;/p&gt;

&lt;p&gt;As we can see, the report from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Inspector&lt;/code&gt; a bit differs from the regular information reported after each build step. In this case, the differences can be explained by a different calculation method of memory consumption. Project Inspector also takes into account the memory section which was allocated for the stack and heap. Usually, it’s done in the project linker script and used to ensure that there is enough free memory left for the stack and heap to fit into the RAM. In code  such verification may look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_Min_Heap_Size = 0x200;      /* required amount of heap  */
_Min_Stack_Size = 0x400;     /* required amount of stack */
...
._user_heap_stack :
{
    . = ALIGN(4);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(4);
} &amp;gt;RAM
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;._user_heap_stack&lt;/code&gt; (or similar name) is exactly the section that declares the memory area that could be allocated at runtime.&lt;/p&gt;

&lt;h3 id=&quot;project-explorer&quot;&gt;Project Explorer&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Explorer&lt;/code&gt; tab provides a convenient way for navigating through project source files while displaying used RAM and Flash memory for each file. By clicking on any particular file we can see a detailed report on symbols defined in this file and their size:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;symbol-table&quot;&gt;Symbol Table&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Symbols&lt;/code&gt; page lists the most memory-consuming symbols in the entire project. Besides the information about size, address, and the memory segment where that symbols are located, there are also two additional columns that provide extra information:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-5.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-5.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt; column describes the specific type of each symbol. The most interesting for us are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STT_OBJECT&lt;/code&gt; - This symbol is associated with a data object, such as a variable, an array, and so on.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STT_FUNC&lt;/code&gt; - This symbol indicates that this symbol represents a function or other executable code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bind&lt;/code&gt; column shows symbol binding type. For most applications, symbol types fall into the following three categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STB_LOCAL&lt;/code&gt; - Local symbols that are not visible outside the object file containing their definition. Local symbols with the same name may exist in multiple files without interfering with each other.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STB_GLOBAL&lt;/code&gt; - Global symbols. These symbols are visible to all object files being combined.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STB_WEAK&lt;/code&gt; - Weak symbols resemble global symbols, but their definitions have lower precedence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can also click on the magnifier icon on the right to the symbol name to open the corresponding source file and highlight the line where that symbol was defined.&lt;/p&gt;

&lt;h3 id=&quot;memory-sections&quot;&gt;Memory Sections&lt;/h3&gt;

&lt;p&gt;The last tab &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sections&lt;/code&gt; is similar to the memory report after the verbose build, but shows extra information like section types and attributes:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-6.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-6.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt; column categorizes the section contents and semantics. A short description of the possible values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_PROGBITS&lt;/code&gt; - The section holds information defined by the program, includes executable code and data&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_NOBITS&lt;/code&gt; - A section of this type occupies no space in the file but otherwise resembles &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_PROGBITS&lt;/code&gt; (for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; section)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_STRTAB&lt;/code&gt; - The section holds the string table&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_SYMTAB&lt;/code&gt; - The section holds the symbol table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flags&lt;/code&gt; column describes miscellaneous section attributes The most interesting for us are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W (SHF_WRITE)&lt;/code&gt; - The section contains data that should be writable during process execution.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A (SHF_ALLOC)&lt;/code&gt; - The section occupies memory during process execution (used to attribute control sections that don’t reside in the memory image of an object file).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X (SHF_EXECINSTR)&lt;/code&gt; - The section contains executable machine instructions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested in more detailed information about the structure of ELF files, here is a great &lt;a href=&quot;https://man7.org/linux/man-pages/man5/elf.5.html&quot; target=&quot;_blank&quot;&gt;man page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Advanced analysis tools are becoming more useful as the modern firmware in embedded systems is getting highly complicated. Such tools enable developers to better understand how optimization flags, standard libraries, or even coding style affect memory consumption. Dismissive attitude towards optimization may lead to nonrecoverable software failures after deployment, especially on embedded systems where code space is a very constrained resource.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html">Have you ever wondered how the linker is assigning physical memory, where your code is placed in Flash, or how much RAM is used by an OS or peripheral drivers?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-1.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source November Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-november-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source November Updates" /><published>2020-12-04T00:00:00+02:00</published><updated>2020-12-04T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-november-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-november-updates.html">&lt;p&gt;Welcome to the November 2020 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-november-news.jpg&quot; alt=&quot;PlatformIO Open Source November Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During November, we implemented several feature requests, added support for Zephyr v2.4, rolled out updates for ST STM32, Microchip SAM/megaAVR, Shakti RISC-V platforms and fixed a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-core-503&quot; id=&quot;markdown-toc-platformio-core-503&quot;&gt;PlatformIO Core 5.0.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#zephyr-v24-new-boards-initial-support-for-vmm-and-new-tcp-stack&quot; id=&quot;markdown-toc-zephyr-v24-new-boards-initial-support-for-vmm-and-new-tcp-stack&quot;&gt;Zephyr v2.4: New boards, initial support for VMM and new TCP stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v50&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v50&quot;&gt;Atmel SAM dev-platform v5.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-megaavr-dev-platform-v13&quot; id=&quot;markdown-toc-atmel-megaavr-dev-platform-v13&quot;&gt;Atmel megaAVR dev-platform v1.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shakti-risc-v-dev-platform-v11&quot; id=&quot;markdown-toc-shakti-risc-v-dev-platform-v11&quot;&gt;Shakti RISC-V dev-platform v1.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#st-stm32-dev-platform-v100&quot; id=&quot;markdown-toc-st-stm32-dev-platform-v100&quot;&gt;ST STM32 dev-platform v10.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-core-503&quot;&gt;PlatformIO Core 5.0.3&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/core/index.html&quot;&gt;PlatformIO Core&lt;/a&gt; is a heart of the whole PlatformIO ecosystem and we are glad to announce the next 5.0.3 release with improvements and bugfixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added an error selector for &lt;a href=&quot;https://docs.platformio.org/page/integration/ide/sublimetext.html&quot;&gt;Sublime Text&lt;/a&gt; build runner (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3733&quot;&gt;issue #3733&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Generate a working “projectEnvName” for PlatformIO IDE’s debugger for VSCode&lt;/li&gt;
  &lt;li&gt;Force VSCode’s intelliSenseMode to “gcc-x64” when GCC toolchain is used&lt;/li&gt;
  &lt;li&gt;Print ignored test suites and environments in the test summary report only in verbose mode (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3726&quot;&gt;issue #3726&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue when the package manager tries to install a built-in library from the registry (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3662&quot;&gt;issue #3662&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue when &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/package/cmd_pack.html&quot;&gt;pio package pack&lt;/a&gt; ignores some folders (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3730&quot;&gt;issue #3730&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.0.3&quot;&gt;Release Notes&lt;/a&gt; for more detailed information and use &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html&quot;&gt;pio upgrade&lt;/a&gt; command to update to the latest version.&lt;/p&gt;

&lt;h2 id=&quot;zephyr-v24-new-boards-initial-support-for-vmm-and-new-tcp-stack&quot;&gt;Zephyr v2.4: New boards, initial support for VMM and new TCP stack&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for a new release v2.4 of Zephyr Project - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in v2.4:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Introduced initial support for virtual memory management, device memory-mapped I/O APIs, and reduced memory requirements for kernel thread stacks when user mode is enabled&lt;/li&gt;
  &lt;li&gt;Added Bluetooth host-level support for periodic advertisement and isochronous channels, laying the groundwork for Bluetooth LE audio support in a future release.&lt;/li&gt;
  &lt;li&gt;The networking subsystem switched over to the TCP2 implementation as the default, allowing for better network protocol testing than the previous TCP implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Zephyr framework&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.4.0&quot;&gt;Release notes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.4.0&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html&quot;&gt;Documentation for Zephyr framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms&quot;&gt;Supported development platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v50&quot;&gt;Atmel SAM dev-platform v5.0&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; dev-platform comes with updated Zephyr, Arduino frameworks and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.4.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.4.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.9&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-samd/releases/tag/1.8.9&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Pull &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meteca&lt;/code&gt; packages from its own organization&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelsam/releases/tag/v5.0.1&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;atmel-megaavr-dev-platform-v13&quot;&gt;Atmel megaAVR dev-platform v1.3&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelmegaavr&quot;&gt;Atmel megaAVR&lt;/a&gt; brings handy enhancements for dynamic fuses calculation and bootloader programming:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MegaCoreX&lt;/code&gt; fuses and bootloader programming&lt;/li&gt;
  &lt;li&gt;Fixed build process that generated broken images for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uno_wifi_rev2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano_every&lt;/code&gt; boards&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/releases/tag/v1.3.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Atmel megaAVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;shakti-risc-v-dev-platform-v11&quot;&gt;Shakti RISC-V dev-platform v1.1&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/shakti&quot;&gt;Shakti&lt;/a&gt; dev-platform comes with three new boards and the latest Shakti SDK:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added support for &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/shakti/parashu.html&quot;&gt;Parashu&lt;/a&gt;, &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/shakti/pinaka.html&quot;&gt;Pinaka&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/shakti/vajra.html&quot;&gt;Vajra&lt;/a&gt; boards&lt;/li&gt;
  &lt;li&gt;Updated Shakti SDK to the latest available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-shakti/releases/tag/v1.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Shakti dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/shakti.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-shakti/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;st-stm32-dev-platform-v100&quot;&gt;ST STM32 dev-platform v10.0&lt;/h2&gt;

&lt;p&gt;Improved support for the STM32Cube framework is perhaps our most anticipated update of this version. We’ve had plans on updating it for a long time and finally we finished the development needed to use the official packages from the ST Microelectronics &lt;a href=&quot;https://github.com/STMicroelectronics?q=stm32cube&amp;amp;type=&amp;amp;language=&quot;&gt;repositories&lt;/a&gt;. Now users are able to easily develop applications using the latest STM32Cube packages for popular ST MCU families. Other updates include new boards, updated Arduino cores, improved support for Zephyr framework and several fixes and improvements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/nucleo_h745zi_q.html&quot;&gt;ST Nucleo H745ZI-Q&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/olimex_f103.html&quot;&gt;Olimex STM32-H103&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/waveshare_open103z.html&quot;&gt;Waveshare Open103Z&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.4.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.4.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated support for STM32Cube framework&lt;/li&gt;
  &lt;li&gt;Updated Arduino Maple core to the latest available&lt;/li&gt;
  &lt;li&gt;Updated Arduino MXChip core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/microsoft/devkit-sdk/releases/tag/2.0.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-ststm32/releases/tag/v10.0.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the November 2020 updates of PlatformIO Open Source professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-november-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-november-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Labs joins Eclipse Foundation</title><link href="https://piolabs.com/blog/press-releases/platformio-labs-joins-eclipse-foundation.html" rel="alternate" type="text/html" title="PlatformIO Labs joins Eclipse Foundation" /><published>2020-12-01T00:00:00+02:00</published><updated>2020-12-01T00:00:00+02:00</updated><id>https://piolabs.com/blog/press-releases/platformio-labs-joins-eclipse-foundation</id><content type="html" xml:base="https://piolabs.com/blog/press-releases/platformio-labs-joins-eclipse-foundation.html">&lt;ul&gt;
  &lt;li&gt;Modern software and new standards enable more developers to tackle the embedded systems and IoT markets&lt;/li&gt;
  &lt;li&gt;Open, flexible, and neutral ecosystem tools improve growth for hardware and toolchain providers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;December 1, 2020&lt;/strong&gt;, &lt;a href=&quot;https://piolabs.com/&quot;&gt;PlatformIO Labs&lt;/a&gt;, the corporate sponsor of the beloved &lt;a href=&quot;https://platformio.org/&quot; target=&quot;_blank&quot;&gt;PlatformIO.Org&lt;/a&gt; next-generation, professional collaborative platform for embedded development, today announces joining the &lt;a href=&quot;https://www.eclipse.org/&quot; target=&quot;_blank&quot;&gt;Eclipse Foundation&lt;/a&gt; as a contributing member to introduce a tighter integration with the Eclipse ecosystem.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-12-01-platformio-labs-joins-eclipse-foundation/piolabs-joins-eclipse-foundation.jpg&quot; alt=&quot;PlatformIO Labs joins Eclipse Foundation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Eclipse ecosystem has been remarkably successful and has established the Eclipse Foundation as a leading Integrated Development Environment (IDE) platform provider. The Eclipse IDE gained popularity because of its support for cross-platform development and flexible plug-in architecture, which addresses challenges faced by developers creating complex products involving real-time operating systems and resource-constrained embedded hardware.&lt;/p&gt;

&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
&lt;p class=&quot;h2 mb-5 mb-md-7 text-center text-primary&quot;&gt;
“We are excited to welcome PlatformIO Labs as a member of the Eclipse Foundation.
PlatformIO Labs is a great example of a company with a strong commitment to the open-source community. We look forward to them contributing their expertise and collaborating on shaping the future evolution of development tools for embedded systems.”
&lt;/p&gt;
&lt;footer class=&quot;text-center&quot;&gt;
  &lt;p class=&quot;h4 mb-0&quot;&gt;Mike Milinkovich&lt;/p&gt;
  &lt;p class=&quot;fs-sm text-muted mb-0&quot;&gt;Executive director of the Eclipse Foundation&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;p&gt;PlatformIO Labs technology and expertise complements the Eclipse ecosystem. It also provides customers with tools that are cross-platform and completely vendor-agnostic. Its modular architecture enables developers to access a best-of-breed integrated development environment, by combining their favorite editor with a choice of SDKs frameworks, and enjoying the ease by which PlatformIO’s modern and powerful features speed up yet simplify the creation and delivery of embedded products. Dependencies are automatically taken care of, advanced debugging and editing support is integrated, and all the top features found in more cumbersome, proprietary, and expensive-to-license tools are freely available. Joining the Eclipse Foundation strengthens PlatformIO Labs’ commitment to open-source software and opens up new opportunities for hardware platform vendors by improving interoperability between both hardware and supporting software technologies.&lt;/p&gt;

&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
&lt;p class=&quot;h2 mb-5 mb-md-7 text-center text-primary&quot;&gt;
&quot;We are focused on improving the lives of everyday engineers with free, open-source, and next-generation instruments that enhance professional development productivity. We're honored to become a new member of the Eclipse Foundation, an organization that shares similar values of industry collaboration and transparency. By working closely together with the Eclipse community on integrating some of our products, we can further develop and improve open-source tools that benefit the embedded systems market.&quot;
&lt;/p&gt;
&lt;footer class=&quot;text-center&quot;&gt;
  &lt;p class=&quot;h4 mb-0&quot;&gt;Ivan Kravets&lt;/p&gt;
  &lt;p class=&quot;fs-sm text-muted mb-0&quot;&gt;Founder and CEO of PlatformIO Labs&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;h2 id=&quot;about-eclipse-foundation&quot;&gt;About Eclipse Foundation&lt;/h2&gt;

&lt;p&gt;The Eclipse Foundation provides individuals and organizations with a business-friendly environment for open source software collaboration and innovation. The Foundation is home to the Eclipse IDE, Jakarta EE, and over 375 projects, including runtimes, tools, and frameworks for cloud and edge applications, IoT, AI, automotive, systems engineering, distributed ledger technologies, open processor designs, and more. The Foundation is an international non-profit association supported by over 300 members, including industry leaders who value open source as a key enabler for their business strategies. Learn more at &lt;a href=&quot;https://www.eclipse.org/&quot; target=&quot;_blank&quot;&gt;eclipse.org&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;about-platformio-labs&quot;&gt;About PlatformIO Labs&lt;/h2&gt;

&lt;p&gt;PlatformIO Labs is the corporate sponsor behind the PlatformIO open-source project. PlatformIO is a next-generation, professional collaborative platform for embedded development that enables customers to save resources and time by vastly reducing the expenses and labor associated with creating and maintaining product software. Its modern architecture is unmatched in the embedded tools market, and the result benefits developers everywhere by simplifying complexity and increasing productivity. PlatformIO Labs is a privately-held company headquartered in Tallinn, Estonia and with an R&amp;amp;D branch in Ukraine. To learn more, follow them on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt;, Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt;, or visit &lt;a href=&quot;https://piolabs.com/&quot;&gt;piolabs.com&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="press-releases" /><summary type="html">Modern software and new standards enable more developers to tackle the embedded systems and IoT markets Open, flexible, and neutral ecosystem tools improve growth for hardware and toolchain providers December 1, 2020, PlatformIO Labs, the corporate sponsor of the beloved PlatformIO.Org next-generation, professional collaborative platform for embedded development, today announces joining the Eclipse Foundation as a contributing member to introduce a tighter integration with the Eclipse ecosystem.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-12-01-platformio-labs-joins-eclipse-foundation/piolabs-joins-eclipse-foundation.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-12-01-platformio-labs-joins-eclipse-foundation/piolabs-joins-eclipse-foundation.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Labs joins OpenHW Group</title><link href="https://piolabs.com/blog/press-releases/platformio-labs-joins-openhw-group.html" rel="alternate" type="text/html" title="PlatformIO Labs joins OpenHW Group" /><published>2020-11-23T00:00:00+02:00</published><updated>2020-11-23T00:00:00+02:00</updated><id>https://piolabs.com/blog/press-releases/platformio-labs-joins-openhw-group</id><content type="html" xml:base="https://piolabs.com/blog/press-releases/platformio-labs-joins-openhw-group.html">&lt;ul&gt;
  &lt;li&gt;A free, modern software development ecosystem is the perfect complement to support open hardware communities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;November 23, 2020&lt;/strong&gt;, &lt;a href=&quot;https://piolabs.com/&quot;&gt;PlatformIO Labs&lt;/a&gt;, an independent provider of next-generation technology for the embedded systems industry, joins the &lt;a href=&quot;https://www.openhwgroup.org/&quot; target=&quot;_blank&quot;&gt;OpenHW Group&lt;/a&gt; to bring its extensive expertise in the development and design of modern embedded development environments to the open hardware community. &lt;!-- more --&gt; PlatformIO tooling supports developers at various complexity levels from newcomers to avid professionals. Built-in platform-specific examples yield quick success and encourage developers to adopt open hardware while accelerating the time to market of new products.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-11-23-platformio-labs-joins-openhw-group/piolabs-joins-openhw.jpg&quot; alt=&quot;PlatformIO Labs joins OpenHW Group&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Established just a year ago, the OpenHW group has already achieved significant results by engaging world-class partners and releasing the CORE-V family of open-source RISC-V cores. This family of high-quality core IP is in line with industry best practices in both silicon and FPGA optimized implementations. CORE-V IP collaboration among members drives faster innovation for all.&lt;/p&gt;

&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
&lt;p class=&quot;h2 mb-5 mb-md-7 text-center text-primary&quot;&gt;
&quot;We are happy to welcome PlatformIO Labs as a new member in the OpenHW Group and look forward to their contributions. The community will greatly benefit from their broad expertise to boost further adoption of the CORE-V family of open-source RISC-V cores.&quot;
&lt;/p&gt;
&lt;footer class=&quot;text-center&quot;&gt;
  &lt;p class=&quot;h4 mb-0&quot;&gt;Rick O’Connor&lt;/p&gt;
  &lt;p class=&quot;fs-sm text-muted mb-0&quot;&gt;President &amp;amp; CEO of the OpenHW Group&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;p&gt;PlatformIO Labs provides customers with a flexible and completely vendor-neutral development ecosystem. PlatformIO’s modular and modern design supports the integration of semiconductors and software needed to create new products. Developers enjoy a simplified process that is easier to debug, is reproducible, and that speeds their delivery of embedded products. The partnership underscores PlatformIO Labs’ goal to provide highly customizable and robust development instruments to the RISC-V ecosystem and the OpenHW Group community.&lt;/p&gt;

&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
&lt;p class=&quot;h2 mb-5 mb-md-7 text-center text-primary&quot;&gt;
&quot;Having already supported RISC-V cores since the earliest days, we are excited to become a member of the OpenHW Group and continue to improve our vendor-agnostic tools for CORE-V IP. We look forward to collaborating with industry leaders in the OpenHW Group to accelerate the RISC-V industry towards modern and flexible open-source development tools.&quot;
&lt;/p&gt;
&lt;footer class=&quot;text-center&quot;&gt;
  &lt;p class=&quot;h4 mb-0&quot;&gt;Ivan Kravets&lt;/p&gt;
  &lt;p class=&quot;fs-sm text-muted mb-0&quot;&gt;Founder and CEO of PlatformIO Labs&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;h2 id=&quot;about-openhw-group&quot;&gt;About OpenHW Group&lt;/h2&gt;

&lt;p&gt;OpenHW Group is a not-for-profit, global organization driven by its members and individual contributors where hardware and software designers collaborate in the development of open-source cores, related IP, tools and software. OpenHW provides an infrastructure for hosting high-quality open-source HW developments in line with industry best practices.&lt;/p&gt;

&lt;p&gt;CORE-V is a series of RISC-V based open-source cores with associated processor subsystem IP, tools and software for electronic system designers. The CORE-V family provides quality core IP in line with industry best practices. The IP is available in both silicon and FPGA optimized implementations. These cores can be used to facilitate rapid design innovation and ensure effective manufacturability of high-volume production SoCs.&lt;/p&gt;

&lt;p&gt;To learn more, visit &lt;a href=&quot;https://www.openhwgroup.org/&quot; target=&quot;_blank&quot;&gt;OpenHWGroup.org&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;about-platformio-labs&quot;&gt;About PlatformIO Labs&lt;/h2&gt;

&lt;p&gt;PlatformIO Labs is the corporate sponsor behind the PlatformIO open-source project. PlatformIO is a next-generation, professional collaborative platform for embedded development that enables customers to save resources and time by vastly reducing the expenses and labor associated with creating and maintaining product software. Its modern architecture is unmatched in the embedded tools market, and the result benefits developers everywhere by simplifying complexity and increasing productivity. PlatformIO Labs is a privately-held company headquartered in Tallinn, Estonia and with an R&amp;amp;D branch in Ukraine. To learn more, follow them on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt;, Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt;, or visit &lt;a href=&quot;https://piolabs.com/&quot;&gt;piolabs.com&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="press-releases" /><summary type="html">A free, modern software development ecosystem is the perfect complement to support open hardware communities. November 23, 2020, PlatformIO Labs, an independent provider of next-generation technology for the embedded systems industry, joins the OpenHW Group to bring its extensive expertise in the development and design of modern embedded development environments to the open hardware community.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-11-23-platformio-labs-joins-openhw-group/piolabs-joins-openhw.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-11-23-platformio-labs-joins-openhw-group/piolabs-joins-openhw.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Analyze your firmware footprint with PlatformIO: Part 1. Intro and basic analysis</title><link href="https://piolabs.com/blog/insights/memory-analysis-part-1.html" rel="alternate" type="text/html" title="Analyze your firmware footprint with PlatformIO: Part 1. Intro and basic analysis" /><published>2020-11-16T00:00:00+02:00</published><updated>2020-11-16T00:00:00+02:00</updated><id>https://piolabs.com/blog/insights/memory-analysis-part-1</id><content type="html" xml:base="https://piolabs.com/blog/insights/memory-analysis-part-1.html">&lt;p&gt;Nowadays, microcontrollers are becoming more powerful and efficient, but at the same time, embedded applications are getting even more sophisticated. That complexity requires additional RAM and Flash memory to support all expected features.&lt;!-- more --&gt;  Besides, if a device needs additional memory to perform over-the-air updates then the memory requirements become even more crucial.&lt;/p&gt;

&lt;p&gt;This blog post is the first part of a series on how to analyze the memory footprint in the PlatformIO ecosystem. We will start by analyzing the default memory report after the successful compilation, in the next posts we’ll try more advanced PlatformIO instruments which help analyze application memory usage more precisely and comprehensively.&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#executables&quot; id=&quot;markdown-toc-executables&quot;&gt;Executables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#memory-layout&quot; id=&quot;markdown-toc-memory-layout&quot;&gt;Memory layout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#real-world-example&quot; id=&quot;markdown-toc-real-world-example&quot;&gt;Real-world Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;executables&quot;&gt;Executables&lt;/h2&gt;

&lt;p&gt;Typically the process of creating an executable consists of several steps and uses a few tools from an appropriate toolchain package. After source files are compiled, the corresponding relocatable object files and additional libraries are linked together into an executable file by a special tool called “linker”. The linker knows where to place the data from object files and libraries by reading linker scripts that describe the actual memory structure specific to the hardware and a use case.&lt;/p&gt;

&lt;figure class=&quot;figure mb-7&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-1.png&quot; alt=&quot;Compilation and linking process&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Linking process
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Describing the compilation process is outside the scope of this article. If you are interested in the understanding of compilation and linking processes, here is &lt;a href=&quot;https://blog.feabhas.com/2012/06/the-c-build-process/&quot; target=&quot;_blank&quot;&gt;a great introduction&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;memory-layout&quot;&gt;Memory layout&lt;/h2&gt;

&lt;p&gt;There are several formats of binary files, one of the most used is &lt;a href=&quot;https://en.wikipedia.org/wiki/Executable_and_Linkable_Format&quot; target=&quot;_blank&quot;&gt;Executable and Linkable Format&lt;/a&gt; (ELF) which is quite widespread among different platforms. To move further to the next steps, we need to get acquainted with the most important memory sections. Typically, an application contains the following commonly known sections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; - contains data that can be modified by the application at runtime (statically initialized global and local variables without the default value). Usually, the system initializes this data with zeros before the program begins to run.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.data&lt;/code&gt; - contains data that can be modified by the application at runtime (statically initialized global and local variables with the default value)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rodata&lt;/code&gt; - a read-only section for constant data (e.g. numeric constants, strings, etc)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.text&lt;/code&gt; - a read-only section that contains the executable instructions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An approximate memory layout for a hypothetical target might be organized in the following way:&lt;/p&gt;

&lt;figure class=&quot;figure mb-7&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-2.png&quot; alt=&quot;Memory layout of a simple embedded binary&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Memory layout of a simple embedded binary
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As shown on the figure above, the free memory area between the end of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; section and the lowest address in the stack can be be used for dynamic memory allocations.&lt;/p&gt;

&lt;h2 id=&quot;real-world-example&quot;&gt;Real-world Example&lt;/h2&gt;

&lt;p&gt;Let’s try to run a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blink&lt;/code&gt; example based on the &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/stm32cube.html&quot; target=&quot;_blank&quot;&gt;STM32Cube&lt;/a&gt; framework on any supported board, in this article &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/nucleo_f401re.html&quot; target=&quot;_blank&quot;&gt;ST Nucleo-F401RE&lt;/a&gt; is used.&lt;/p&gt;

&lt;p&gt;First, we need to install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ST STM32&lt;/code&gt; platform by following instructions on &lt;a href=&quot;https://platformio.org/platforms/ststm32/installation&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;. Once the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ststm32&lt;/code&gt; dev-platform is installed, we can import a basic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STM32Cube&lt;/code&gt; example and compile it:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown on the image above, after the successful compilation PlatformIO reported basic information about Flash and RAM usage. In our case, it’s 44 bytes of RAM and 1244 bytes of Flash memory. This approximate information should be enough for most cases when developers just need to verify that new changes to the code base don’t introduce unnecessary memory overhead. But if such overhead has occurred, it might be useful to compile the project in verbose mode and see what exact sections are using up the largest part of the memory:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, we see the memory footprint per section and their addresses in the decimal format. The most interesting of them were already described in the previous chapter, so let’s focus on a few new items (keep in mind that the full format of the ELF contains many more items):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;._user_heap_stack&lt;/code&gt; - an auxiliary section specified in the linker script that checks whether there is enough RAM left&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ARM.attributes&lt;/code&gt; - a section for hardware-specific attributes&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.comment&lt;/code&gt; - a section that holds version control information&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.debug_frame&lt;/code&gt; - additional debug information (part of the DWARF standard)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.isr_section&lt;/code&gt; - interrupt vector table at the start of the Flash memory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.init_array&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.fini_array&lt;/code&gt; - sections that hold arrays of pointers to functions that will be called on application initialization and termination accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;As it turned out, memory analysis is not that hard and even the default build information contains enough data to help estimate the memory footprint. In the next article, we’ll run through advanced PlatformIO instruments that show different ways of optimizing embedded applications by generating more comprehensive reports on memory usage.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html">Nowadays, microcontrollers are becoming more powerful and efficient, but at the same time, embedded applications are getting even more sophisticated. That complexity requires additional RAM and Flash memory to support all expected features.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-2.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source October Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-october-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source October Updates" /><published>2020-11-02T00:00:00+02:00</published><updated>2020-11-02T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-october-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-october-updates.html">&lt;p&gt;Welcome to the October 2020 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-october-news.jpg&quot; alt=&quot;PlatformIO Open Source October Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This month, we launched new features and improvements, fixed a lot of issues, rolled out new updates for Nordic nRF52 and Microchip AVR/megaAVR platforms. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-core-502&quot; id=&quot;markdown-toc-platformio-core-502&quot;&gt;PlatformIO Core 5.0.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-avr-dev-platform-v30&quot; id=&quot;markdown-toc-atmel-avr-dev-platform-v30&quot;&gt;Atmel AVR dev-platform v3.0&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#avr-gdb-stub&quot; id=&quot;markdown-toc-avr-gdb-stub&quot;&gt;AVR GDB stub&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-megaavr-dev-platform-v12&quot; id=&quot;markdown-toc-atmel-megaavr-dev-platform-v12&quot;&gt;Atmel megaAVR dev-platform v1.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nordic-nrf52-dev-platform-v45&quot; id=&quot;markdown-toc-nordic-nrf52-dev-platform-v45&quot;&gt;Nordic nRF52 dev-platform v4.5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-core-502&quot;&gt;PlatformIO Core 5.0.2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/core/index.html&quot;&gt;PlatformIO Core&lt;/a&gt; is a heart of the whole PlatformIO ecosystem and we are glad to announce the next 5.0.2 release with a lot of improvements and bugfixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initialize a new project or update the existing passing working environment name and its options (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3686&quot;&gt;issue #3686&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Automatically build PlatformIO Core extra Python dependencies on a host machine if they are missed in the registry (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3700&quot;&gt;issue #3700&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Improved “core.call” RPC for PlatformIO Home (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3671&quot;&gt;issue #3671&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed a “PermissionError: [WinError 5]” on Windows when an external repository is used with &lt;a href=&quot;https://docs.platformio.org/page/projectconf/section_env_library.html#lib-deps&quot;&gt;lib_deps&lt;/a&gt; option (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3664&quot;&gt;issue #3664&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed a “KeyError: ‘versions’” when dependency does not exist in the registry (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3666&quot;&gt;issue #3666&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue with GCC linker when “native” dev-platform is used in pair with library dependencies (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3669&quot;&gt;issue #3669&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an “AssertionError: ensure_dir_exists” when checking library updates from simultaneous subprocesses (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3677&quot;&gt;issue #3677&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue when &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/package/cmd_publish.html&quot;&gt;pio package publish&lt;/a&gt; command removes original archive after submitting to the registry (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3716&quot;&gt;issue #3716&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue when multiple &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/lib/cmd_install.html&quot;&gt;pio lib install&lt;/a&gt; command with the same local library results in duplicates in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib_deps&lt;/code&gt; (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3715&quot;&gt;issue #3715&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue with a “wrong” timestamp in device monitor output using &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/device/cmd_monitor.html#filters&quot;&gt;“time” filter&lt;/a&gt; (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3712&quot;&gt;issue #3712&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.0.2&quot;&gt;Release Notes&lt;/a&gt; for more detailed information and use &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html&quot;&gt;pio upgrade&lt;/a&gt; command to update to the latest version.&lt;/p&gt;

&lt;h2 id=&quot;atmel-avr-dev-platform-v30&quot;&gt;Atmel AVR dev-platform v3.0&lt;/h2&gt;

&lt;p&gt;Happy to announce a massive update for &lt;a href=&quot;https://platformio.org/platforms/atmelavr&quot;&gt;Atmel AVR&lt;/a&gt; dev-platform (supports 8-bit MCUs that deliver a unique combination of performance, power efficiency and design flexibility):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added initial support for &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debug-tools/avr-stub.html&quot;&gt;avr-stub&lt;/a&gt; debug tool based on &lt;a href=&quot;https://github.com/jdolinay/avr_debug&quot;&gt;avr_debug&lt;/a&gt; GDB stub&lt;/li&gt;
  &lt;li&gt;Updated cores:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino AVR&lt;/code&gt; v1.8.3&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MightyCore&lt;/code&gt; v2.0.6 (&lt;a href=&quot;https://github.com/MCUdude/MightyCore/releases/tag/v2.0.6&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MiniCore&lt;/code&gt; v2.0.7 (&lt;a href=&quot;https://github.com/MCUdude/MiniCore/releases/tag/v2.0.7&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MegaCore&lt;/code&gt; v2.0.4 (&lt;a href=&quot;https://github.com/MCUdude/MegaCore/releases/tag/v2.0.4&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MajorCore&lt;/code&gt; v2.0.3 (&lt;a href=&quot;https://github.com/MCUdude/MajorCore/releases/tag/v2.0.3&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MicroCore&lt;/code&gt; v1.0.7 (&lt;a href=&quot;https://github.com/MCUdude/MicroCore/releases/tag/v1.0.7&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Improved support for more flexible fuses and bootloader programming. More information with examples in the &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelavr.html#overriding-default-fuses-command&quot;&gt;docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelavr/releases/tag/v3.0.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h3 id=&quot;avr-gdb-stub&quot;&gt;AVR GDB stub&lt;/h3&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-11-02-oss-october-updates/avr-stub-demo.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-11-02-oss-october-updates/avr-stub-demo.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AVR GDB stub is a source-level debugger based on the GDB stub mechanism that allows debugging for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATmega328&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATmega1280&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATmega2560&lt;/code&gt; MCUs using only a serial port, so no additional hardware is required.&lt;/p&gt;

&lt;p&gt;More detailed information about configuration steps and inherent limitations can be found in the AVR GDB stub &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debug-tools/avr-stub.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Atmel AVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-megaavr-dev-platform-v12&quot;&gt;Atmel megaAVR dev-platform v1.2&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/atmelmegaavr&quot;&gt;Atmel megaAVR&lt;/a&gt; dev-platform adds support for new boards and &lt;a href=&quot;https://github.com/MCUdude/MegaCoreX&quot;&gt;MCUDude/MegaCoreX&lt;/a&gt; Arduino core:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega1608.html&quot;&gt;ATmega1608&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega1609.html&quot;&gt;ATmega1609&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega3208.html&quot;&gt;ATmega3208&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega3209.html&quot;&gt;ATmega3209&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega4808.html&quot;&gt;ATmega4808&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega4809.html&quot;&gt;ATmega4809&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega808.html&quot;&gt;ATmega808&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega809.html&quot;&gt;ATmega809&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/avr_iot_wg.html&quot;&gt;avr_iot_wg&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/curiosity_nano_4809.html&quot;&gt;curiosity_nano_4809&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/xplained_pro_4809.html&quot;&gt;xplained_pro_4809&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Added support for &lt;a href=&quot;https://github.com/MCUdude/MegaCoreX&quot;&gt;MCUDude/MegaCoreX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/releases/tag/v1.2.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Atmel megaAVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nordic-nrf52-dev-platform-v45&quot;&gt;Nordic nRF52 dev-platform v4.5&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/nordicnrf52&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platform comes with updated Arduino cores and other improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.3.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/1.3.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Adafruit core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.21.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/0.21.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-nordicnrf52/releases/tag/v4.5.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Nordic nRF52 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-nordicnrf52/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html#tutorials&quot;&gt;Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the October 2020 updates of PlatformIO Open Source professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-october-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-october-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>