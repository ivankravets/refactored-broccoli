<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://piolabs.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://piolabs.com/" rel="alternate" type="text/html" /><updated>2024-01-15T17:06:11+02:00</updated><id>https://piolabs.com/feed.xml</id><title type="html">PlatformIO Labs</title><subtitle>A proven technology used by global innovators and by millions of embedded developers around the world.</subtitle><author><name>PlatformIO Labs</name><email>contact@piolabs.com</email></author><entry><title type="html">Setting up PlatformIO for CI/CD with Testing, Code Coverage and Versioning</title><link href="https://piolabs.com/blog/insights/cicd-testing-coverage-versioning.html" rel="alternate" type="text/html" title="Setting up PlatformIO for CI/CD with Testing, Code Coverage and Versioning" /><published>2024-01-15T00:00:00+02:00</published><updated>2024-01-15T00:00:00+02:00</updated><id>https://piolabs.com/blog/insights/cicd-testing-coverage-versioning</id><content type="html" xml:base="https://piolabs.com/blog/insights/cicd-testing-coverage-versioning.html"><![CDATA[<p>Today almost all professional software development is executed using an agile methodology
with version control, automatic testing and builds in the cloud. However, this is not yet very common for firmware development.</p>

<p>This article explores how to set up a PlatformIO project and benefit from all the CI/CD features of modern software development approaches.</p>

<!-- more -->

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#project-requirements" id="markdown-toc-project-requirements">Project Requirements</a></li>
  <li><a href="#getting-started" id="markdown-toc-getting-started">Getting Started</a>    <ul>
      <li><a href="#step-1-project-environments" id="markdown-toc-step-1-project-environments">Step 1: Project Environments</a></li>
      <li><a href="#step-2-build-info-injection" id="markdown-toc-step-2-build-info-injection">Step 2: Build Info Injection</a></li>
      <li><a href="#step-3-versioning-essentials" id="markdown-toc-step-3-versioning-essentials">Step 3: Versioning Essentials</a></li>
      <li><a href="#step-4-testing-with-code-coverage" id="markdown-toc-step-4-testing-with-code-coverage">Step 4: Testing with Code Coverage</a></li>
    </ul>
  </li>
  <li><a href="#demo-time" id="markdown-toc-demo-time">Demo Time</a>    <ul>
      <li><a href="#step-1-local-development" id="markdown-toc-step-1-local-development">Step 1: Local Development</a></li>
      <li><a href="#step-2-committing-changes" id="markdown-toc-step-2-committing-changes">Step 2: Committing Changes</a></li>
      <li><a href="#step-3-releasing-project" id="markdown-toc-step-3-releasing-project">Step 3: Releasing Project</a></li>
    </ul>
  </li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
  <li><a href="#appendix-1-why-do-we-need-all-of-this" id="markdown-toc-appendix-1-why-do-we-need-all-of-this">Appendix 1: Why do we need all of this?</a></li>
  <li><a href="#appendix-2-testing-the-private-internals-of-a-c-class" id="markdown-toc-appendix-2-testing-the-private-internals-of-a-c-class">Appendix 2: Testing the private internals of a C++ class</a></li>
  <li><a href="#appendix-3-a-single-source-file-built-in-both-environments" id="markdown-toc-appendix-3-a-single-source-file-built-in-both-environments">Appendix 3: A single source file built in both environments</a></li>
  <li><a href="#appendix-4-step-by-step-review-of-the-buildinfopy-extra-script" id="markdown-toc-appendix-4-step-by-step-review-of-the-buildinfopy-extra-script">Appendix 4: Step-by-step review of the buildinfo.py extra script</a></li>
  <li><a href="#appendix-5-step-by-step-review-of-github-actions-configuration-file" id="markdown-toc-appendix-5-step-by-step-review-of-github-actions-configuration-file">Appendix 5: Step-by-step review of Github Actions configuration file</a></li>
  <li><a href="#further-improvements" id="markdown-toc-further-improvements">Further Improvements</a></li>
</ul>

<h2 id="project-requirements">Project Requirements</h2>

<p>Let’s first list the requirements for our development environment:</p>

<ul>
  <li>Builds
    <ul>
      <li>be able to do a local development build on the development machine</li>
      <li>be able to do a production build in the cloud and archive the binary</li>
    </ul>
  </li>
  <li>Testing
    <ul>
      <li>run selected unit tests, on the desktop as well as on the target</li>
      <li>run all unit tests, on the desktop, target, as well as in the cloud</li>
      <li>generate a test coverage report, locally and in the cloud</li>
    </ul>
  </li>
  <li>Versioning
    <ul>
      <li>use semantic versioning, e.g. v1.2.3</li>
      <li>every build “knows” its type (development/production/etc.)</li>
      <li>every build “knows” its version</li>
      <li>whenever merging into the main branch, the version is automatically incremented, a release is created and sources and binary are attached to this release</li>
    </ul>
  </li>
</ul>

<p>If the purpose of any of these requirements is not immediately clear, <a href="/blog/insights/cicd-testing-coverage-versioning.html#appendix-1-why-do-we-need-all-of-this">appendix 1</a> clarifies the rationale behind them.</p>

<h2 id="getting-started">Getting Started</h2>

<h3 id="step-1-project-environments">Step 1: Project Environments</h3>

<p>The first step is to set up <code class="language-plaintext highlighter-rouge">platformio.ini</code> with a number of environments. Each environment will map onto a type of build (development/production/etc.). Separate environments will also take care of the testing. Here is a list of environments to get started:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">selected_generic_unittests</code></li>
  <li><code class="language-plaintext highlighter-rouge">all_generic_unittests</code></li>
  <li><code class="language-plaintext highlighter-rouge">target_selected_unittests</code></li>
  <li><code class="language-plaintext highlighter-rouge">target_application</code></li>
  <li><code class="language-plaintext highlighter-rouge">production_application</code></li>
</ul>

<p>Selecting the correct environment is simple from the bottom toolbar:</p>

<figure class="figure mb-1">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-1.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-1.png" />
    </a>
</figure>

<figure class="figure mb-5">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-2.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-2.png" />
    </a>
</figure>

<p>To ensure all environments use consistent parameters, we define those parameters in the <strong>[options]</strong> section and reuse those definitions in the <strong>[env:]</strong> sections.</p>

<p>Environments intended for the target hardware have to configure the specifics of the board, framework, debug interface, etc.:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[options]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">atmelavr</span>
<span class="py">board</span> <span class="p">=</span> <span class="s">uno</span>
<span class="py">framework</span> <span class="p">=</span> <span class="s">arduino</span>
</code></pre></div></div>

<p>Unit tests require some additional build flags to generate the coverage info. Specific tests can be selected with the <a href="https://docs.platformio.org/en/latest/projectconf/sections/env/options/test/test_filter.html">test_filter</a> option:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">unittesting_buildflag</span> <span class="p">=</span> <span class="s">-D unitTesting</span>
<span class="py">generic_hw_buildflag</span> <span class="p">=</span> <span class="s">-D generic_hw</span>
<span class="py">coverage_buildflag</span> <span class="p">=</span>
  <span class="err">-lgcov</span>
  <span class="err">--coverage</span>
  <span class="err">-fprofile-abs-path</span>
  <span class="err">-Og</span>
</code></pre></div></div>

<p>After defining the parameters in the <strong>[options]</strong> section, you can use them in any environment, as shown in the example below:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[env:target_selected_unittests]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">${options.platform}</span>
<span class="py">board</span> <span class="p">=</span> <span class="s">${options.board}</span>
<span class="py">framework</span> <span class="p">=</span> <span class="s">${options.framework}</span>

<span class="py">build_flags</span> <span class="p">=</span>   <span class="s">${options.unittesting_buildflag}</span>

<span class="py">test_framework</span> <span class="p">=</span> <span class="s">unity</span>
<span class="py">test_filter</span> <span class="p">=</span> <span class="s">${options.selected_tests}</span>
</code></pre></div></div>

<h3 id="step-2-build-info-injection">Step 2: Build Info Injection</h3>

<p>For the firmware to “know” what kind of build it is, we could use some compiler build flags, but this quickly becomes difficult to manage when we need more than a few settings. So instead I use a pair of files <code class="language-plaintext highlighter-rouge">buildinfo.h/.cpp</code>, which are generated at the beginning of the build process and included into the application:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// buildinfo.h</span>

<span class="cp">#pragma once
</span>
<span class="cp">#include</span> <span class="cpf">"stdint.h"</span><span class="cp">
#include</span> <span class="cpf">"buildtype.h"</span><span class="cp">
#include</span> <span class="cpf">"buildenvironment.h"</span><span class="cp">
</span>
<span class="k">class</span> <span class="nc">version</span> <span class="p">{</span>
  <span class="nl">public:</span>
    <span class="n">version</span><span class="p">()</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>
    <span class="k">static</span> <span class="kt">uint8_t</span> <span class="n">getIsVersionMajor</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">isVersionMajor</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">static</span> <span class="kt">uint8_t</span> <span class="nf">getIsVersionMinor</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">isVersionMinor</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">static</span> <span class="kt">uint8_t</span> <span class="nf">getIsVersionPatch</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">isVersionPatch</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">static</span> <span class="n">buildType</span> <span class="nf">getBuildType</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">theBuildType</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">static</span> <span class="n">buildEnvironment</span> <span class="nf">getBuildEnvironment</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">theBuildEnvironment</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">static</span> <span class="kt">void</span> <span class="nf">setIsVersion</span><span class="p">();</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="nf">getIsVersionAsString</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">isVersionString</span><span class="p">;</span> <span class="p">}</span>

<span class="cp">#ifndef unitTesting
</span>  <span class="k">private</span><span class="o">:</span>
<span class="cp">#endif
</span>    <span class="k">static</span> <span class="kt">uint8_t</span> <span class="n">isVersionMajor</span><span class="p">;</span>
    <span class="k">static</span> <span class="kt">uint8_t</span> <span class="n">isVersionMinor</span><span class="p">;</span>
    <span class="k">static</span> <span class="kt">uint8_t</span> <span class="n">isVersionPatch</span><span class="p">;</span>

    <span class="k">static</span> <span class="n">buildType</span> <span class="n">theBuildType</span><span class="p">;</span>
    <span class="k">static</span> <span class="n">buildEnvironment</span> <span class="n">theBuildEnvironment</span><span class="p">;</span>

    <span class="k">static</span> <span class="k">constexpr</span> <span class="kt">uint8_t</span> <span class="n">maxVersionStringLength</span><span class="p">{</span><span class="mi">16U</span><span class="p">};</span>
    <span class="k">static</span> <span class="kt">char</span> <span class="n">isVersionString</span><span class="p">[</span><span class="n">maxVersionStringLength</span><span class="p">];</span>
<span class="p">};</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// buildinfo.cpp</span>

<span class="cp">#include</span> <span class="cpf">"version.h"</span><span class="cp">
#include</span> <span class="cpf">"buildinfo.h"</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">uint8_t</span> <span class="n">version</span><span class="o">::</span><span class="n">isVersionMajor</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">uint8_t</span> <span class="n">version</span><span class="o">::</span><span class="n">isVersionMinor</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">uint8_t</span> <span class="n">version</span><span class="o">::</span><span class="n">isVersionPatch</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="n">buildType</span> <span class="n">version</span><span class="o">::</span><span class="n">theBuildType</span><span class="p">{</span><span class="n">buildType</span><span class="o">::</span><span class="n">unknown</span><span class="p">};</span>
<span class="n">buildEnvironment</span> <span class="n">version</span><span class="o">::</span><span class="n">theBuildEnvironment</span><span class="p">{</span><span class="n">buildEnvironment</span><span class="o">::</span><span class="n">unknown</span><span class="p">};</span>

<span class="kt">char</span> <span class="n">version</span><span class="o">::</span><span class="n">isVersionString</span><span class="p">[</span><span class="n">maxVersionStringLength</span><span class="p">]{};</span>

<span class="kt">void</span> <span class="n">version</span><span class="o">::</span><span class="n">setIsVersion</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">isVersionMajor</span>      <span class="o">=</span> <span class="n">buildInfo</span><span class="o">::</span><span class="n">mainVersionDigit</span><span class="p">;</span>
    <span class="n">isVersionMinor</span>      <span class="o">=</span> <span class="n">buildInfo</span><span class="o">::</span><span class="n">minorVersionDigit</span><span class="p">;</span>
    <span class="n">isVersionPatch</span>      <span class="o">=</span> <span class="n">buildInfo</span><span class="o">::</span><span class="n">patchVersionDigit</span><span class="p">;</span>
    <span class="n">theBuildType</span>        <span class="o">=</span> <span class="n">buildInfo</span><span class="o">::</span><span class="n">theBuildType</span><span class="p">;</span>
    <span class="n">theBuildEnvironment</span> <span class="o">=</span> <span class="n">buildInfo</span><span class="o">::</span><span class="n">theBuildEnvironment</span><span class="p">;</span>

    <span class="n">snprintf</span><span class="p">(</span><span class="n">isVersionString</span><span class="p">,</span> <span class="n">maxVersionStringLength</span><span class="p">,</span> <span class="s">"v%d.%d.%d"</span><span class="p">,</span> <span class="n">isVersionMajor</span><span class="p">,</span> <span class="n">isVersionMinor</span><span class="p">,</span> <span class="n">isVersionPatch</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is only an example of what works for me and I use C++, but you will find it easy to adjust it to your specific needs.</p>

<p>When doing <strong>local</strong> builds, these files are generated with a Python script <code class="language-plaintext highlighter-rouge">buildinfo.py</code>.
On the cloud builds it is generated from a Github action declared in <code class="language-plaintext highlighter-rouge">testbuildrelease.yml</code>. I keep them together in the <strong>.github/workflows</strong> folder:</p>

<figure class="figure mb-5">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-3.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-3.png" />
    </a>
</figure>

<p>When the application includes the <code class="language-plaintext highlighter-rouge">buildinfo.h</code> file, it gets access to all the build info that can be used for multiple purposes, for example:</p>

<ul>
  <li>show the actual version of the firmware on the startup screen</li>
  <li>enable logging to UART only on a local development build and diable in production builds</li>
  <li>identify development builds, e.g. with different UI colors, so they won’t accidentally get installed at the customer side</li>
  <li>determine the age of the firmware based upon its build timestamp</li>
</ul>

<h3 id="step-3-versioning-essentials">Step 3: Versioning Essentials</h3>

<p>To keep track of the version, we use the well-known semantic versioning scheme, abbreviated <code class="language-plaintext highlighter-rouge">SemVer</code>, where a version looks like <code class="language-plaintext highlighter-rouge">v1.2.3</code>. The digits refer to the major version, minor version, patch version. Every time we do a release, one of the digits is incremented:</p>

<ul>
  <li>the major version increments on new features which are no longer backward compatible</li>
  <li>the minor version increments on new features which are backward compatible</li>
  <li>the patch version increments on bug fixes or code improvements without functional changes</li>
</ul>

<p>More info on semantic versioning see <a href="https://semver.org/" target="_blank">Semantic Versioning 2.0.0</a></p>

<p>When we do a local build, instead of incrementing SemVer digits, we simply add the latest (short) <strong>commit hash</strong> to the version, for example <code class="language-plaintext highlighter-rouge">v1.2.3-a2e4d5c7</code>. While developing, we usually create many different versions in between releases, but by using the commit hash, we can easily match any binary with its source.</p>

<p>When we merge changes from the <code class="language-plaintext highlighter-rouge">develop</code> branch into <code class="language-plaintext highlighter-rouge">main</code>, a Github Actions workflow will run and analyze the title of the merge commit. If this title contains <strong>major</strong> we create a major release. Similar for the word <strong>minor</strong> which creates a minor release. In all other cases we create a patch release. For convenience, each build also has a timestamp, e.g. <code class="language-plaintext highlighter-rouge">2023-10-15 12:34:56</code>.</p>

<h3 id="step-4-testing-with-code-coverage">Step 4: Testing with Code Coverage</h3>

<p>In order to know what we have actually tested, code coverage is supported, locally and via Github Actions. Locally, we use a VSCode extension such as GCOV viewer (see my previous article <a href="/blog/insights/test-coverage-on-unit-testing.html">Getting Started with Code Coverage in PlatformIO: A Beginner’s Guide to Writing Effective Tests</a>).</p>

<p>When building in the cloud with Github Actions, we connect the repository to the <strong>codecov.io</strong> service. Codecov is free for public repositories and there is good getting started documentation available <a href="https://docs.codecov.com/docs/quick-start" target="_blank">here</a>. After setting this up, our Github action will send the coverage results to Codecov and we will be able to browse the results report in an interactive way.</p>

<h2 id="demo-time">Demo Time</h2>

<p>Now it’s time to see it all in action!</p>

<p>I’ve set up a (template) <a href="https://github.com/Strooom/demoCloudBuilds" target="_blank">Github repository</a> so it’s easy to replicate it on your side. You can import it directly from the VSCode Welcome Page:</p>

<figure class="figure mb-5">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-11.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-11.png" />
    </a>
</figure>

<p>As for the actual target hardware, I am using the <strong>Arduino Uno</strong> board to keep things simple, but you can easily adapt that to a board of your preference by modifying the hardware settings in the <strong>[options]</strong> section of <code class="language-plaintext highlighter-rouge">platformio.ini</code>.</p>

<p>The repository has 2 branches: <code class="language-plaintext highlighter-rouge">main</code> and <code class="language-plaintext highlighter-rouge">develop</code>. Locally, we work on develop. The <strong>main</strong> branch is protected from committing directly, so you can only merge <strong>develop</strong> into <strong>main</strong>, which will then automatically create a release. The repository also has a <strong>v0.0.0</strong> release as a starting point to simplify the scripts.</p>

<h3 id="step-1-local-development">Step 1: Local Development</h3>

<p>First, make sure you are on the develop branch. Let’s assume you are working on the <code class="language-plaintext highlighter-rouge">lib/circularbuffer</code> library. The tests for this library are in <code class="language-plaintext highlighter-rouge">test/test_generic_circularbuffer</code>. The environment <code class="language-plaintext highlighter-rouge">[env:selected_generic_unittests]</code> uses a test filter so it only runs the tests for the library we’re working on. This approach keeps the test-driven-design cycles fast.</p>

<p>At any time you can simply run the unit tests to quickly validate your work on this library.
With the GCOV viewer you can easily check what code has been tested.</p>

<div class="alert alert-warning" role="alert">
  <b>Tip:</b> It's also easy to debug the code under test by adding <b>debug_test = test_generic_circularbuffer</b> to your <b>platformio.ini</b> and then start the debugger.
</div>

<p>If at any time you want to verify that all other unit tests are still passing, simply switch to the <code class="language-plaintext highlighter-rouge">[env:all_generic_unittests]</code> and run the tests. Of course it takes a bit longer, but it’s always reassuring that changes on your library under development did not break anything somewhere else in the project.</p>

<p>Assuming all unit tests are green, the next step could be to build and upload the application to the target. Simply change the environment to <code class="language-plaintext highlighter-rouge">[env:target_application]</code> and choose upload.</p>

<p>Before the build, the Python script <code class="language-plaintext highlighter-rouge">.github/workflows/buildinfo.py</code> will be executed. This script creates <code class="language-plaintext highlighter-rouge">buildinfo.h/.cpp</code> files containing useful info about the current build. This info is then available to the application for whatever purpose, as is shown in the example application in <code class="language-plaintext highlighter-rouge">src/main.cpp</code>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;Arduino.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"version.h"</span><span class="cp">
#include</span> <span class="cpf">"buildinfo.h"</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">version</span><span class="o">::</span><span class="n">setIsVersion</span><span class="p">();</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Version "</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">version</span><span class="o">::</span><span class="n">getIsVersionAsString</span><span class="p">());</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">toString</span><span class="p">(</span><span class="n">buildInfo</span><span class="o">::</span><span class="n">theBuildEnvironment</span><span class="p">));</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">" "</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">toString</span><span class="p">(</span><span class="n">buildInfo</span><span class="o">::</span><span class="n">theBuildType</span><span class="p">));</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">" build, "</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">buildInfo</span><span class="o">::</span><span class="n">buildTimeStamp</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="step-2-committing-changes">Step 2: Committing Changes</h3>

<p>Assuming you are happy with the application running on the target, let’s do a commit and push it to Github. This will trigger a workflow in the cloud which does the following:</p>

<ul>
  <li>start a fresh (virtual) Linux machine</li>
  <li>install PlatformIO on it</li>
  <li>checkout the repository to it</li>
  <li>run all unit tests</li>
  <li>build the application using the latest version plus a commit hash</li>
</ul>

<p>If all of this is successful, the workflow run will turn green and have the resulting binary file attached to it, so it’s easy to refer and go back to this build any time later.</p>

<figure class="figure mb-5">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-4.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-4.png" />
    </a>
</figure>

<p>If the workflow fails, you’ll be notified by email and/or on Github mobile app. There are several steps included in the workflow which output the state of the current run and should allow you to quickly troubleshoot it.</p>

<div class="alert alert-warning" role="alert">
  <b>Note:</b> There is a Github Actions plugin which allows to see the result of the workflow run inside VSCode. However, if something goes wrong, you'll be redirected to the Github site to inspect the detailed output of the workflow run.
</div>

<p>One of the steps pushes the coverage report from unit testing to codecov.io, so we can see the results there:</p>

<figure class="figure mb-5">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-5.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-5.png" />
    </a>
</figure>

<p>And you can drill down into each file to see which code is not yet tested, marked in red or yellow:</p>

<figure class="figure mb-5">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-6.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-6.png" />
    </a>
</figure>

<div class="alert alert-warning" role="alert">
  <b>Tip:</b> Codecov also provides a nice badge which you can place into your <b>README.md</b> file. Go into <b>Codecov - Your repository - Settings - Badges &amp; Graphs</b> to copy paste the needed markdown code for the badge.
</div>

<h3 id="step-3-releasing-project">Step 3: Releasing Project</h3>

<p>Now, assume we are still doing fine and we decide that the latest commit to <strong>develop</strong> is ready to be released. Go into Github and create a pull request to start the merge of <strong>develop</strong> into <strong>main</strong>. Then when Github confirms everything can be merged, give the merge commit a name which starts with <strong>“minor”</strong>:</p>

<figure class="figure mb-5">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-7.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-7.png" />
    </a>
</figure>

<div class="alert alert-warning" role="alert">
  <b>Note:</b> the keywords <b>major</b> and <b>minor</b> are case sensitive!
</div>

<p>The merge commit will again trigger the workflow to run, but on the <strong>main</strong> branch this time. Furthermore, the <strong>major</strong> or <strong>minor</strong> keyword in the merge commit name will be recognized by the workflow and result in the creation of a new version and related release. The binary file as well as the source code will be attached to the release:</p>

<figure class="figure mb-5">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-8.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-8.png" />
    </a>
</figure>

<p>And Github will send a notification email to the team that there is a new release:</p>

<figure class="figure mb-5">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-9.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-9.png" />
    </a>
</figure>

<h2 id="conclusion">Conclusion</h2>

<p>VSCode with PlatformIO provides all the features needed for a professional embedded software development setup:</p>

<ul>
  <li>multiple environments for a project allow easy switching between unit testing and building target application</li>
  <li>using options simplifies the managing of these environments and keeps them consistent</li>
  <li>seamless integration with Github opens the path to builds in the cloud</li>
  <li>builds in the cloud simplify development distributed over a team</li>
  <li>Python scripting enables automation of tasks, such as automatic SemVer versioning</li>
</ul>

<h2 id="appendix-1-why-do-we-need-all-of-this">Appendix 1: Why do we need all of this?</h2>

<ul>
  <li>The target hardware is often connected to your local machine through a debug interface. The most common workflow is to write code, build a binary and download to the target.</li>
  <li>When working with multiple developers on an application, who has the latest official release? By doing the build in the cloud, you ensure the releases are always unique and in a central location.</li>
  <li>Test-driven Design (TDD) works best with fast build/test cycles, i.e. a few seconds. So when working on a particular area, you only want those tests being executed. Skipping all other tests reduces the cycle from minutes to seconds.</li>
  <li>However, before merging your new stuff into the main branch, you want to be sure your new code does not break anything else, so here we want to run all tests.</li>
  <li>A Test-Coverage report will give you a metric on the overall progress of your development. It will also show which areas may need more attention.</li>
  <li>During development, some features may be enabled (e.g. logging) and others disabled (e.g. firmware updates). In order to make sure that the production version for the customer has all the right features, we enable/disable them automatically by allowing the firmware build to know what type it is.</li>
</ul>

<h2 id="appendix-2-testing-the-private-internals-of-a-c-class">Appendix 2: Testing the private internals of a C++ class</h2>

<p>The private members of a class are inaccessible for code outside that class. But for unit testing, I often would like to make an exception, as it is easier to verify the correct functioning of the code if the tests are allowed to look at the private internals of the class.</p>

<p>A pragmatic approach is to add an additional build flag to the unit test builds (e.g. <code class="language-plaintext highlighter-rouge">unitTesting</code>) and exclude the <code class="language-plaintext highlighter-rouge">private</code> keyword from the source code for these kinds of builds.</p>

<p>In <strong>platformio.ini</strong> we can add the following option:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">unittesting_buildflag</span> <span class="p">=</span> <span class="s">-D unitTesting</span>
</code></pre></div></div>

<p>which we apply to all unit testing builds:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[env:selected_generic_unittests]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">native</span>

<span class="py">build_flags</span> <span class="p">=</span>
  <span class="err">${options.unittesting_buildflag}</span>
  <span class="err">${options.generic_hw_buildflag}</span>
  <span class="err">${options.coverage_buildflag}</span>
</code></pre></div></div>

<p>which then can be used in any class definition where you want the unit tests to have access to the private members:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef unitTesting
</span>  <span class="nl">private:</span>
<span class="cp">#endif
</span>    <span class="kt">uint32_t</span> <span class="n">head</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
    <span class="kt">uint32_t</span> <span class="n">level</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
    <span class="n">itemType</span> <span class="n">theBuffer</span><span class="p">[</span><span class="n">bufferLength</span><span class="p">]{};</span>
</code></pre></div></div>

<p>In this example (<code class="language-plaintext highlighter-rouge">circularbuffer.h</code>) the unit tests can directly check the head and level of the buffer, for example in the following test:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">test_initialize</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">constexpr</span> <span class="kt">uint32_t</span> <span class="n">testBufferLength</span><span class="p">{</span><span class="mi">4</span><span class="p">};</span>
    <span class="n">circularBuffer</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="p">,</span> <span class="n">testBufferLength</span><span class="o">&gt;</span> <span class="n">theBuffer</span><span class="p">;</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT32</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">theBuffer</span><span class="p">.</span><span class="n">head</span><span class="p">);</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT32</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">theBuffer</span><span class="p">.</span><span class="n">level</span><span class="p">);</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT32</span><span class="p">(</span><span class="n">testBufferLength</span><span class="p">,</span> <span class="n">theBuffer</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
    <span class="n">TEST_ASSERT_TRUE</span><span class="p">(</span><span class="n">theBuffer</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">());</span>
    <span class="n">TEST_ASSERT_FALSE</span><span class="p">(</span><span class="n">theBuffer</span><span class="p">.</span><span class="n">hasEvents</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="appendix-3-a-single-source-file-built-in-both-environments">Appendix 3: A single source file built in both environments</h2>

<p>Sometimes the code we write could run on the target as well as on our desktop machine, but it requires small changes in order to build correctly. For example, on the Arduino platform, some C-string handling functions such as <strong>strlen</strong> require the main Arduino header file <strong>Arduino.h</strong>. However, for the desktop scenario, there is no <strong>Arduino.h</strong> file and we need include *<cstring>* header to make **strlen** work.</cstring></p>

<p>To deal with this, there is another build flag, which allows the code to know if we are building for target or for generic desktop hardware:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">generic_hw_buildflag</span> <span class="p">=</span> <span class="s">-D generic_hw</span>
</code></pre></div></div>

<p>Inside the code, we can use this to include the correct header as is shown here in the tests for the version library:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef generic_hw
#include</span> <span class="cpf">&lt;Arduino.h&gt;</span><span class="cp">
#else
#include</span> <span class="cpf">&lt;cstring&gt;</span><span class="cp">
#endif
</span></code></pre></div></div>

<p>So now we can use <strong>strlen</strong> in this test and it will work fine on both targets.</p>

<p>This approach can be further extended into the code itself. Provide mocks for certain hardware and use the mocks during desktop unit testing, use the real hardware when testing on the actual target hardware.</p>

<h2 id="appendix-4-step-by-step-review-of-the-buildinfopy-extra-script">Appendix 4: Step-by-step review of the buildinfo.py extra script</h2>

<p>First step is to run a Git command <code class="language-plaintext highlighter-rouge">git describe --tags</code> to get the latest tag and strip off any spaces from it:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># determine the latest releasev semver
</span><span class="n">latest_release_tag</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">([</span><span class="sh">"</span><span class="s">git</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">describe</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">--tags</span><span class="sh">"</span><span class="p">],</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">latest_release_tag</span> <span class="o">=</span> <span class="n">latest_release_tag</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
<span class="nf">print </span><span class="p">(</span><span class="sh">"</span><span class="se">\033</span><span class="s">[93;1;4mLatest Release Tag     : </span><span class="sh">"</span> <span class="o">+</span> <span class="n">latest_release_tag</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Next we split the output into its parts:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># determine last release version
</span><span class="n">latest_release_tag_parts</span> <span class="o">=</span> <span class="n">latest_release_tag</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">-</span><span class="sh">"</span><span class="p">)</span>
<span class="n">latest_release_semver_incl_v</span> <span class="o">=</span> <span class="n">latest_release_tag_parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">latest_release_semver</span> <span class="o">=</span> <span class="n">latest_release_semver_incl_v</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
<span class="n">latest_release_digits</span> <span class="o">=</span> <span class="n">latest_release_semver</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
<span class="n">latest_release_main</span> <span class="o">=</span> <span class="n">latest_release_digits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">latest_release_minor</span> <span class="o">=</span> <span class="n">latest_release_digits</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">latest_release_patch</span> <span class="o">=</span> <span class="n">latest_release_digits</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="nf">print </span><span class="p">(</span><span class="sh">"</span><span class="se">\033</span><span class="s">[93;1;4mLatest Release Main    : </span><span class="sh">"</span> <span class="o">+</span> <span class="n">latest_release_main</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print </span><span class="p">(</span><span class="sh">"</span><span class="se">\033</span><span class="s">[93;1;4mLatest Release Minor   : </span><span class="sh">"</span> <span class="o">+</span> <span class="n">latest_release_minor</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print </span><span class="p">(</span><span class="sh">"</span><span class="se">\033</span><span class="s">[93;1;4mLatest Release Patch   : </span><span class="sh">"</span> <span class="o">+</span> <span class="n">latest_release_patch</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>One more Git command will fetch the commit hash while the timestamp is retrieved from the OS:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># determine current commit hash
</span><span class="n">current_commit_hash</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">([</span><span class="sh">"</span><span class="s">git</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">rev-parse</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">--short</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">HEAD</span><span class="sh">"</span><span class="p">],</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">current_commit_hash</span> <span class="o">=</span> <span class="n">current_commit_hash</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
<span class="nf">print </span><span class="p">(</span><span class="sh">"</span><span class="se">\033</span><span class="s">[93;1;4mCurrent Commit Hash    : </span><span class="sh">"</span> <span class="o">+</span> <span class="n">current_commit_hash</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># determine the build timstamp
</span><span class="n">build_timestamp</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y-%b-%d %H:%M:%S</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print </span><span class="p">(</span><span class="sh">"</span><span class="se">\033</span><span class="s">[93;1;4mBuild Timestamp        : </span><span class="sh">"</span> <span class="o">+</span> <span class="n">build_timestamp</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Notice the print commands, they will show the output in yellow in the build terminal:</p>

<figure class="figure mb-5">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-10.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2024-01-15-cicd-testing-coverage-versioning/image-10.png" />
    </a>
</figure>

<p>Finally, the different elements are written to the <strong>buildinfo.cpp</strong> file:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># store the results in a source file, so our source code has access to it
</span><span class="n">include_file</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">lib/version/buildinfo.cpp</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">// ##########################################################################</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">// ### This file is generated by Build and Continuous Integration scripts ###</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">// ###   .github/workflows/buildinfo.py for local development environment ###</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">// ###   .github/workflows/testbuildrelease.yml for CI environment        ###</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">// ### Changes will be overwritten on the next build                      ###</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">// ##########################################################################</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">#include </span><span class="se">\"</span><span class="s">buildinfo.h</span><span class="se">\"\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">const buildEnvironment buildInfo::theBuildEnvironment{buildEnvironment::local};</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">const buildType buildInfo::theBuildType{buildType::development};</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">const int buildInfo::mainVersionDigit   = </span><span class="sh">"</span> <span class="o">+</span> <span class="n">latest_release_main</span> <span class="o">+</span> <span class="sh">"</span><span class="s">;</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">const int buildInfo::minorVersionDigit  = </span><span class="sh">"</span> <span class="o">+</span> <span class="n">latest_release_minor</span> <span class="o">+</span> <span class="sh">"</span><span class="s">;</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">const int buildInfo::patchVersionDigit  = </span><span class="sh">"</span> <span class="o">+</span> <span class="n">latest_release_patch</span> <span class="o">+</span> <span class="sh">"</span><span class="s">;</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">const char* buildInfo::lastCommitTag    = </span><span class="se">\"</span><span class="sh">"</span> <span class="o">+</span> <span class="n">current_commit_hash</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\"</span><span class="s">;</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">const char* buildInfo::buildTimeStamp   = </span><span class="se">\"</span><span class="sh">"</span> <span class="o">+</span> <span class="n">build_timestamp</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\"</span><span class="s">;</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">include_file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<div class="alert alert-warning" role="alert">
  <b>Note:</b> I have no experience whatsoever in Python, so feel free to suggest your improvements to this script
</div>

<h2 id="appendix-5-step-by-step-review-of-github-actions-configuration-file">Appendix 5: Step-by-step review of Github Actions configuration file</h2>

<p>The following code makes the workflow run on a Ubuntu runner when there is a push on main and develop branches:</p>

<!--  -->
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Test, Build and Release</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">main</span><span class="pi">,</span> <span class="nv">develop</span><span class="pi">]</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">versioning</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Determine version, Test, Build and Release</span>
    <span class="na">permissions</span><span class="pi">:</span> <span class="s">write-all</span>

    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">outputs</span><span class="pi">:</span>
      <span class="na">branchname</span><span class="pi">:</span> <span class="s">${{ steps.versioninfo.outputs.branchname }}</span>
      <span class="na">commithash</span><span class="pi">:</span> <span class="s">${{ steps.versioninfo.outputs.commithash }}</span>
      <span class="na">buildtimestamp</span><span class="pi">:</span> <span class="s">${{ steps.versioninfo.outputs.buildtimestamp }}</span>
      <span class="na">lastmajordigit</span><span class="pi">:</span> <span class="s">${{ steps.versioninfo.outputs.lastmajordigit }}</span>
      <span class="na">lastminordigit</span><span class="pi">:</span> <span class="s">${{ steps.versioninfo.outputs.lastminordigit }}</span>
      <span class="na">lastpatchdigit</span><span class="pi">:</span> <span class="s">${{ steps.versioninfo.outputs.lastpatchdigit }}</span>
      <span class="na">lastversion</span><span class="pi">:</span> <span class="s">${{ steps.versioninfo.outputs.lastversion }}</span>
      <span class="na">nextmajordigit</span><span class="pi">:</span> <span class="s">${{ steps.selectversion.outputs.nextmajordigit }}</span>
      <span class="na">nextminordigit</span><span class="pi">:</span> <span class="s">${{ steps.selectversion.outputs.nextminordigit }}</span>
      <span class="na">nextpatchdigit</span><span class="pi">:</span> <span class="s">${{ steps.selectversion.outputs.nextpatchdigit }}</span>
      <span class="na">buildversion</span><span class="pi">:</span> <span class="s">${{ steps.selectversion.outputs.buildversion }}</span>
      <span class="na">buildversionfilename</span><span class="pi">:</span> <span class="s">${{ steps.selectversion.outputs.buildversionfilename }}</span>
</code></pre></div></div>
<!--  -->

<p>The <strong>outputs</strong> section defines some internal workflow variables to collect data in the different steps further down. Notice how the name of the step is used between <strong>steps.</strong> and <strong>.outputs</strong></p>

<p>Next a number of steps are listed, which will be executed sequentially. I’m not 100% sure what caching does, but I think it speeds up data-exchange between the steps. This workflow runs to completion in under a minute, so it’s not bad:</p>

<!--  -->
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">steps</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Enable caching</span>
    <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v3</span>
    <span class="na">with</span><span class="pi">:</span>
      <span class="na">path</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">~/.cache/pip</span>
        <span class="s">~/.platformio/.cache</span>
      <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-pio</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout Repository</span>
    <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
    <span class="na">with</span><span class="pi">:</span>
      <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
</code></pre></div></div>
<!--  -->

<p>Next step runs a series of shell commands to fetch the latest version, latest commit hash and current timestamp from Git. The values are stored in the outputs defined above:</p>

<!--  -->
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Get version data</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">versioninfo</span>
  <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">echo "extract branch name from github_ref '${{ github.ref }}'"</span>
    <span class="s">declare branchname=$(echo "${{ github.ref }}" | cut -d'/' -f 3-)</span>
    <span class="s">echo "clean branch name = $branchname"</span>
    <span class="s">echo "extract commit short hash : $(git rev-parse --short HEAD)"</span>
    <span class="s">declare commithash=$(git rev-parse --short HEAD)</span>
    <span class="s">echo "extract build timestamp"</span>
    <span class="s">declare buildtimestamp=$(date "+%Y-%b-%d-%H:%M:%S")</span>
    <span class="s">echo "buildtimestamp = $buildtimestamp"</span>
    <span class="s">declare fulltag=$(git describe --tag $(git rev-parse --verify refs/remotes/origin/main))</span>
    <span class="s">echo "fulltag = [$fulltag]"</span>
    <span class="s">declare versiontag=$(echo $fulltag | cut -d'-' -f1)</span>
    <span class="s">echo "extract SemVer numbers from version tag [$versiontag]"</span>
    <span class="s">declare -i lastmajordigit=$(echo $versiontag | cut -c 1- | cut -d'.' -f1)</span>
    <span class="s">echo "lastmajordigit = $lastmajordigit"</span>
    <span class="s">declare -i lastminordigit=$(echo $versiontag | cut -c 1- | cut -d'.' -f2)</span>
    <span class="s">echo "lastminordigit = $lastminordigit"</span>
    <span class="s">declare -i lastpatchdigit=$(echo $versiontag | cut -c 1- | cut -d'.' -f3)</span>
    <span class="s">echo "lastpatchdigit = $lastpatchdigit"</span>
    <span class="s">declare lastversion="v$lastmajordigit.$lastminordigit.$lastpatchdigit"</span>
    <span class="s">echo "output variables to GitHub Actions"</span>
    <span class="s">echo "branchname=$branchname" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="s">echo "lastmajordigit=$lastmajordigit" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="s">echo "lastminordigit=$lastminordigit" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="s">echo "lastpatchdigit=$lastpatchdigit" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="s">echo "commithash=$commithash" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="s">echo "buildtimestamp=$buildtimestamp" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="s">echo "lastversion=$lastversion" &gt;&gt; $GITHUB_OUTPUT</span>
</code></pre></div></div>
<!--  -->

<p>The next step determines what version we are building. If not running on the main branch, it’s simply the uses the latest version plus a commit hash. If we are on main, then we check the merge commit message to determine what next version to generate:</p>

<!--  -->
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Determine which version to build</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">selectversion</span>
  <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">echo "Triggered from Branch : ${{ steps.versioninfo.outputs.branchname }}"</span>
    <span class="s">echo "Commit hash           : ${{ steps.versioninfo.outputs.commithash }}"</span>
    <span class="s">echo "Last version          : ${{ steps.versioninfo.outputs.lastversion }}"</span>
    <span class="s">echo "  Major               : ${{ steps.versioninfo.outputs.lastmajordigit }}"</span>
    <span class="s">echo "  Minor               : ${{ steps.versioninfo.outputs.lastminordigit }}"</span>
    <span class="s">echo "  Patch               : ${{ steps.versioninfo.outputs.lastpatchdigit }}"</span>
    <span class="s">if [ "${{ steps.versioninfo.outputs.branchname }}" == "main" ]; then</span>
      <span class="s">echo "Triggered from merge on main branch with commit title : ${{ github.event.head_commit.message }}"</span>
      <span class="s">if [[ "${{ github.event.head_commit.message }}" == *"major"* ]]; then</span>
        <span class="s">echo "Incrementing Major versionDigit"</span>
        <span class="s">declare -i nextmajordigit=${{ steps.versioninfo.outputs.lastmajordigit }}+1</span>
        <span class="s">declare -i nextminordigit=0</span>
        <span class="s">declare -i nextpatchdigit=0</span>
        <span class="s">declare buildversion="v$nextmajordigit.$nextminordigit.$nextpatchdigit"</span>
        <span class="s">declare buildversionfilename=$(echo "${buildversion//./_}")</span>

      <span class="s">elif [[ "${{ github.event.head_commit.message }}" == *"minor"* ]]; then</span>
        <span class="s">echo "Incrementing Minor versionDigit"</span>
        <span class="s">declare -i nextmajordigit=${{ steps.versioninfo.outputs.lastmajordigit }}</span>
        <span class="s">declare -i nextminordigit=${{ steps.versioninfo.outputs.lastminordigit }}+1</span>
        <span class="s">declare -i nextpatchdigit=0</span>
        <span class="s">declare buildversion="v$nextmajordigit.$nextminordigit.$nextpatchdigit"</span>
        <span class="s">declare buildversionfilename=$(echo "${buildversion//./_}")</span>
      <span class="s">else</span>
        <span class="s">echo "Incrementing Patch versionDigit"</span>
        <span class="s">declare -i nextmajordigit=${{ steps.versioninfo.outputs.lastmajordigit }}</span>
        <span class="s">declare -i nextminordigit=${{ steps.versioninfo.outputs.lastminordigit }}</span>
        <span class="s">declare -i nextpatchdigit=${{ steps.versioninfo.outputs.lastpatchdigit }}+1</span>
        <span class="s">declare buildversion="v$nextmajordigit.$nextminordigit.$nextpatchdigit"</span>
        <span class="s">declare buildversionfilename=$(echo "${buildversion//./_}")</span>
      <span class="s">fi</span>
    <span class="s">else</span>
      <span class="s">echo "Not on main branch -&gt; development version"</span>
      <span class="s">declare -i nextmajordigit=${{ steps.versioninfo.outputs.lastmajordigit }}</span>
      <span class="s">declare -i nextminordigit=${{ steps.versioninfo.outputs.lastminordigit }}</span>
      <span class="s">declare -i nextpatchdigit=${{ steps.versioninfo.outputs.lastpatchdigit }}</span>
      <span class="s">declare buildversion="v$nextmajordigit.$nextminordigit.$nextpatchdigit-${{ steps.versioninfo.outputs.commithash }}"</span>
      <span class="s">declare buildversionfilename=$(echo "${buildversion//./_}")</span>
    <span class="s">fi</span>
    <span class="s">echo "Building Version : $buildversion"</span>
    <span class="s">echo "  Major          : $nextmajordigit"</span>
    <span class="s">echo "  Minor          : $nextminordigit"</span>
    <span class="s">echo "  Patch          : $nextpatchdigit"</span>
    <span class="s">echo "Filename         : $buildversionfilename"</span>
    <span class="s">echo "output variables to GitHub Actions"</span>
    <span class="s">echo "nextmajordigit=$nextmajordigit" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="s">echo "nextminordigit=$nextminordigit" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="s">echo "nextpatchdigit=$nextpatchdigit" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="s">echo "buildversion=$buildversion" &gt;&gt; $GITHUB_OUTPUT</span>
    <span class="s">echo "buildversionfilename=$buildversionfilename" &gt;&gt; $GITHUB_OUTPUT</span>
</code></pre></div></div>
<!--  -->

<p>Then we write the <strong>buildinfo.cpp</strong> file:</p>

<!--  -->
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Save Build info</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s2">"</span><span class="s">DamianReeves/write-file-action@master"</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">lib/version/buildinfo.cpp</span>
    <span class="na">write-mode</span><span class="pi">:</span> <span class="s">overwrite</span>
    <span class="na">contents</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">// ##########################################################################</span>
      <span class="s">// ### This file is generated by Build and Continuous Integration scripts ###</span>
      <span class="s">// ###   .github/workflows/buildinfo.py for local development environment ###</span>
      <span class="s">// ###   .github/workflows/testbuildrelease.yml for CI environment        ###</span>
      <span class="s">// ### Changes will be overwritten on the next build                      ###</span>
      <span class="s">// ##########################################################################</span>
      <span class="s">#include "buildinfo.h"</span>
      <span class="s">const buildEnvironment buildInfo::theBuildEnvironment{buildEnvironment::ci};</span>
      <span class="s">const buildType buildInfo::theBuildType{buildType::production};</span>
      <span class="s">const int buildInfo::mainVersionDigit   = ${{ steps.selectversion.outputs.nextmajordigit }};</span>
      <span class="s">const int buildInfo::minorVersionDigit  = ${{ steps.selectversion.outputs.nextminordigit }};</span>
      <span class="s">const int buildInfo::patchVersionDigit  = ${{ steps.selectversion.outputs.nextpatchdigit }};</span>
      <span class="s">const char* buildInfo::lastCommitTag    = "${{ steps.versioninfo.outputs.commithash }}";</span>
      <span class="s">const char* buildInfo::buildTimeStamp   = "${{ steps.versioninfo.outputs.buildtimestamp }}";</span>
</code></pre></div></div>
<!--  -->

<p>Next steps install PlatformIO, run all unit tests and upload the test results to codecov.io:</p>

<!--  -->
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install PlatformIO Core</span>
  <span class="na">run</span><span class="pi">:</span> <span class="s">pip install --upgrade platformio</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run all generic unit tests</span>
  <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">pio test -e all_generic_unittests</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Upload coverage reports to Codecov</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">codecov/codecov-action@v3</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">gcov</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">gcov_include</span><span class="pi">:</span> <span class="s1">'</span><span class="s">.pio/build/all_generic_unittests/*'</span>
  <span class="na">env</span><span class="pi">:</span>
    <span class="na">CODECOV_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.CODECOV_TOKEN }}</span>
</code></pre></div></div>

<p>This step then builds the application:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
  <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">pio run -e production_application</span>
</code></pre></div></div>
<!--  -->

<p>Finally the resulting binary is attached to the workflow, and when doing a release, also to the release:</p>

<!--  -->
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Attach Binary to Workflow run</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">attachbinarytoworkflowrun</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/upload-artifact@v3</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">${{ steps.selectversion.outputs.buildversionfilename }}.hex</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">.pio/build/production_application/firmware.hex</span>
    <span class="na">if-no-files-found</span><span class="pi">:</span> <span class="s">error</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Release when on main branch</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">createrelease</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/create-release@v1</span>
  <span class="na">if</span><span class="pi">:</span> <span class="s">${{ steps.versioninfo.outputs.branchname == 'main'}}</span>
  <span class="na">env</span><span class="pi">:</span>
    <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">tag_name</span><span class="pi">:</span> <span class="s">${{ steps.selectversion.outputs.buildversion }}</span>
    <span class="na">release_name</span><span class="pi">:</span> <span class="s">Release ${{ steps.selectversion.outputs.buildversion }}</span>
    <span class="na">draft</span><span class="pi">:</span> <span class="kc">false</span>
    <span class="na">prerelease</span><span class="pi">:</span> <span class="kc">false</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Attach Binary to Release</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">attachbinarytorelease</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/upload-release-asset@v1</span>
  <span class="na">if</span><span class="pi">:</span> <span class="s">${{ steps.versioninfo.outputs.branchname == 'main'}}</span>
  <span class="na">env</span><span class="pi">:</span>
    <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">upload_url</span><span class="pi">:</span> <span class="s">${{ steps.createrelease.outputs.upload_url }}</span>
    <span class="na">asset_path</span><span class="pi">:</span> <span class="s">.pio/build/production_application/firmware.hex</span>
    <span class="na">asset_name</span><span class="pi">:</span> <span class="s">${{ steps.selectversion.outputs.buildversionfilename }}.hex</span>
    <span class="na">asset_content_type</span><span class="pi">:</span> <span class="s">application/octet-stream</span>
</code></pre></div></div>
<!--  -->

<div class="alert alert-warning" role="alert">
  <b>Note:</b> Some binaries have <b>.hex</b>, others have <b>.bin</b> extension. You may need to adjust this script, in case your binary has a different extension. Also the source path where the binary is fetched depends on the envitonment name, so keep those in sync.
</div>

<h2 id="further-improvements">Further Improvements</h2>

<p>Congratulations, you’ve made it to the end of this blog post which was certainly not an easy read. You can further discuss this topic on the <a href="https://community.platformio.org/t/setting-up-platformio-for-ci-cd-with-testing-code-coverage-and-versioning/37871" target="_blank">PlatformIO forum</a>. Suggestions for improvements are also very welcome, simply post an issue on the demo repository.</p>

<p>Thank you.</p>

<h2 class="no_toc" id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Pascal Roobrouck</name></author><category term="blog" /><category term="insights" /><summary type="html"><![CDATA[Leveraging PlatformIO for Effortless Continuous Integration and Delivery in Collaborative Environments for Optimized Embedded Software Deployment Workflow]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2024-01-15-cicd-testing-coverage-versioning/main.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2024-01-15-cicd-testing-coverage-versioning/main.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO 2023 Year in Review</title><link href="https://piolabs.com/blog/news/platformio-year-in-review-2023.html" rel="alternate" type="text/html" title="PlatformIO 2023 Year in Review" /><published>2024-01-08T00:00:00+02:00</published><updated>2024-01-08T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-year-in-review-2023</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-year-in-review-2023.html"><![CDATA[<p>We’ve been through a lot together, and it’s time to look back and see how PlatformIO Labs kept growing during the most challenging times in its history.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/2024-01-08-platformio-year-in-review-2023/platformio_year_in_review_2023.png" alt="PlatformIO 2023 Year in Review" /></p>

<p>As we step into 2024, it’s a mix of happy times and thoughtful moments. We’re excited to share some good news with you, but we also want to take a moment to reflect on what’s going on in the world. As we all know, tragic events are occurring in multiple places on our planet, and Ukraine is one of them. Our R&amp;D team is located in this beautiful country, where people are currently facing tough times due to the ongoing war. Despite all the difficulties, we managed to adapt to the new harsh conditions and adjust our plans when needed. This helped us achieve steady growth even when things outside were uncertain. We also made solid plans to keep everything going smoothly.</p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#major-milestones" id="markdown-toc-major-milestones">Major Milestones</a>    <ul>
      <li><a href="#soaring-to-4-million-unique-installations" id="markdown-toc-soaring-to-4-million-unique-installations">Soaring to 4 Million Unique Installations</a></li>
      <li><a href="#unveiling-a-new-chapter-with-platformio-core-6" id="markdown-toc-unveiling-a-new-chapter-with-platformio-core-6">Unveiling a New Chapter with PlatformIO Core 6</a></li>
      <li><a href="#revolutionizing-embedded-development-with-platformio-ide-30" id="markdown-toc-revolutionizing-embedded-development-with-platformio-ide-30">Revolutionizing Embedded Development with PlatformIO IDE 3.0</a></li>
      <li><a href="#elevating-the-industry-with-platformio-package-registry-improvements" id="markdown-toc-elevating-the-industry-with-platformio-package-registry-improvements">Elevating the Industry with PlatformIO Package Registry Improvements</a></li>
      <li><a href="#welcoming-new-voices-to-our-blog" id="markdown-toc-welcoming-new-voices-to-our-blog">Welcoming New Voices to Our Blog</a></li>
    </ul>
  </li>
  <li><a href="#unveiling-the-future" id="markdown-toc-unveiling-the-future">Unveiling the Future</a></li>
  <li><a href="#words-of-appreciation" id="markdown-toc-words-of-appreciation">Words of Appreciation</a></li>
</ul>

<h2 id="major-milestones">Major Milestones</h2>

<h3 id="soaring-to-4-million-unique-installations">Soaring to 4 Million Unique Installations</h3>

<p>We’re thrilled to share that we are approaching a remarkable milestone of 4 million
unique installations of our <a href="https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide" target="_blank">PlatformIO IDE for VSCode</a>.</p>

<figure class="figure mb-7">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2024-01-08-platformio-year-in-review-2023/platformio_yearly_active_users_2014_2023.png" alt="PlatformIO Yearly Active Users (2014-2021)" />
  <figcaption class="figure-caption text-center">
    PlatformIO Active Users (2014-2023)
  </figcaption>
</figure>

<p>This incredible number is a testament to the trust and support of
our growing community. Thank you for choosing PlatformIO and being a part of our journey!</p>

<h3 id="unveiling-a-new-chapter-with-platformio-core-6">Unveiling a New Chapter with PlatformIO Core 6</h3>

<p>We’ve consistently delivered significant new features and numerous enhancements across all our main  products.</p>

<p><img class="figure-img img-fluid rounded" src="/assets/posts/2022-07-14-platformio-core-6-1-released/platformio-core-6-1-released.png" alt="PlatformIO Core 6.1" /></p>

<p>The heart of the entire PlatformIO ecosystem, the PlatformIO Core, has now reached the 6.1 milestone, bringing substantial improvements to performance, a better testing and debugging experience, an updated package management system and many other enhancements. This milestone represents our commitment to continuous improvement and providing you with the best possible instruments for embedded development.</p>

<h3 id="revolutionizing-embedded-development-with-platformio-ide-30">Revolutionizing Embedded Development with PlatformIO IDE 3.0</h3>

<p>Our dedication to enhancing user experiences extends to our <a href="https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide" target="_blank">PlatformIO IDE for VSCode</a>.</p>

<p><img class="figure-img img-fluid rounded" src="/assets/img/screenshots/desktop/platformio-ide-for-vscode-laptop.png" alt="PlatformIO IDE 3.0" /></p>

<p>Our extension for VSCode not only reflects our responsiveness to the needs of embedded engineers around the globe, but also sets a new standard for efficiency and functionality in embedded development by leveraging our highly-customizable <a href="/technology/modern-ui-toolkit.html">Modern UI Toolkit</a>. The latest updates bring substantially refactored project management workflow, new intelliSense feature for PlatformIO configuration files and many other great UX/UI improvements!</p>

<h3 id="elevating-the-industry-with-platformio-package-registry-improvements">Elevating the Industry with PlatformIO Package Registry Improvements</h3>

<p>We’ve been hard at work refining our <a href="/technology/trusted-package-registry.html">Trusted Package Registry</a> solution and the results have been positive. These improvements have caught the attention of key players in the industry and we’re proud to have created a product that meets the needs of diverse markets. Your trust is driving positive change across the embedded systems market.</p>

<h3 id="welcoming-new-voices-to-our-blog">Welcoming New Voices to Our Blog</h3>

<p>Diversity and collaboration are at the heart of the PlatformIO community, and this year, we’ve expanded the voices contributing to our blog. New authors have shared their expertise, bringing fresh perspectives and insights to our community. We believe that a variety of voices fosters creativity and innovation, making the blog a richer resource for everyone.</p>

<h2 id="unveiling-the-future">Unveiling the Future</h2>

<p>In the year 2024, we are gearing up for some major announcements. Get ready for new and improved versions of our open-source projects! We’ve been hard at work, taking your feedback to heart and crafting features that will enhance your experience. These upcoming releases are not just updates; they provide a glimpse into the future of the PlatformIO ecosystem.</p>

<p>Another one of our primary goals for the year 2024 is to surpass the 5 million installations mark. We’re not merely setting a target; we’re laying the groundwork for a more extensive and vibrant community. Your trust and engagement have fueled our growth, and we are excited to welcome even more users into the PlatformIO ecosystem.</p>

<h2 id="words-of-appreciation">Words of Appreciation</h2>

<p>As we celebrate these achievements, we want to express our deepest gratitude to you — the PlatformIO community.
Your feedback, support, and enthusiasm have fueled our growth and inspired us to reach new heights.
Looking ahead, we’re excited about the opportunities to innovate, collaborate, and continue this
incredible journey together. We are proud of what we’ve done. To everyone who’s been a part of this journey — thank you!
You’ve made PlatformIO what it is today, and we’re excited to see what we can achieve together in the years ahead.</p>

<p><strong>Have a great 2024!</strong></p>

<h2 class="no_toc" id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[Our Journey Through Tough Times: The highlights of the major milestones and achievements of PlatformIO Labs in 2023]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2024-01-08-platformio-year-in-review-2023/platformio_year_in_review_2023.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2024-01-08-platformio-year-in-review-2023/platformio_year_in_review_2023.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source December Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-december-2023-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source December Updates" /><published>2024-01-04T00:00:00+02:00</published><updated>2024-01-04T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-december-2023-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-december-2023-updates.html"><![CDATA[<p>Welcome to the December 2023 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
As we wrap up the year, December is bringing some cool changes our way. Amid all the holiday buzz, we’ve been busy making updates to give you a better experience. These changes show that we’re always trying to make things awesome for you.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-december-news.jpg" alt="PlatformIO Open Source December Updates" /></p>

<p>During December, we added support for the latest Arduino ESP32 core v2.0.14 and ESP-IDF v5.1.2, rolled out updates for several popular development platforms, fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#esp-idf-v512" id="markdown-toc-esp-idf-v512">ESP-IDF v5.1.2</a></li>
  <li><a href="#espressif32-dev-platform-v65" id="markdown-toc-espressif32-dev-platform-v65">Espressif32 dev-platform v6.5</a></li>
  <li><a href="#st-stm32-dev-platform-v172" id="markdown-toc-st-stm32-dev-platform-v172">ST STM32 dev-platform v17.2</a></li>
  <li><a href="#nordic-nrf52-dev-platform-v103" id="markdown-toc-nordic-nrf52-dev-platform-v103">Nordic nRF52 dev-platform v10.3</a></li>
  <li><a href="#arduino-core-for-mbed-enabled-devices-v4010" id="markdown-toc-arduino-core-for-mbed-enabled-devices-v4010">Arduino Core for mbed-enabled devices v4.0.10</a></li>
</ul>

<h2 id="esp-idf-v512">ESP-IDF v5.1.2</h2>

<p>We’re happy to announce updated support for the latest release of <strong>ESP-IDF v5.1.2</strong> - the official development framework for the ESP32, ESP32-S and ESP32-C Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.</p>

<p><strong>Major enhancements in v5.1.2:</strong></p>

<ul>
  <li>Added internal pull-up/downs option for gpio used for deepsleep wakeup for all chip types</li>
  <li>Added new deep sleep APIs that help to skip deep sleep if the wakeup source is set before the sleep request</li>
  <li>Supported PLL track on all targets.</li>
</ul>

<p>More information on project configuration for ESP-IDF can be found <a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration">here</a>.</p>

<p><strong>Related resources for ESP-IDF</strong>:</p>

<ul>
  <li><a href="https://github.com/espressif/esp-idf/releases/tag/v5.1.2">Release notes for v5.1.2</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html">Documentation for ESP-IDF</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#boards">Supported boards</a></li>
</ul>

<h2 id="espressif32-dev-platform-v65">Espressif32 dev-platform v6.5</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/espressif32">Espressif 32</a> dev-platform brings support for the latest Arduino Core and ESP-IDF, new boards and dev-kits, several fixes and improvements:</p>

<ul>
  <li>Added new boards and dev-kits: <a href="https://docs.platformio.org/en/latest/boards/espressif32/4d_systems_esp32s3_gen4_r8n16.html">4D Systems GEN4-ESP32 16MB</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_camera_esp32s3.html">Adafruit pyCamera S3</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_metro_esp32s3.html">Adafruit Metro ESP32-S3</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_qtpy_esp32s3_n4r2.html">Adafruit QT Py ESP32-S3 (4M Flash 2M PSRAM)</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_qualia_s3_rgb666.html">Adafruit Qualia ESP32-S3 RGB666</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/atd147_s3.html">ArtronShop ATD1.47-S3</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/ioxesp32.html">ArtronShop IOXESP32</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/ioxesp32ps.html">ArtronShop IOXESP32PS</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/aventen_s3_sync.html">Aventen S3 Sync</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/esp32-pico-devkitm-2.html">Espressif ESP32-PICO-DevKitM-2</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/esp32-s3-devkitm-1.html">Espressif ESP32-S3-DevKitM-1</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/esp32s3usbotg.html">Espressif ESP32-S3-USB-OTG</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/lionbits3.html">Lion:Bit S3 STEM Dev Board</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/lilygo-t-display.html">LilyGo T-Display</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/bee_data_logger.html">Smart Bee Data Logger</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/namino_arancio.html">Namino Arancio</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/namino_rosso.html">Namino Rosso</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/um_nanos3.html">Unexpected Maker NanoS3</a></li>
  <li>Added support for Arduino v2.0.14 (<a href="https://github.com/espressif/arduino-esp32/releases/tag/2.0.14">release notes</a>)</li>
  <li>Updated ESP-IDF to v5.1.2 (<a href="https://github.com/espressif/esp-idf/releases/tag/v5.1.2">release notes</a>)</li>
  <li>Added default debug option for ESP32-S2-Kaluga-1 Kit (<a href="https://github.com/platformio/platform-espressif32/pull/1185">#1185</a>, <a href="https://github.com/platformio/platform-espressif32/pull/1130">#1130</a>)</li>
  <li>Added optional MMU page size flag to elf2bin if it’s configurable</li>
  <li>Fixed handling of precompiled static archives located outside IDF project root (<a href="https://github.com/platformio/platform-espressif32/pull/1230">#1230</a>)</li>
  <li>Fixed Lolin S2 USB CDC setup (<a href="https://github.com/platformio/platform-espressif32/pull/1251">#1251</a>)</li>
  <li>Fixed upload workflow for Lolin S3 (<a href="https://github.com/platformio/platform-espressif32/pull/1252">#1252</a>)</li>
  <li>Minor fixes and improvements (<a href="https://github.com/platformio/platform-espressif32/pull/1180">#1180</a>, <a href="https://github.com/platformio/platform-espressif32/pull/1198">#1198</a>)</li>
</ul>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="st-stm32-dev-platform-v172">ST STM32 dev-platform v17.2</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a> v17.2 comes with support for the latest Arduino cores and several minor improvements:</p>

<ul>
  <li>Updated STM32 Arduino Core to the latest v2.7.1 (<a href="https://github.com/stm32duino/Arduino_Core_STM32/releases/tag/2.7.1">release notes</a>)</li>
  <li>Updated Arduino-mbed core to v4.0.10 (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/4.0.10">release notes</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the ST STM32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-ststm32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="nordic-nrf52-dev-platform-v103">Nordic nRF52 dev-platform v10.3</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> dev-platform v10.3 brings support for the latest Arduino cores and several minor improvements::</p>

<ul>
  <li>Updated Adafruit Arduino Core to the latest v1.6.0 (<a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/1.6.0">release notes</a>)</li>
  <li>Updated Arduino-mbed core to v4.0.10 (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/4.0.10">release notes</a>)</li>
  <li>Downgraded GCC toolchain to v7 for Arduino-mbed boards (<a href="https://github.com/platformio/platform-nordicnrf52/issues/185">#185</a>)</li>
  <li>Minor fixes and improvements (<a href="https://github.com/platformio/platform-nordicnrf52/issues/187">#187</a>)</li>
</ul>

<p><strong>Related resources for the Nordic nRF52 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-nordicnrf52/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arduino-core-for-mbed-enabled-devices-v4010">Arduino Core for mbed-enabled devices v4.0.10</h2>

<p>The <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a>, <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> and <a href="https://registry.platformio.org/platforms/platformio/raspberrypi">Raspberry Pi RP2040</a> dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v4.0.10. According to the <a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/4.0.10">release notes</a>, v4.0.10 brings a lot of bugfixes and improvements in the core and accompanying libraries.</p>

<h2 class="no_toc" id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[New boards and dev-kits, Support for the latest ESP-IDF, Updates for Espressif32, ST STM32, Nordic nRF52 and Raspberry Pi RP2040 dev-platforms]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-december-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-december-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source November Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-november-2023-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source November Updates" /><published>2023-12-04T00:00:00+02:00</published><updated>2023-12-04T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-november-2023-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-november-2023-updates.html"><![CDATA[<p>Welcome to the November 2023 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.</p>

<p>This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-november-news.jpg" alt="PlatformIO Open Source November Updates" /></p>

<p>During November, we added support for the latest Zephyr framework, rolled out updates for ST STM32, Renesas RA and Microchip AVR development platforms and fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#zephyr-rtos-v35" id="markdown-toc-zephyr-rtos-v35">Zephyr RTOS v3.5</a></li>
  <li><a href="#microchip-avr-dev-platform-v50" id="markdown-toc-microchip-avr-dev-platform-v50">Microchip AVR dev-platform v5.0</a></li>
  <li><a href="#renesas-ra-dev-platform-v13" id="markdown-toc-renesas-ra-dev-platform-v13">Renesas RA dev-platform v1.3</a></li>
  <li><a href="#st-stm32-dev-platform-v171" id="markdown-toc-st-stm32-dev-platform-v171">ST STM32 dev-platform v17.1</a></li>
</ul>

<h2 id="zephyr-rtos-v35">Zephyr RTOS v3.5</h2>

<p>We’re happy to announce updated support for the latest release v3.5.0 of <a href="https://www.zephyrproject.org/" target="_blank">Zephyr Project</a> - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind.</p>

<p>Major enhancements in v3.5.0:</p>

<ul>
  <li>Picolibc is now the default C standard library</li>
  <li>Added new modem subsystem</li>
  <li>Added support for linkable loadable extensions (llext)</li>
  <li>Added new hardware spinlock driver API</li>
</ul>

<p><strong>Related resources for Zephyr framework</strong>:</p>

<ul>
  <li><a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/v3.5.0">Release notes for v3.5.0</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html">Documentation for Zephyr framework</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms">Supported development platforms</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards">Supported boards</a></li>
</ul>

<h2 id="microchip-avr-dev-platform-v50">Microchip AVR dev-platform v5.0</h2>

<p>The latest release of the <a href="https://registry.platformio.org/platforms/platformio/atmelavr">Microchip AVR</a> v5.0 comes with updates for highly customizable Arduino cores by MCUdude, improved support for the <code class="language-plaintext highlighter-rouge">Urboot</code> bootloader and several minor improvements:</p>

<ul>
  <li>New board <a href="https://docs.platformio.org/en/latest/boards/atmelavr/uno_mini.html">Arduino Uno Mini</a></li>
  <li>Updated Arduino AVR core to v1.8.6 (<a href="https://github.com/platformio/platform-atmelavr/pull/314">#314</a>)</li>
  <li>Updated MCUdude’s cores (<a href="https://github.com/platformio/platform-atmelavr/pull/320">#320</a>):
    <ul>
      <li>MajorCore <code class="language-plaintext highlighter-rouge">v3.0.0</code> (<a href="https://github.com/MCUdude/MajorCore/releases/tag/v3.0.0">release notes</a>)</li>
      <li>MegaCore <code class="language-plaintext highlighter-rouge">v3.0.0</code> (<a href="https://github.com/MCUdude/MegaCore/releases/tag/v3.0.0">release notes</a>)</li>
      <li>MightyCore <code class="language-plaintext highlighter-rouge">v3.0.0</code> (<a href="https://github.com/MCUdude/MightyCore/releases/tag/v3.0.0">release notes</a>)</li>
      <li>MiniCore <code class="language-plaintext highlighter-rouge">v3.0.0</code> (<a href="https://github.com/MCUdude/MiniCore/releases/tag/v3.0.0">release notes</a>)</li>
    </ul>
  </li>
  <li>MCUdude cores switched to AVRDUDE v7.2</li>
  <li>Added initial support for the <code class="language-plaintext highlighter-rouge">Urboot</code> bootloader for MigntyCore, MiniCore, MegaCore, or MajorCore (<a href="https://github.com/platformio/platform-atmelavr/pull/321">#321</a>)</li>
  <li>Fixed an issue with excessive quotes when path to AVRDUDE contains a whitespace character (<a href="https://github.com/platformio/platform-atmelavr/pull/297">#297</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-atmelavr/releases/tag/v5.0.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Microchip AVR dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/atmelavr.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-atmelavr/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="renesas-ra-dev-platform-v13">Renesas RA dev-platform v1.3</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/renesas-ra">Renesas RA</a> dev-platform v1.3.0 brings support for the latest Arduino core and several bugfixes:</p>

<ul>
  <li>Updated Arduino core to v1.0.5 (<a href="https://github.com/arduino/ArduinoCore-renesas/releases/tag/1.0.5">release notes</a>)</li>
  <li>Downgraded GCC to v7 to avoid compatibility isues (<a href="https://github.com/platformio/platform-renesas-ra/issues/18">#18</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the Renesas RA dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/renesas-ra.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-renesas-ra/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="st-stm32-dev-platform-v171">ST STM32 dev-platform v17.1</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a> v17.1 comes with support for the latest Zephyr and several minor improvements:</p>

<ul>
  <li>Updated Zephyr to the latest v3.5.0 (<a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/v3.5.0">release notes</a>)</li>
  <li>Added Mbed support for <code class="language-plaintext highlighter-rouge">nucelo_h723zg</code> (<a href="https://github.com/platformio/platform-ststm32/issues/740">#740</a>)</li>
  <li>Added missing macro for LoRa E5 Dev Board (<a href="https://github.com/platformio/platform-ststm32/issues/738">#738</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-ststm32/releases/tag/v17.1.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the ST STM32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-ststm32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 class="no_toc" id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[New boards and devkits, Support for the latest Zephyr RTOS 3.5, Updates for ST STM32, Renesas RA and Microchip AVR dev-platforms]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-november-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-november-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source September Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-september-2023-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source September Updates" /><published>2023-10-02T00:00:00+03:00</published><updated>2023-10-02T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-september-2023-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-september-2023-updates.html"><![CDATA[<p>Welcome to the September 2023 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.</p>

<p>This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-september-news.jpg" alt="PlatformIO Open Source September Updates" /></p>

<p>During September, we added support for the latest Zephyr framework and rolled out updates for ST STM32, Renesas RA, Nordic nRF52 and Raspberry Pico development platforms, fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#zephyr-rtos-v34" id="markdown-toc-zephyr-rtos-v34">Zephyr RTOS v3.4</a></li>
  <li><a href="#st-stm32-dev-platform-v170" id="markdown-toc-st-stm32-dev-platform-v170">ST STM32 dev-platform v17.0</a></li>
  <li><a href="#renesas-ra-dev-platform-v12" id="markdown-toc-renesas-ra-dev-platform-v12">Renesas RA dev-platform v1.2</a></li>
  <li><a href="#arduino-core-for-mbed-enabled-devices-v406" id="markdown-toc-arduino-core-for-mbed-enabled-devices-v406">Arduino Core for mbed-enabled devices v4.0.6</a></li>
</ul>

<h2 id="zephyr-rtos-v34">Zephyr RTOS v3.4</h2>

<p>We’re happy to announce updated support for the latest release v3.4.0 of <a href="https://www.zephyrproject.org/" target="_blank">Zephyr Project</a> - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind.</p>

<p>The renewed integration brings enhanced compatibility and faster performance, but currently focuses only on two platforms – <a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">ST STM32</a> and <a href="https://docs.platformio.org/en/latest/platforms/nxpimxrt.html">NXP iMXRT</a>. Stay tuned as we’re actively exploring opportunities to expand to more platforms in the future.</p>

<p><strong>Related resources for Zephyr framework</strong>:</p>

<ul>
  <li><a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/v3.4.0">Release notes for v3.4.0</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html">Documentation for Zephyr framework</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms">Supported development platforms</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards">Supported boards</a></li>
</ul>

<h2 id="st-stm32-dev-platform-v170">ST STM32 dev-platform v17.0</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a> v17.0 comes with support for the latest Zephyr and Arduino cores, updated toolchain packages and several minor improvements:</p>

<ul>
  <li>New boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/leafony_ap03.html">Leafony AP03</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/lora_e5_dev_board.html">SeeedStudio LoRa E5 Dev Board</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/lora_e5_mini.html">SeeedStudio LoRa-E5 mini</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/sparkfun_micromod_f405.html">SparkFun MicroMod STM32F405</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/genericSTM32H750VB.html">STM32H750VB</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/genericSTM32G431CB.html">STM32G431CB</a></li>
    </ul>
  </li>
  <li>Updated Zephyr to the latest v3.4.0 (<a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/v3.4.0">release notes</a>)</li>
  <li>Updated STM32 Arduino Core to the latest v2.6.0 (<a href="https://github.com/stm32duino/Arduino_Core_STM32/releases/tag/2.6.0">release notes</a>)</li>
  <li>Updated Arduino-mbed core to v4.0.6 (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/4.0.6">release notes</a>)</li>
  <li>Updated toolchain packages to v12.3.1 for Arduino integration (<a href="https://github.com/platformio/platform-ststm32/issues/720">#720</a>)</li>
  <li>Fixed flash memory size for <code class="language-plaintext highlighter-rouge">nucleo_g0b1re</code> (<a href="https://github.com/platformio/platform-ststm32/issues/723">#723</a>)</li>
  <li>Minor fixes and improvements (<a href="https://github.com/platformio/platform-ststm32/issues/695">#695</a>, <a href="https://github.com/platformio/platform-ststm32/issues/715">#715</a>, <a href="https://github.com/platformio/platform-ststm32/issues/722">#722</a>, <a href="https://github.com/platformio/platform-ststm32/issues/728">#728</a>)</li>
</ul>

<p><strong>Related resources for the ST STM32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-ststm32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="renesas-ra-dev-platform-v12">Renesas RA dev-platform v1.2</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/renesas-ra">Renesas RA</a> dev-platform v1.2.0 brings support for the latest Arduino core and several bugfixes:</p>

<ul>
  <li>Updated Arduino core to v1.0.4 (<a href="https://github.com/arduino/ArduinoCore-renesas/releases/tag/1.0.4">release notes</a>)</li>
  <li>Added missing ARCH macro for Uno boards (<a href="https://github.com/platformio/platform-renesas-ra/issues/11">#11</a>)</li>
  <li>Fixed broken linker flag for FPU (<a href="https://github.com/platformio/platform-renesas-ra/issues/13">#13</a>)</li>
  <li>Fixed J-Link device name for Portenta C33 (<a href="https://github.com/platformio/platform-renesas-ra/issues/14">#14</a>)</li>
</ul>

<p><strong>Related resources for the Renesas RA dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/renesas-ra.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-renesas-ra/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arduino-core-for-mbed-enabled-devices-v406">Arduino Core for mbed-enabled devices v4.0.6</h2>

<p>The <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a>, <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> and <a href="https://registry.platformio.org/platforms/platformio/raspberrypi">Raspberry Pi RP2040</a> dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v4.0.6. According to the <a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/4.0.6">release notes</a>, v4.0.6 brings a lot of bugfixes and improvements in the core and accompanying libraries.</p>

<h2 class="no_toc" id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[New boards and devkits, Support for the latest Zephyr RTOS 3.4, Updates for ST STM32, Renesas RA and mbed-enabled dev-platforms]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-september-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-september-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source August Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-august-2023-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source August Updates" /><published>2023-09-04T00:00:00+03:00</published><updated>2023-09-04T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-august-2023-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-august-2023-updates.html"><![CDATA[<p>Welcome to the August 2023 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-august-news.jpg" alt="PlatformIO Open Source August Updates" /></p>

<p>During August, we rolled out a bugfix release for PlatformIO Core, added support for the latest Arduino ESP32 core v2.0.11 and ESP-IDF v5.1.1, fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-core-6111" id="markdown-toc-platformio-core-6111">PlatformIO Core 6.1.11</a></li>
  <li><a href="#esp-idf-v51" id="markdown-toc-esp-idf-v51">ESP-IDF v5.1</a></li>
  <li><a href="#espressif32-dev-platform-v64" id="markdown-toc-espressif32-dev-platform-v64">Espressif32 dev-platform v6.4</a></li>
  <li><a href="#renesas-ra-dev-platform-v11" id="markdown-toc-renesas-ra-dev-platform-v11">Renesas RA dev-platform v1.1</a></li>
  <li><a href="#heltec-cubecell-dev-platform-v11" id="markdown-toc-heltec-cubecell-dev-platform-v11">Heltec Cubecell dev-platform v1.1</a></li>
</ul>

<h2 id="platformio-core-6111">PlatformIO Core 6.1.11</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next release with lots of great improvements and bugfixes:</p>

<ul>
  <li>Resolved an issue that caused generated projects for <a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">PlatformIO IDE for VSCode</a> to break when the <code class="language-plaintext highlighter-rouge">-iprefix</code> compiler flag was used</li>
  <li>Resolved an issue encountered while utilizing the <a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_exec.html">pio pkg exec</a> command on the Windows platform to execute Python scripts from a package</li>
  <li>Implemented a crucial improvement to the <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_run.html">pio run</a> command, guaranteeing that the <code class="language-plaintext highlighter-rouge">monitor</code> target is not executed if any of the preceding targets, such as <code class="language-plaintext highlighter-rouge">upload</code>, encounter failures</li>
  <li><a href="https://docs.platformio.org/en/latest/plus/check-tools/cppcheck.html">Cppcheck</a> v2.11 with new checks, CLI commands and various analysis improvements</li>
  <li>Resolved a critical issue that arose on macOS ARM platforms due to the Python “requests” module, leading to a “ModuleNotFoundError: No module named ‘chardet’” (<a href="https://github.com/platformio/platformio-core/issues/4702">issue #4702</a>)</li>
  <li>Resolved a possible issue that may cause generated projects for <a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">PlatformIO IDE for VSCode</a> to fail to launch a debug session because of a missing “objdump” binary when GDB is not part of the toolchain package</li>
  <li>Resolved a regression issue that resulted in the malfunction of the Memory Inspection feature within <a href="https://docs.platformio.org/en/latest/home/index.html">PIO Home</a></li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-core/releases/tag/v6.1.10">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="esp-idf-v51">ESP-IDF v5.1</h2>

<p>We’re happy to announce updated support for the latest release of <strong>ESP-IDF v5.1.1</strong> - the official development framework for the ESP32, ESP32-S and ESP32-C Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.</p>

<p><strong>Major enhancements in v5.1:</strong></p>

<ul>
  <li>Added Zigbee support for ESP32-C6</li>
  <li>Added support for ESP32-H2 MP chip</li>
</ul>

<p>More information on project configuration for ESP-IDF can be found <a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration">here</a>.</p>

<p><strong>Related resources for ESP-IDF</strong>:</p>

<ul>
  <li><a href="https://github.com/espressif/esp-idf/releases/tag/v5.1">Release notes for v5.1</a></li>
  <li><a href="https://github.com/espressif/esp-idf/releases/tag/v5.1.1">Release notes for v5.1.1</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html">Documentation for ESP-IDF</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#boards">Supported boards</a></li>
</ul>

<h2 id="espressif32-dev-platform-v64">Espressif32 dev-platform v6.4</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/espressif32">Espressif 32</a> dev-platform brings support for the latest Arduino Core and ESP-IDF, new boards and dev-kits, several minor fixes and improvements:</p>

<ul>
  <li>Added new boards and dev-kits:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/m5stack-adafruit_matrixportal_esp32s3.html">Adafruit MatrixPortal ESP32-S3</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/arduino_nano_esp32.html">Arduino Nano ESP32</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/esp32-c6-devkitm-1.html">Espressif ESP32-C6-DevKitM-1</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/dfrobot_romeo_esp32s3.html">DFRobot Romeo ESP32-S3</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/nebulas3.html">Kinetic Dynamics Nebula S3</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/m5stamp-pico.html">M5Stamp-Pico</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/m5stack-cores3.html">M5Stack-CoreS3</a></li>
    </ul>
  </li>
  <li>Added support for Arduino v2.0.11 (<a href="https://github.com/espressif/arduino-esp32/releases/tag/2.0.11">release notes</a>)</li>
  <li>Updated ESP-IDF to v5.1.1 (<a href="https://github.com/espressif/esp-idf/releases/tag/v5.1.1">release notes</a>)</li>
  <li>Initial support for ESP32-C6 (<a href="https://github.com/platformio/platform-espressif32/pull/1054">#1054</a>)</li>
  <li>Improved dynamic memory size calculation process (<a href="https://github.com/platformio/platform-espressif32/pull/1159">#1159</a>, <a href="https://github.com/platformio/platform-espressif32/issues/1178">#1178</a>)</li>
  <li>Support for custom application partition names (<a href="https://github.com/platformio/platform-espressif32/pull/1166">#1166</a>)</li>
  <li>Fixed OpenOCD configuration for Lolin S2 boards (<a href="https://github.com/platformio/platform-espressif32/pull/1139">#1139</a>)</li>
  <li>Minor fixes and improvements (<a href="https://github.com/platformio/platform-espressif32/pull/1146">#1146</a>, <a href="https://github.com/platformio/platform-espressif32/pull/1175">#1175</a>, <a href="https://github.com/platformio/platform-espressif32/pull/1176">#1176</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-espressif32/releases/tag/v6.4.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="renesas-ra-dev-platform-v11">Renesas RA dev-platform v1.1</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/renesas-ra">Renesas RA</a> dev-platform v1.9.0 brings support for the latest Arduino core:</p>

<ul>
  <li>Updated Arduino core to v1.0.2 (<a href="https://github.com/arduino/ArduinoCore-renesas/releases/tag/1.0.2">release notes</a>)</li>
  <li>Fixed broken uploader package selection (<a href="https://github.com/platformio/platform-renesas-ra/issues/9">#9</a>)</li>
</ul>

<p><strong>Related resources for the Renesas RA dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/renesas-ra.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-renesas-ra/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="heltec-cubecell-dev-platform-v11">Heltec Cubecell dev-platform v1.1</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/heltecautomation/heltec-cubecell">Heltec CubeCell</a> dev-platform comes with support for the latest Arduino core and several minor fixes:</p>

<ul>
  <li>Added support for CubeCell core v1.6.0 (<a href="https://github.com/HelTecAutomation/CubeCell-Arduino/releases/tag/V1.6.0">release notes</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the Heltec CubeCell dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/heltec-cubecell.html">Documentation</a></li>
  <li><a href="https://github.com/HelTecAutomation/platform-heltec-cubecell/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 class="no_toc" id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[PlatformIO Core bugfix release, New boards and dev-kits, Support for the latest ESP-IDF v5.1, Updates for Espressif32, Renesas RA and Heltec CubeCell dev-platforms]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-august-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-august-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source July Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-july-2023-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source July Updates" /><published>2023-08-07T00:00:00+03:00</published><updated>2023-08-07T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-july-2023-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-july-2023-updates.html"><![CDATA[<p>Welcome to the July 2023 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.</p>

<p>This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-july-news.jpg" alt="PlatformIO Open Source July Updates" /></p>

<p>During July, we have released a new dev-platform for Renesas RA MCUs, rolled out an updated version of PlatformIO IDE for Visual Studio Code, published a bugfix release for PlatformIO Core, added support for the latest Arm Mbed OS v6.17, resolved a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-ide-33-for-visual-studio-code" id="markdown-toc-platformio-ide-33-for-visual-studio-code">PlatformIO IDE 3.3 for Visual Studio Code</a></li>
  <li><a href="#platformio-core-619" id="markdown-toc-platformio-core-619">PlatformIO Core 6.1.9</a></li>
  <li><a href="#new-renesas-ra-dev-platform" id="markdown-toc-new-renesas-ra-dev-platform">New Renesas RA dev-platform</a></li>
  <li><a href="#arm-mbed-os-v617" id="markdown-toc-arm-mbed-os-v617">Arm Mbed OS v6.17</a></li>
</ul>

<h2 id="platformio-ide-33-for-visual-studio-code">PlatformIO IDE 3.3 for Visual Studio Code</h2>

<p>We are pleased to announce a new stable release of PlatformIO IDE 3.3 for <a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">Visual Studio Code</a> with great improvements to the task management functionality:</p>

<p><img class="figure-img img-fluid rounded" src="https://raw.githubusercontent.com/platformio/platformio-vscode-ide/develop/.github/media/platformio-toggle-multienv-tasks.gif" alt="PlatformIO Open Source July Updates" /></p>

<ul>
  <li>Enhanced the user experience in the “Project Tasks” explorer by displaying tasks specific to the selected environment by default</li>
  <li>Introduced a new option that allows seamless switching between multi-environment project tasks</li>
  <li>Expanded the functionality of the “Activity Bar &gt; PlatformIO IDE &gt; Quick Access” menu by including a new item called <a href="https://marketplace.visualstudio.com/items?itemName=alexnesnes.teleplot">Serial &amp; UDP Plotter</a></li>
  <li>Updated the PlatformIO Core Installer Script to version <a href="https://github.com/platformio/platformio-core-installer/releases/tag/v1.2.0">1.2.0</a></li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-vscode-ide/releases/tag/v3.3.0">Release Notes</a> for more detailed information.</p>

<h2 id="platformio-core-619">PlatformIO Core 6.1.9</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v6.1.9 release with lots of great improvements and bugfixes:</p>

<ul>
  <li>Added a new <code class="language-plaintext highlighter-rouge">--lint</code> option to the <a href="https://docs.platformio.org/en/latest/core/userguide/project/cmd_config.html">pio project config</a> command, enabling users to efficiently perform linting on the <a href="https://docs.platformio.org/en/latest/projectconf.html">“platformio.ini”</a> configuration file</li>
  <li>Enhanced the parsing of the <a href="https://docs.platformio.org/en/latest/projectconf.html">“platformio.ini”</a> configuration file to provide comprehensive diagnostic information</li>
  <li>Expanded the functionality of the <a href="https://docs.platformio.org/en/latest/manifests/library-json/index.html">library.json</a> manifest by allowing the use of the underscore symbol in the <a href="https://docs.platformio.org/en/latest/manifests/library-json/fields/keywords.html">keywords</a> field</li>
  <li>Optimized project integration templates to address the issue of long paths on Windows (<a href="https://github.com/platformio/platformio-core/issues/4652">issue #4652</a>)</li>
  <li>Refactored <a href="https://docs.platformio.org/en/latest/advanced/unit-testing/index.html">Unit Testing</a> engine to resolve compiler warnings with “-Wpedantic” option (<a href="https://github.com/platformio/platformio-core/pull/4671">pull #4671</a>)</li>
  <li>Eliminated erroneous warning regarding the use of obsolete PlatformIO Core when downgrading to the stable version (<a href="https://github.com/platformio/platformio-core/issues/4664">issue #4664</a>)</li>
  <li>Updated the <a href="https://docs.platformio.org/en/latest/core/userguide/project/cmd_metadata.html">pio project metadata</a> command to return C/C++ flags as parsed Unix shell arguments when dumping project build metadata</li>
  <li>Resolved a critical issue related to the usage of the <code class="language-plaintext highlighter-rouge">-include</code> flag within the <a href="https://docs.platformio.org/en/latest/projectconf/sections/env/options/build/build_flags.html">build_flags</a> option, specifically when employing dynamic variables (<a href="https://github.com/platformio/platformio-core/issues/4682">issue #4682</a>)</li>
  <li>Removed PlatformIO IDE for Atom from the documentation as <a href="https://github.blog/2022-06-08-sunsetting-atom/">Atom has been deprecated</a></li>
  <li>Rectified a regression bug that occurred when the <code class="language-plaintext highlighter-rouge">-include</code> flag was passed via the <a href="https://docs.platformio.org/en/latest/projectconf/sections/env/options/build/build_flags.html">build_flags</a> option as a relative path and subsequently expanded (<a href="https://github.com/platformio/platformio-core/issues/4683">issue #4683</a>)</li>
  <li>Resolved an issue that resulted in unresolved absolute toolchain paths when generating the <a href="https://docs.platformio.org/en/latest/integration/compile_commands.html">Compilation database “compile_commands.json”</a> (<a href="https://github.com/platformio/platformio-core/issues/4684">issue #4684</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-core/releases/tag/v6.1.9">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="new-renesas-ra-dev-platform">New Renesas RA dev-platform</h2>

<p><img class="figure-img img-fluid rounded" src="/assets/posts/2023-08-07-platformio-oss-july-2023-updates/renesas-ra-logo.gif" alt="New PlatformIO development platform for Renesas RA microcontrollers" /></p>

<p>During the last few months, we have received a lot of private and public inquiries from our community about the integration of the Renesas Advanced (RA) 32-bit microcontrollers into the PlatformIO ecosystem. At PlatformIO, we highly value the opinions and feedback of our community members. It is through their insights that we continually strive to enhance our offerings and meet their evolving needs.</p>

<p>With this integration, PlatformIO users gain access to a wider selection of powerful microcontrollers, enabling them to leverage the Renesas RA MCU series’ advanced features and capabilities. We encourage all developers to explore the newly added support for Renesas devices and provide us with valuable feedback to further refine our services.</p>

<p>The first stable release of the Renesas RA dev-platform brings initial support for several development boards and frameworks:</p>

<ul>
  <li>Supported boards:
    <ul>
      <li><a href="http://docs.platformio.org/en/latest/boards/renesas-ra/uno_r4_wifi.html">Arduino Uno R4 WiFi</a></li>
      <li><a href="http://docs.platformio.org/en/latest/boards/renesas-ra/uno_r4_minima.html">Arduino Uno R4 Minima</a></li>
      <li><a href="http://docs.platformio.org/en/latest/boards/renesas-ra/portenta_c33.html">Arduino Portenta C33</a></li>
    </ul>
  </li>
  <li>Initial support for Arduino framework (<a href="https://github.com/arduino/ArduinoCore-renesas/releases/tag/1.0.1">release notes</a>)</li>
  <li>Initial support for CMSIS framework (<a href="https://github.com/platformio/platform-renesas-ra/pull/7">#7</a>)</li>
  <li>Initial support for native FSP framework (<a href="https://github.com/platformio/platform-renesas-ra/pull/7">#7</a>)</li>
</ul>

<p><strong>Related resources for the Renesas RA dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/renesas-ra.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-renesas-ra/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arm-mbed-os-v617">Arm Mbed OS v6.17</h2>

<p>We’re happy to announce updated support for the latest version of <strong>Mbed OS v6.17</strong> - an open source embedded operating system designed specifically for the “things” in the Internet of Things. It includes all the features you need to develop a connected product based on an Arm Cortex-M microcontroller, including security, connectivity, an RTOS and drivers for sensors and I/O devices.</p>

<p>More information on project configuration for the Mbed OS can be found <a href="https://docs.platformio.org/en/latest/frameworks/mbed.html#configuration-system">here</a>.</p>

<p><strong>Related resources for Arm Mbed OS</strong>:</p>

<ul>
  <li><a href="https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.17.0">Release notes for v6.17</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/mbed.html">Documentation for Mbed OS</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/mbed.html#platforms">Supported development platforms</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/mbed.html#boards">Supported boards</a></li>
</ul>

<h2 class="no_toc" id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[Improved PlatformIO IDE for Microsoft VSCode, PlatformIO Core bugfix release, New Renesas RA dev-platform, New boards and dev-kits, support for the latest Mbed OS]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-july-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-july-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source June Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-june-2023-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source June Updates" /><published>2023-07-03T00:00:00+03:00</published><updated>2023-07-03T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-june-2023-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-june-2023-updates.html"><![CDATA[<p>Welcome to the June 2023 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.</p>

<p>This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-june-news.jpg" alt="PlatformIO Open Source June Updates" /></p>

<p>During June, we rolled out an updated version of PlatformIO IDE for Visual Studio Code, added support for the latest Arduino cores for ST STM32, Nordic nRF52 and Microchip SAM development platforms, fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-ide-32-for-visual-studio-code" id="markdown-toc-platformio-ide-32-for-visual-studio-code">PlatformIO IDE 3.2 for Visual Studio Code</a></li>
  <li><a href="#st-stm32-v160" id="markdown-toc-st-stm32-v160">ST STM32 v16.0</a></li>
  <li><a href="#nordic-nrf52-v100" id="markdown-toc-nordic-nrf52-v100">Nordic nRF52 v10.0</a></li>
  <li><a href="#microchip-sam-v82" id="markdown-toc-microchip-sam-v82">Microchip SAM v8.2</a></li>
  <li><a href="#chips-alliance-v13" id="markdown-toc-chips-alliance-v13">CHIPS Alliance v1.3</a></li>
</ul>

<h2 id="platformio-ide-32-for-visual-studio-code">PlatformIO IDE 3.2 for Visual Studio Code</h2>

<p>We are pleased to announce a new stable release of PlatformIO IDE 3.2 for <a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">Visual Studio Code</a> that brings a new powerful linting feature that highlights syntactical and stylistic issues in the <a href="https://docs.platformio.org/en/latest/projectconf/index.html">“platformio.ini”</a> configuration file:</p>

<p><img class="figure-img img-fluid rounded" src="https://raw.githubusercontent.com/platformio/platformio-vscode-ide/develop/.github/media/platformio-ini-lint-demo.png" alt="PlatformIO Open Source June Updates" /></p>

<p>Other enhancements and bugfixes:</p>

<ul>
  <li>Improved project cleanup process by utilizing the <code class="language-plaintext highlighter-rouge">fullclean</code> target instead of <code class="language-plaintext highlighter-rouge">cleanall</code>. This ensures a thorough clean-up, including the removal of dependent libraries</li>
  <li>Updated PlatformIO Core Installer Script to <a href="https://github.com/platformio/platformio-core-installer/releases/tag/v1.1.3">v1.1.3</a></li>
  <li>Resolved an issue where certain buttons were missing from the status bar in VSCode 1.79 after the recent update (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/3736">#3736</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-vscode-ide/releases/tag/v3.2.0">Release Notes</a> for more detailed information.</p>

<h2 id="st-stm32-v160">ST STM32 v16.0</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a> v16.0.0 comes with support for the latest Arduino core, updated packages and several minor improvements:</p>

<ul>
  <li>Updated STM32 Arduino Core to the latest v2.5.0 (<a href="https://github.com/stm32duino/Arduino_Core_STM32/releases/tag/2.5.0">release notes</a>)</li>
  <li>Updated OpenOCD package to the latest v0.12</li>
  <li>Switched Arduino Core to GCC v10.3 packages (<a href="https://github.com/platformio/platform-ststm32/issues/301">#301</a>, <a href="https://github.com/platformio/platform-ststm32/issues/486">#486</a>, <a href="https://github.com/platformio/platform-ststm32/issues/605">#605</a>, <a href="https://github.com/platformio/platform-ststm32/issues/650">#650</a>)</li>
  <li>Enabled CMSIS-DAP for genericSTM32F103C6 (<a href="https://github.com/platformio/platform-ststm32/issues/696">#696</a>)</li>
  <li>Various memory size corrections (<a href="https://github.com/platformio/platform-ststm32/issues/617">#617</a>, <a href="https://github.com/platformio/platform-ststm32/issues/649">#649</a>, <a href="https://github.com/platformio/platform-ststm32/issues/656">#656</a>, <a href="https://github.com/platformio/platform-ststm32/issues/699">#699</a>)</li>
  <li>Dropped support for legacy Mbed v5</li>
</ul>

<p><strong>Related resources for the ST STM32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-ststm32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="nordic-nrf52-v100">Nordic nRF52 v10.0</h2>

<p>The latest release of the <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> dev-platform brings support for the latest Adafruit core and updated OpenOCD v0.12 packages:</p>

<ul>
  <li>Updated Arduino Adafruit core to v1.5.0 (<a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/1.5.0">release notes</a>)</li>
  <li>Updated OpenOCD package to the latest v0.12</li>
  <li>Dropped support for legacy Mbed v5</li>
</ul>

<p><strong>Related resources for the Nordic nRF52 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-nordicnrf52/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="microchip-sam-v82">Microchip SAM v8.2</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/atmelsam">Microchip SAM</a> dev-platform brings updates for several Arduino cores, updated OpenOCD v0.12 and several minor improvements:</p>

<ul>
  <li>Updated Arduino Adafruit Core to v1.7.13 (<a href="https://github.com/adafruit/ArduinoCore-samd/releases/tag/1.7.13">release notes</a>)</li>
  <li>Updated Arduino Seeed Core to v1.8.4 (<a href="https://github.com/Seeed-Studio/ArduinoCore-samd/releases/tag/v1.8.4">release notes</a>)</li>
  <li>Updated Arduino SODAQ Core to v1.8.9</li>
  <li>Updated OpenOCD package to the latest v0.12</li>
  <li>Removed duplicate macro in Seeeduino Wio Terminal manifest</li>
</ul>

<p><strong>Related resources for the Microchip SAM dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/atmelsam.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-atmelsam/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="chips-alliance-v13">CHIPS Alliance v1.3</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/chipsalliance">CHIPS Alliance</a> dev-platform comes with support for Verilator-based RVfpga-ViDBo and RVfpga-Pipeline simulation tools:</p>

<ul>
  <li>Added new option for supporting RVfpga-ViDBo and RVfpga-Pipeline (<a href="https://github.com/platformio/platform-chipsalliance/issues/12">#12</a>)</li>
  <li>Fixed “program_fpga” target errors (<a href="https://github.com/platformio/platform-chipsalliance/issues/11">#11</a>)</li>
</ul>

<p><strong>Related resources for the CHIPS Alliance dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/chipsalliance.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-chipsalliance/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 class="no_toc" id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[Improved PlatformIO IDE for Microsoft VSCode, Updates for ST STM32, Nordic nRF52 and Microchip SAM dev-platforms]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-june-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-june-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source May Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-may-2023-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source May Updates" /><published>2023-06-05T00:00:00+03:00</published><updated>2023-06-05T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-may-2023-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-may-2023-updates.html"><![CDATA[<p>Welcome to the May 2023 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.</p>

<p>This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-may-news.jpg" alt="PlatformIO Open Source May Updates" /></p>

<p>During May, we published a bugfix release for PlatformIO Core, added support for the latest ESP-IDF v5.0.2, rolled out updates for the Espressif32 and Microchip AVR/megaAVR development platforms, resolved a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-core-617" id="markdown-toc-platformio-core-617">PlatformIO Core 6.1.7</a></li>
  <li><a href="#esp-idf-v502" id="markdown-toc-esp-idf-v502">ESP-IDF v5.0.2</a></li>
  <li><a href="#espressif32-dev-platform-v63" id="markdown-toc-espressif32-dev-platform-v63">Espressif32 dev-platform v6.3</a></li>
  <li><a href="#microchip-avr-dev-platform-v42" id="markdown-toc-microchip-avr-dev-platform-v42">Microchip AVR dev-platform v4.2</a></li>
  <li><a href="#microchip-megaavr-dev-platform-v19" id="markdown-toc-microchip-megaavr-dev-platform-v19">Microchip megaAVR dev-platform v1.9</a></li>
</ul>

<h2 id="platformio-core-617">PlatformIO Core 6.1.7</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v6.1.7 release with lots of great improvements and bugfixes:</p>

<ul>
  <li>Introduced a new <code class="language-plaintext highlighter-rouge">--sample-code</code> option to the <a href="https://docs.platformio.org/en/latest/core/userguide/project/cmd_init.html">pio project init</a> command, which allows users to include sample code in the newly created project</li>
  <li>Added validation for <a href="https://docs.platformio.org/en/latest/projectconf/sections/env/index.html#working-env-name">project working environment names</a> to ensure that they only contain lowercase letters <code class="language-plaintext highlighter-rouge">a-z</code>, numbers <code class="language-plaintext highlighter-rouge">0-9</code>, and special characters <code class="language-plaintext highlighter-rouge">_</code> (underscore) and <code class="language-plaintext highlighter-rouge">-</code> (hyphen)</li>
  <li>Added the ability to show a detailed library dependency tree only in <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_run.html#cmdoption-pio-run-v">verbose mode</a>, which can help you understand the relationship between libraries and troubleshoot issues more effectively (<a href="https://github.com/platformio/platformio-core/issues/4517">issue #4517</a>)</li>
  <li>Added the ability to run only the <a href="https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html">device monitor</a> when using the <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_run.html">pio run -t monitor</a> command, saving you time and resources by skipping the build process</li>
  <li>Implemented a new feature to store device monitor logs in the project’s <code class="language-plaintext highlighter-rouge">logs</code> folder, making it easier to access and review device monitor logs for your projects (<a href="https://github.com/platformio/platformio-core/issues/4596">issue #4596</a>)</li>
  <li>Improved support for projects located on Windows network drives, including Network Shared Folder, Dropbox, OneDrive, Google Drive, and other similar services (<a href="https://github.com/platformio/platformio-core/issues/3417">issue #3417</a>)</li>
  <li>Improved source file filtering functionality for the <a href="https://docs.platformio.org/en/latest/advanced/static-code-analysis/index.html">Static Code Analysis</a> feature, making it easier to analyze only the code you need to</li>
  <li>Upgraded the build engine to the latest version of SCons (4.5.2) to improve build performance, reliability, and compatibility with other tools and systems (<a href="https://github.com/SCons/scons/releases/tag/4.5.2">release notes</a>)</li>
  <li>Implemented a fix for shell injection vulnerabilities when converting INO files to CPP, ensuring your code is safe and secure (<a href="https://github.com/platformio/platformio-core/issues/4532">issue #4532</a>)</li>
  <li>Restored the project generator for the <a href="https://docs.platformio.org/en/latest/integration/ide/netbeans.html">NetBeans IDE</a>, providing you with more flexibility and options for your development workflow</li>
  <li>Resolved installation issues with PIO Remote on Raspberry Pi and other small form-factor PCs (<a href="https://github.com/platformio/platformio-core/issues/4425">issue #4425</a>, <a href="https://github.com/platformio/platformio-core/issues/4493">issue #4493</a>, <a href="https://github.com/platformio/platformio-core/issues/4607">issue #4607</a>)</li>
  <li>Resolved an issue where the <a href="https://docs.platformio.org/en/latest/projectconf/sections/platformio/options/directory/build_cache_dir.html">build_cache_dir</a> setting was not being recognized consistently across multiple environments (<a href="https://github.com/platformio/platformio-core/issues/4574">issue #4574</a>)</li>
  <li>Resolved an issue where organization details could not be updated using the <a href="https://docs.platformio.org/en/latest/core/userguide/org/cmd_update.html">pio org update</a> command</li>
  <li>Resolved an issue where the incorrect debugging environment was generated for VSCode in “Auto” mode (<a href="https://github.com/platformio/platformio-core/issues/4597">issue #4597</a>)</li>
  <li>Resolved an issue where native tests would fail if a custom program name was specified (<a href="https://github.com/platformio/platformio-core/issues/4546">issue #4546</a>)</li>
  <li>Resolved an issue where the PlatformIO <a href="https://docs.platformio.org/en/latest/plus/debugging.html">Debugging</a> solution was not escaping the tool installation process into MI2 correctly (<a href="https://github.com/platformio/platformio-core/issues/4565">issue #4565</a>)</li>
  <li>Resolved an issue where multiple targets were not executed sequentially (<a href="https://github.com/platformio/platformio-core/issues/4604">issue #4604</a>)</li>
  <li>Resolved an issue where upgrading PlatformIO Core fails on Windows with Python 3.11 (<a href="https://github.com/platformio/platformio-core/issues/4540">issue #4540</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-core/releases/tag/v6.1.7">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="esp-idf-v502">ESP-IDF v5.0.2</h2>

<p>We’re happy to announce updated support for the latest patch update of <strong>ESP-IDF v5.0.2</strong> - the official development framework for the ESP32, ESP32-S and ESP32-C Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.</p>

<p><strong>Major enhancements in v5.0.2:</strong></p>

<ul>
  <li>Support BLE privacy by controller</li>
  <li>Added custom GATT server functionality and encryption</li>
  <li>Improved the handling of station SA query procedures</li>
</ul>

<p>More information on project configuration for ESP-IDF can be found <a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration">here</a>.</p>

<p><strong>Related resources for ESP-IDF</strong>:</p>

<ul>
  <li><a href="https://github.com/espressif/esp-idf/releases/tag/v5.0.2">Release notes for v5.0.2</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html">Documentation for ESP-IDF</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#boards">Supported boards</a></li>
</ul>

<h2 id="espressif32-dev-platform-v63">Espressif32 dev-platform v6.3</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/espressif32">Espressif 32</a> dev-platform brings support for the latest ESP-IDF v5.0.2, updated Arduino core v2.0.9 and several minor fixes and improvements:</p>

<ul>
  <li>Added support for Arduino v2.0.9 (<a href="https://github.com/espressif/arduino-esp32/releases/tag/2.0.9">release notes</a>)</li>
  <li>Added support for ESP-IDF v5.0.2 (<a href="https://github.com/espressif/esp-idf/releases/tag/v5.0.2">release notes</a>)</li>
  <li>Better handling of macros exported from the IDF build system (<a href="https://github.com/platformio/platform-espressif32/issues/1080">#1080</a>)</li>
  <li>Improved integration with the upstream version of ESP32 Arduino core (<a href="https://github.com/platformio/platform-espressif32/issues/1092">#1092</a>)</li>
  <li>Fixed flash memory size for ESP32S3 CAM LCD board (<a href="https://github.com/platformio/platform-espressif32/issues/1095">#1095</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-espressif32/releases/tag/v6.3.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="microchip-avr-dev-platform-v42">Microchip AVR dev-platform v4.2</h2>

<p>The latest release of the <a href="https://registry.platformio.org/platforms/platformio/atmelavr">Microchip AVR</a> v4.2.0 comes with updates for highly customizable Arduino cores by MCUdude and initial support for the <code class="language-plaintext highlighter-rouge">Urboot</code> bootloader:</p>

<ul>
  <li>Updated MCUdude’s cores (#302):
    <ul>
      <li>MajorCore <code class="language-plaintext highlighter-rouge">v2.2.2</code> (<a href="https://github.com/MCUdude/MajorCore/releases/tag/v2.2.2">release notes</a>)</li>
      <li>MegaCore <code class="language-plaintext highlighter-rouge">v2.2.3</code> (<a href="https://github.com/MCUdude/MegaCore/releases/tag/v2.2.3">release notes</a>)</li>
      <li>MightyCore <code class="language-plaintext highlighter-rouge">v2.2.2</code> (<a href="https://github.com/MCUdude/MightyCore/releases/tag/v2.2.2">release notes</a>)</li>
      <li>MiniCore <code class="language-plaintext highlighter-rouge">v2.2.2</code> (<a href="https://github.com/MCUdude/MiniCore/releases/tag/v2.2.2">release notes</a>)</li>
      <li>MicroCore <code class="language-plaintext highlighter-rouge">v2.3.0</code> (<a href="https://github.com/MCUdude/MicroCore/releases/tag/v2.3.0">release notes</a>)</li>
    </ul>
  </li>
  <li>Added initial support for the <code class="language-plaintext highlighter-rouge">Urboot</code> bootloader for MicroCore (<a href="https://github.com/platformio/platform-atmelavr/pull/311">#311</a>)</li>
  <li>Fixed an issue with missing <code class="language-plaintext highlighter-rouge">tool-avrdude</code> package when bootloader target is selected (<a href="https://github.com/platformio/platform-atmelavr/issues/269">#269</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-atmelavr/releases/tag/v4.2.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Microchip AVR dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/atmelavr.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-atmelavr/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="microchip-megaavr-dev-platform-v19">Microchip megaAVR dev-platform v1.9</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/atmelmegaavr">Microchip megaAVR</a> v1.9.0 brings several updated Arduino cores:</p>

<ul>
  <li>Updated <code class="language-plaintext highlighter-rouge">MegaCoreX</code> to v1.1.2 (<a href="https://github.com/MCUdude/MegaCoreX/releases/tag/v1.1.2">release notes</a>)</li>
  <li>Updated <code class="language-plaintext highlighter-rouge">megatinycore</code> to v2.6.7 (<a href="https://github.com/SpenceKonde/megaTinyCore/releases/tag/2.6.7">release notes</a>)</li>
  <li>Updated <code class="language-plaintext highlighter-rouge">Arduino</code> core to v1.8.8 (<a href="https://github.com/arduino/ArduinoCore-megaavr/releases/tag/1.8.8">release notes</a>)</li>
</ul>

<p><strong>Related resources for the Microchip megaAVR dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 class="no_toc" id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[PlatformIO Core bugfix release, Support for the latest ESP-IDF, Updated Arduino cores Espressif32 and Microchip AVR/megaAVR]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-may-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-may-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A Deep Dive into the ARM Debug Access Port</title><link href="https://piolabs.com/blog/engineering/diving-into-arm-debug-access-port.html" rel="alternate" type="text/html" title="A Deep Dive into the ARM Debug Access Port" /><published>2023-05-09T00:00:00+03:00</published><updated>2023-05-09T00:00:00+03:00</updated><id>https://piolabs.com/blog/engineering/diving-into-arm-debug-access-port</id><content type="html" xml:base="https://piolabs.com/blog/engineering/diving-into-arm-debug-access-port.html"><![CDATA[<p><img class="figure-img img-fluid rounded" src="/assets/posts/2023-05-09-diving-into-arm-debug-access-port/title.jpg" alt="PlatformIO lowers the barriers to entry the IoT market as much as possible" /></p>

<p>The ARM Debug Access Port (DAP) is a crucial component of the ARM debugging architecture that allows developers to gain access to and debug embedded systems running on ARM-based processors. The DAP provides a standardized interface for accessing and controlling various debug-related features, including debugging and programming interfaces, trace data, and system registers.<!-- more --> Whether you are a seasoned embedded systems developer or just getting started with ARM-based SoC development, this article will provide valuable insights into the architecture of the ARM Debug Access Port and its functionality.</p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#debug-access-port-architecture" id="markdown-toc-debug-access-port-architecture">Debug Access Port Architecture</a></li>
  <li><a href="#debug-port-dp" id="markdown-toc-debug-port-dp">Debug Port (DP)</a>    <ul>
      <li><a href="#jtag-debug-port-jtag-dp" id="markdown-toc-jtag-debug-port-jtag-dp">JTAG Debug Port (JTAG-DP)</a></li>
      <li><a href="#debug-port-registers" id="markdown-toc-debug-port-registers">Debug Port Registers</a></li>
      <li><a href="#accessing-the-dp-registers" id="markdown-toc-accessing-the-dp-registers">Accessing the DP registers</a></li>
    </ul>
  </li>
  <li><a href="#access-ports" id="markdown-toc-access-ports">Access Ports</a>    <ul>
      <li><a href="#memory-access-port-registers" id="markdown-toc-memory-access-port-registers">Memory Access Port Registers</a></li>
      <li><a href="#addressing-of-ap-registers" id="markdown-toc-addressing-of-ap-registers">Addressing of AP Registers</a></li>
      <li><a href="#accessing-the-ap-registers" id="markdown-toc-accessing-the-ap-registers">Accessing the AP registers</a></li>
    </ul>
  </li>
  <li><a href="#practical-part" id="markdown-toc-practical-part">Practical Part</a>    <ul>
      <li><a href="#writing-a-variable-to-memory" id="markdown-toc-writing-a-variable-to-memory">Writing a variable to memory</a></li>
      <li><a href="#reading-a-variable-from-memory" id="markdown-toc-reading-a-variable-from-memory">Reading a variable from memory</a></li>
    </ul>
  </li>
  <li><a href="#links" id="markdown-toc-links">Links</a></li>
</ul>

<h2 id="debug-access-port-architecture">Debug Access Port Architecture</h2>

<p>The DAP is the primary “unit” of the ARM Debug Interface (ADI). DAP is a module that contains a set of registers and logic required to provide microcontroller debugging via a debug interface. DAP consists of two main components: <strong>Debug Port (DP)</strong> and <strong>Access Port (AP)</strong>.</p>

<div class="alert alert-warning" role="alert">
  <b>Important</b>: Currently, most processors are implementing <b>ADIv5</b> (specified in Arm IHI0031E), while the newer <b>ADIv6</b> (see Arm IHI0074C) is being slowly phased in. Because it is more popular, I'll be focusing here on the ADIv5 standard.
</div>

<p>The <strong>Debug Port</strong> provides control of the DAP and establishes a connection between the debugger and the target device. DP performs functions such as initialization, reset, and operation status checking. This module is conditionally divided into two parts: common and specific to a particular debugging protocol. The common part contains registers used to configure and operate the DP module, and the specific part is responsible for working with external debugging protocols. According to the documentation, our microcontroller supports two debugging protocols: SWD and JTAG, but in this series of articles, I decided to choose JTAG for consideration. Therefore, in the future, unless specifically stated otherwise, I will describe the operation of DAP specifically in the context of the JTAG protocol.</p>

<p>The <strong>Access Port</strong> provides access to various resources of the microcontroller, such as memory. The Access Port can have several data exchange interfaces, such as APB (Advanced Peripheral Bus), AHB (Advanced High-performance Bus), and AXI (Advanced eXtensible Interface), which are used to access various device resources. That is, access to all modules connected to the AHB bus, for example, will be provided through a special AHB-AP.</p>

<p>The approximate structural diagram of DAP is shown in the following figure:</p>

<figure class="figure mb-7">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_Diagram.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_Diagram.png" />
    </a>
  <figcaption class="figure-caption text-center">
    <br />Figure 1 - Debug Access Port (DAP)
  </figcaption>
</figure>

<p>Now let’s consider each component of DAP shown on this block diagram.</p>

<div class="alert alert-warning" role="alert">
  <b>Note:</b> Despite the fact that this article was written on the basis of official documentation from Arm, nevertheless, not all topics are covered in it, so for detailed information you need to refer to the documentation.
</div>

<h2 id="debug-port-dp">Debug Port (DP)</h2>

<h3 id="jtag-debug-port-jtag-dp">JTAG Debug Port (JTAG-DP)</h3>

<p>Since JTAG-DP must support the operation of the microcontroller via the JTAG protocol, external connection is made through the JTAG standard pins:</p>

<figure class="figure mb-7">
  <table class="table table-sm table-striped table-bordered" style="text-align: center">
    <thead class="thead">
      <tr class="table-dark">
        <th scope="col">JTAG-DP pin</th>
        <th scope="col">JTAG pin</th>
        <th scope="col">Direction</th>
        <th scope="col">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>DBGTDI</td>
        <td>TDI</td>
        <td>INPUT</td>
        <td>Debug Data In</td>
      </tr>
      <tr>
        <td>DBGTDO</td>
        <td>TDO</td>
        <td>OUTPUT</td>
        <td>Debug Data Out</td>
      </tr>
      <tr>
        <td>TCK</td>
        <td>TCK</td>
        <td>INPUT</td>
        <td>Debug Clock</td>
      </tr>
      <tr>
        <td>DBGTMS</td>
        <td>TMS</td>
        <td>INPUT</td>
        <td>Debug Mode Select</td>
      </tr>
      <tr>
        <td>DBGTRSTn</td>
        <td>TRST</td>
        <td>INPUT</td>
        <td>Debug TAP Reset</td>
      </tr>
    </tbody>
  </table>
  <figcaption class="figure-caption text-center">
    Table 1 - JTAG pinout
  </figcaption>
</figure>

<p>The JTAG-DP wire-level interface is through scan chains and comprises:</p>

<ul>
  <li>
    <p>a Debug TAP State Machine (DBGTAPSM) - This state machine is the cornerstone of the JTAG protocol and will be discussed in detail in the next article dedicated to this protocol.</p>
  </li>
  <li>
    <p>an Instruction Register (IR) and associated IR scan chain, used to control the behavior of the JTAG-DP and the currently-selected data register. The specific data register we want to work with is selected by writing various commands to this register.</p>
  </li>
  <li>
    <p>several Data Registers (DRs) and associated DR scan chains.</p>
  </li>
</ul>

<h4 class="no_toc" id="jtag-registers">JTAG Registers</h4>

<h5 id="instruction-register-ir">Instruction Register (IR)</h5>

<p>The Debug TAP State Machine is implemented with a 4-bit instruction register (<code class="language-plaintext highlighter-rouge">IR</code>).</p>

<p>The Instruction Register contains the current command for the DAP controller. This register serves as a kind of entry point when working with DAP over the JTAG protocol. You need to write a command to this register that will determine the data register you want to work with.</p>

<p>The list of commands for the <code class="language-plaintext highlighter-rouge">IR</code> register is presented in the following table:</p>

<figure class="figure mb-7">
  <table class="table table-sm table-striped table-bordered" style="text-align: center">
    <thead class="thead">
      <tr class="table-dark">
        <th scope="col">IR instruction value</th>
        <th scope="col">DR name</th>
        <th scope="col">DR length</th>
        <th scope="col">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>b1000</td>
        <td>ABORT</td>
        <td>35</td>
        <td>JTAG-DP Abort Register</td>
      </tr>
      <tr>
        <td>b1010</td>
        <td>DPACC</td>
        <td>35</td>
        <td>JTAG-DP DP Register</td>
      </tr>
      <tr>
        <td>b1011</td>
        <td>APACC</td>
        <td>35</td>
        <td>JTAG-DP AP Register </td>
      </tr>
      <tr>
        <td>b1110</td>
        <td>IDCODE</td>
        <td>32</td>
        <td>Device ID Code Register</td>
      </tr>
      <tr>
        <td>b1111</td>
        <td>BYPASS</td>
        <td>1</td>
        <td>JTAG-DP Bypass Register</td>
      </tr>
    </tbody>
  </table>
  <figcaption class="figure-caption text-center">
    Table 2 - List of standard JTAG commands supported by DAP
  </figcaption>
</figure>

<h5 id="abort-instruction">ABORT Instruction</h5>

<p>The <code class="language-plaintext highlighter-rouge">ABORT</code> command in JTAG-DP is used to interrupt the execution of the current debugging operation and return control to the debugger. It allows performing a so-called <em>debug reset</em> of the processor.</p>

<p>During the debugging of a processor, the debugger establishes a connection with JTAG-DP and sends commands to read and write registers, execute instructions, etc. In some situations, there may be a need to interrupt the execution of the current debugging operation and return control to the debugger.</p>

<p>For example, in case of program hang or when there is an error in the debugging script. In such situations, the debugger can use the <code class="language-plaintext highlighter-rouge">ABORT</code> register to perform a <em>debug reset</em> of the processor and return control to the debugger.</p>

<h5 id="bypass-instruction">BYPASS Instruction</h5>

<p>The <code class="language-plaintext highlighter-rouge">BYPASS</code> command connects the TDI and TDO pins directly through a one-bit register called <code class="language-plaintext highlighter-rouge">BYPASS</code>. This command can be used to bypass some components connected to the JTAG chain. It may not be very clear now, but this command is closely related to the operation principle of the JTAG protocol and it’s difficult to explain it without discussing this principle. The next article will be dedicated to the JTAG protocol, so let’s postpone the explanation of this command for now. It’s not necessary for understanding the information in the current article.</p>

<h5 id="idcode-instruction">IDCODE Instruction</h5>

<p>The <code class="language-plaintext highlighter-rouge">IDCODE</code> command is used to identify the microchip connected to the JTAG chain. This command connects the <code class="language-plaintext highlighter-rouge">IDCODE</code> register, which contains a unique 32-bit identifier for the microchip, as the data register.</p>

<p>Reading the <code class="language-plaintext highlighter-rouge">IDCODE</code> register can be useful for verifying that the microchip corresponds to the expected model or version, as well as for checking the integrity and proper functioning of the JTAG chain.</p>

<h5 id="dpacc-instruction">DPACC Instruction</h5>

<p>The <code class="language-plaintext highlighter-rouge">DPACC</code> command connects the 35-bit <code class="language-plaintext highlighter-rouge">DPACC</code> (Debug Port Access) register as the data register, which is used to access some Debug Port registers.</p>

<h5 id="apacc-instruction">APACC Instruction</h5>

<p>The <code class="language-plaintext highlighter-rouge">APACC</code> command connects the 35-bit <code class="language-plaintext highlighter-rouge">APACC</code> (Access Port Access) register as the data register, which is used to access registers of the selected Access Port.</p>

<h4 class="no_toc" id="data-register-dr">Data Register (DR)</h4>

<p>The Data Register is a JTAG register through which all communication with one of the five registers listed in Table 1 occurs. In other words, by specifying the code of one of the five registers in the <code class="language-plaintext highlighter-rouge">IR</code> register, you are connecting the <code class="language-plaintext highlighter-rouge">DR</code> register to the selected register and any read or write operation to the <code class="language-plaintext highlighter-rouge">DR</code> register will be mapped to the selected register.</p>

<h3 id="debug-port-registers">Debug Port Registers</h3>

<p>The DP is responsible for configuring the debug module, controlling power and reset, and monitoring various errors that may occur during DAP operation. Special registers, such as <code class="language-plaintext highlighter-rouge">ABORT</code>, <code class="language-plaintext highlighter-rouge">IDCODE</code>, <code class="language-plaintext highlighter-rouge">CTRL/STAT</code>, and <code class="language-plaintext highlighter-rouge">SELECT</code> are responsible for all of these tasks.</p>

<h4 class="no_toc" id="abort-register-abort">Abort Register (ABORT)</h4>

<p>The Abort Register is always present on all DP implementations. Its main purpose is to force a DAP abort.</p>

<figure class="figure mb-7">
  <table class="table table-sm table-striped table-bordered" style="text-align: center">
    <thead class="thead">
      <tr class="table-dark">
        <th scope="col">Bits</th>
        <th scope="col">Access</th>
        <th scope="col">Function</th>
        <th scope="col">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>[1:31]</td>
        <td>RO</td>
        <td>-</td>
        <td>Reserved</td>
      </tr>
      <tr>
        <td>[0]</td>
        <td>WO</td>
        <td>DAPABORT</td>
        <td>Write 1 to this bit to generate a DAP abort. This aborts the current AP transaction. Do this only if the debugger has received WAIT responses over an extended period.</td>
      </tr>
    </tbody>
  </table>
  <figcaption class="figure-caption text-center">
    Table 3 - DP ABORT register bits
  </figcaption>
</figure>

<p>When working with this register within JTAG-DP, the only writable bit is the <code class="language-plaintext highlighter-rouge">DAPABORT</code> bit. Writing to the other bits of this register results in undefined behavior according to the documentation.</p>

<h4 class="no_toc" id="id-code-register-idcode">ID Code Register (IDCODE)</h4>

<p>The Identification Code Register is always present on all DP implementations. It provides identification information about the ARM Debug Interface.</p>

<figure class="figure mb-7">
  <table class="table table-sm table-striped table-bordered" style="text-align: center">
    <thead class="thead">
      <tr class="table-dark">
        <th scope="col">Bits</th>
        <th scope="col">Access</th>
        <th scope="col">Function</th>
        <th scope="col">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>[31:28]</td>
        <td>RO</td>
        <td>Version</td>
        <td>Version code</td>
      </tr>
      <tr>
        <td>[27:12]</td>
        <td>RO</td>
        <td>PARTNO</td>
        <td>Part Number for the JTAG-DP - 0xBA00</td>
      </tr>
      <tr>
        <td>[11:1]</td>
        <td>RO</td>
        <td>DESIGNER</td>
        <td>JEDEC Designer ID, an 11-bit JEDEC code that identifies the designer of the ADI implementation - 0x23B</td>
      </tr>
      <tr>
        <td>[0]</td>
        <td>RO</td>
        <td>-</td>
        <td>Always</td>
      </tr>
    </tbody>
  </table>
  <figcaption class="figure-caption text-center">
    Table 4 - DP IDCODE register bits
  </figcaption>
</figure>

<h4 class="no_toc" id="controlstatus-register-ctrlstat">Control/Status Register (CTRL/STAT)</h4>

<p>The <code class="language-plaintext highlighter-rouge">CTRL/STAT</code> register is always present on all DP implementations. It provides control of the DP and status information about the DP.</p>

<figure class="figure mb-7">
  <table class="table table-sm table-striped table-bordered" style="text-align: center">
    <thead class="thead">
      <tr class="table-dark">
        <th scope="col">Bits</th>
        <th scope="col">Access</th>
        <th scope="col">Function</th>
        <th scope="col">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>[31]</td>
        <td>RO</td>
        <td>CSYSPWRUPACK</td>
        <td>System power-up acknowledge</td>
      </tr>
      <tr>
        <td>[30]</td>
        <td>R/W</td>
        <td>CSYSPWRUPREQ</td>
        <td>System power-up request</td>
      </tr>
      <tr>
        <td>[29]</td>
        <td>RO</td>
        <td>CDBGPWRUPACK</td>
        <td>Debug power-up acknowledge</td>
      </tr>
      <tr>
        <td>[28]</td>
        <td>R/W</td>
        <td>CDBGPWRUPREQ</td>
        <td>Debug power-up request</td>
      </tr>
      <tr>
        <td>[27]</td>
        <td>RO</td>
        <td>CDBGRSTACK</td>
        <td>Debug reset acknowledge</td>
      </tr>
      <tr>
        <td>[26]</td>
        <td>R/W</td>
        <td>CDBGRSTREQ</td>
        <td>Debug reset request</td>
      </tr>
      <tr>
        <td>[25:24]</td>
        <td>-</td>
        <td>-</td>
        <td>Reserved, RAZ/SBZP</td>
      </tr>
      <tr>
        <td>[23:12]</td>
        <td>R/W</td>
        <td>TRNCNT</td>
        <td>Transaction counter</td>
      </tr>
      <tr>
        <td>[11:8]</td>
        <td>R/W</td>
        <td>MASKLANE</td>
        <td>Indicates the bytes to be masked in pushed compare and pushed verify operations</td>
      </tr>
      <tr>
        <td>[7]</td>
        <td>RO</td>
        <td>WDATAERR</td>
        <td>Set if a Write Data Error occurs</td>
      </tr>
      <tr>
        <td>[6]</td>
        <td>RO</td>
        <td>READOK</td>
        <td>This bit is set to 1 if the response to the previous AP or RDBUFF read was OK</td>
      </tr>
      <tr>
        <td>[5]</td>
        <td>RO</td>
        <td>STICKYERR</td>
        <td>Set if an error is returned by an AP transaction</td>
      </tr>
      <tr>
        <td>[4]</td>
        <td>RO</td>
        <td>STICKYCMP</td>
        <td>This bit is set to 1 when a match occurs on a pushed compare or a pushed verify operation</td>
      </tr>
      <tr>
        <td>[3:2]</td>
        <td>R/W</td>
        <td>TRNMODE</td>
        <td>Transfer mode for AP operations: 00 = Normal operation, 01 = Pushed verify operation, 10 = Pushed compare operation, 11 = Reserved.</td>
      </tr>
      <tr>
        <td>[1]</td>
        <td>RO</td>
        <td>STICKYORUN</td>
        <td>Overrun error flag</td>
      </tr>
      <tr>
        <td>[0]</td>
        <td>R/W</td>
        <td>ORUNDETECT</td>
        <td>This bit is set to 1 to enable overrun detection</td>
      </tr>
    </tbody>
  </table>
  <figcaption class="figure-caption text-center">
    Table 5 - DP CTRL/STAT register bits
  </figcaption>
</figure>

<p>Let’s take a closer look at the bits of this register.</p>

<h5 id="sticky-flags-and-dp-error-responses">Sticky flags and DP error responses</h5>

<p>A read or write error might occur within the DAP, or come from the resource being accessed. In either case, when the error is detected the Sticky Error flag, <code class="language-plaintext highlighter-rouge">STICKYERR</code>, in the <code class="language-plaintext highlighter-rouge">CTRL/STAT</code> Register is set to 1. A read/write error also might be generated if the debugger makes an AP transaction request while the debug power domain is powered down.</p>

<p>If a debugger issue <code class="language-plaintext highlighter-rouge">APACC</code> too fast, overrun may happen, the DP can be programmed so that if an overrun error occurs, the DP set the <code class="language-plaintext highlighter-rouge">STICKYORUN</code> flag in the <code class="language-plaintext highlighter-rouge">CTRL/STAT</code> register. But if overrun detection is on, the debugger must check for overrun errors after each sequence of APACC transactions, the DP will also no longer send FAULT response and WAIT response.</p>

<p>In any case, if a debugger receives a FAULT response from the DP, it must read the <code class="language-plaintext highlighter-rouge">CTRL/STAT</code> register to check the sticky flags.</p>

<h5 id="the-transaction-counter">The transaction counter</h5>

<p>The DP includes an AP transaction counter, <code class="language-plaintext highlighter-rouge">TRNCNT</code>, which enables a debugger to make a single AP transaction request to generate a sequence of AP transactions, thus accelerating code download or memory fill operations. The <code class="language-plaintext highlighter-rouge">TRNCNT</code> maps onto the <code class="language-plaintext highlighter-rouge">CTRL/STAT[23:12]</code> bitfield, and writing a value N (N&gt;=0) to this field generates N+1 AP transaction(s). If <code class="language-plaintext highlighter-rouge">TRNCNT</code> is not zero, it is decremented after each successful transaction, but it is not decremented when there are any sticky flags set. When reaches zero, <code class="language-plaintext highlighter-rouge">TRNCNT</code> does not auto-reload.</p>

<h5 id="power-control">Power control</h5>

<p>This is to enable an external debugger to connect to a potentially turned-off system and power up as much as required to get a basic level of debug access with a minimal understanding of the system.</p>

<p>The DAP model supports multiple power domains; there can be three power domains:</p>

<ul>
  <li>Always on domain</li>
  <li>System power domain</li>
  <li>Debug power domain</li>
</ul>

<p>The DP registers reside in the always-on domain, and there are two control bits in the <code class="language-plaintext highlighter-rouge">CTRL/STAT</code> register:</p>

<ul>
  <li>Bit [28], <code class="language-plaintext highlighter-rouge">CDBGPWRUPREQ</code>, used to request the system’s power manager to fully power up and enable clocks in the debug power domain.</li>
  <li>Bit [30], <code class="language-plaintext highlighter-rouge">CSYSPWRUPREQ</code>, used to request the system’s power manager to fully power up and enable clocks in the system power domain.</li>
</ul>

<div class="alert alert-warning" role="alert">
  <b>Note:</b> Both bits need to be set during initialization, to ensure the MCU is fully powered up and clocks are enabled.
</div>

<h5 id="debug-reset-control">Debug Reset Control</h5>

<p>The DP <code class="language-plaintext highlighter-rouge">CTRL/STAT</code> register provides bits [27:26], for reset control of the debug domain. The debug domain controlled by these signals covers the internal DAP and the connection between the DAP and the debug components, for example, the debug bus. The two bits provide a debug reset request, <code class="language-plaintext highlighter-rouge">CDBGRSTREQ</code>, and a reset acknowledge, <code class="language-plaintext highlighter-rouge">CDBGRSTACK</code>, and the associated signals provide a connection to a system reset controller. The DP registers are in the always-on power domain on the external interface side of the DP. Therefore, the registers can be driven at any time, to generate a reset request to the system reset controller.</p>

<h4 class="no_toc" id="ap-select-register-select">AP Select Register, SELECT</h4>

<p>The AP Select Register is always present on all DP implementations. Its main purpose is to select the current Access Port (AP) and the active four-word register bank within that AP.</p>

<figure class="figure mb-7">
  <table class="table table-sm table-striped table-bordered" style="text-align: center">
    <thead class="thead">
      <tr class="table-dark">
        <th scope="col">Bits</th>
        <th scope="col">Function</th>
        <th scope="col">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>[31:24]</td>
        <td>APSEL</td>
        <td>Selects the current AP (AHB-AP, APB-AP, JTAG-AP)</td>
      </tr>
      <tr>
        <td>[23:8]</td>
        <td>-</td>
        <td>Reserved</td>
      </tr>
      <tr>
        <td>[7:4]</td>
        <td>APBANKSEL</td>
        <td>Select the active four-word register bank on the current AP</td>
      </tr>
      <tr>
        <td>[3:1]</td>
        <td>-</td>
        <td>Reserved</td>
      </tr>
      <tr>
        <td>[0]</td>
        <td>-</td>
        <td>Always</td>
      </tr>
    </tbody>
  </table>
  <figcaption class="figure-caption text-center">
    Table 6 - DP SELECT register bits
  </figcaption>
</figure>

<h5 id="ap-selection">AP selection</h5>

<p>As DAP can contain multiple APs, we need to have the ability to select a specific AP with which we want to work at the moment. And it is the <code class="language-plaintext highlighter-rouge">APSEL</code> bits that are responsible for this selection. They specify the number of the AP that will be used for access.</p>

<h5 id="bank-of-registers-selection">Bank of registers selection</h5>

<p>The <code class="language-plaintext highlighter-rouge">APBANKSEL</code> bits are used to select the register bank to which access will be made. Register banks are used to organize registers associated with specific functional blocks within the microcontroller. For example, a register bank may be allocated for the core processor debug registers, while another bank may be allocated for the peripheral device debug registers.</p>

<h3 id="accessing-the-dp-registers">Accessing the DP registers</h3>

<p>As mentioned earlier, to access the DP registers <code class="language-plaintext highlighter-rouge">CTRL/STAT</code> and <code class="language-plaintext highlighter-rouge">SELECT</code>, the <code class="language-plaintext highlighter-rouge">DPACC</code> register is used, and working with this register has its own peculiarities. Let’s take a closer look at the algorithm for accessing the DP registers.</p>

<p>DP registers can be divided into two categories: control registers and access registers. Control registers contain information about the state of the debug logic, such as the status of command execution or the reset state. Access registers are used to read and write data from registers that control the operation of the debug logic.</p>

<p>In this context, we will focus on the DP access registers, which provide access to the debug logic. DP access registers can be addressed through the <code class="language-plaintext highlighter-rouge">DPACC</code> register and include control registers (<code class="language-plaintext highlighter-rouge">CTRL/STAT</code> and <code class="language-plaintext highlighter-rouge">SELECT</code>), access registers to the application logic (<code class="language-plaintext highlighter-rouge">APACC</code>), bypass register (<code class="language-plaintext highlighter-rouge">BYPASS</code>), and device identification register (<code class="language-plaintext highlighter-rouge">IDCODE</code>). Working with these registers has its own peculiarities and requires knowledge of the <code class="language-plaintext highlighter-rouge">DPACC</code> register format, which we will discuss further.</p>

<h4 class="no_toc" id="dpacc-register-format">DPACC register format</h4>

<p>The <code class="language-plaintext highlighter-rouge">DPACC</code> register has a size of 35 bits and its format depends on the operation (read or write) we want to perform.</p>

<h5 id="format-for-writing">Format for writing:</h5>

<figure class="figure mb-7">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_dpacc_write_format.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_dpacc_write_format.png" />
    </a>
  <figcaption class="figure-caption text-center">
    <br />Picture 2 - DPACC register write format
  </figcaption>
</figure>

<ul>
  <li>D - these are data bits. That is, in these 32 bits, you store the value you want to write to the selected register.</li>
  <li>A - these are address bits of the DP register. These two bits determine the specific DP register you want to work with:</li>
</ul>

<figure class="figure mb-7">
  <table class="table table-sm table-striped table-bordered" style="text-align: center">
    <thead class="thead">
      <tr class="table-dark">
        <th scope="col">Address</th>
        <th scope="col">A[3:2]</th>
        <th scope="col">Register</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x04</td>
        <td>[01]</td>
        <td>CTRL/STAT</td>
      </tr>
      <tr>
        <td>0x08</td>
        <td>[10]</td>
        <td>SELECT</td>
      </tr>
    </tbody>
  </table>
  <figcaption class="figure-caption text-center">
    Table 7 - A[3:2] bits for DPACC
  </figcaption>
</figure>

<div class="alert alert-warning" role="alert">
  <b>Note:</b> <b>DR</b> register in JTAG-DP is like a common register for five data registers (<b>ABORT</b>, <b>BYPASS</b>, <b>IDCODE</b>, <b>DPACC</b>, <b>APACC</b>), and by writing or reading data from/to it, you write/read data to/from one of the five data registers selected by the command in the <b>IR</b> register. Similarly, for working with the <b>CTRL/STAT</b> and <b>SELECT</b> registers, when you select the <b>DPACC</b> register for operation with the <b>DPACC</b> command in the <b>IR</b> register, the <b>DR</b> register is mapped to the <b>DPACC</b> register, and the <b>DPACC</b> register is mapped to one of the shared DP registers: <b>CTRL/STAT</b> or <b>SELECT</b>. This results in a chain of registers: <b>DR --&gt; DPACC --&gt; CTRL/STAT</b> or <b>SELECT</b>, for example. Therefore, by writing/reading data to/from the <b>DR</b> register, you write/read data to/from the <b>CTRL/STAT</b> or <b>SELECT</b> register.
</div>

<ul>
  <li>RnW - this bit for the write operation has the value 0.</li>
</ul>

<h5 id="format-for-reading">Format for reading:</h5>

<figure class="figure mb-7">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_dpacc_read_format.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_dpacc_read_format.png" />
    </a>
  <figcaption class="figure-caption text-center">
    <br />Picture 3 - DPACC register read format
  </figcaption>
</figure>

<ul>
  <li>D - these are data bits. I.e. in these 32 bits you get the value read from the register.</li>
  <li>ACK[2:0] - Acknowledge of read operation:</li>
</ul>

<figure class="figure mb-7">
  <table class="table table-sm table-striped table-bordered" style="text-align: center">
    <thead class="thead">
      <tr class="table-dark">
        <th scope="col">ACK</th>
        <th scope="col">Value</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0b010</td>
        <td>OK/FAULT</td>
      </tr>
      <tr>
        <td>0b001</td>
        <td>WAIT</td>
      </tr>
    </tbody>
  </table>
  <figcaption class="figure-caption text-center">
    Table 8 - Acknowledge codes
  </figcaption>
</figure>

<h4 class="no_toc" id="operation-algorithm">Operation algorithm</h4>

<p>Now let’s step by step go through the algorithms for writing/reading a new value to/from the DP register:</p>

<h5 id="algorithm-for-writing">Algorithm for writing</h5>

<ul>
  <li>Write the value <code class="language-plaintext highlighter-rouge">0b1010</code> (the code for the <code class="language-plaintext highlighter-rouge">DPACC</code> register) to the <code class="language-plaintext highlighter-rouge">IR</code> register.</li>
  <li>Write 35 bits to the <code class="language-plaintext highlighter-rouge">DR</code> register according to the format described above:
    <ul>
      <li>DATA[31:0] - the data we want to write</li>
      <li>A[3:2] - the selected register</li>
      <li>RnW - <code class="language-plaintext highlighter-rouge">0b0</code></li>
    </ul>
  </li>
</ul>

<h5 id="algorithm-for-reading">Algorithm for reading</h5>

<ul>
  <li>Write the value <code class="language-plaintext highlighter-rouge">0b1010</code> (the code for the <code class="language-plaintext highlighter-rouge">DPACC</code> register) to the <code class="language-plaintext highlighter-rouge">IR</code> register.</li>
  <li>Write a <strong>request</strong> to read the register to the <code class="language-plaintext highlighter-rouge">DR</code> register:
    <ul>
      <li>DATA[31:0] - <code class="language-plaintext highlighter-rouge">0x00</code></li>
      <li>A[3:2] - the selected register</li>
      <li>RnW - <code class="language-plaintext highlighter-rouge">0b1</code></li>
    </ul>
  </li>
  <li>Read 35 bits from the <code class="language-plaintext highlighter-rouge">DR</code> register:
    <ul>
      <li>DATA[31:0] - the data read from the register</li>
      <li>ACK[2:0] - Acknowledge code.</li>
    </ul>
  </li>
</ul>

<div class="alert alert-warning" role="alert">
  <b>Note:</b> As you may have noticed, during the read operation, we access the <b>DR</b> register twice. The first time, we form a <b>request</b> to read data from a specific register, i.e., we inform the microcontroller that we would like to read data from a particular register. The actual reading of the data happens during the second access to the <b>DR</b> register.
</div>

<h2 id="access-ports">Access Ports</h2>

<p>Access ports provide access to system resources such as debug registers, trace port registers, a ROM table, or system memory.</p>

<p>An ARM Debug Interface always includes at least one Access Port and might contain multiple APs. The simplest ARM Debug Interface uses a single AP to connect to a single debug component.</p>

<p>Multiple APs can be added to the DAP, depending on the needs. ARM provides specifications for two APs :</p>

<ul>
  <li><strong>Memory Access Port (MEM-AP)</strong>. This AP provides access to the core memory and registers.</li>
  <li><strong>JTAG Access Port (JTAG-AP)</strong>. This AP allows to connect a JTAG chain to the DAP.</li>
</ul>

<p>For this series of articles, the Memory Access Port is of the greatest interest, so we will focus on it. For information about the JTAG Access Port, please refer to the documentation.</p>

<h3 id="memory-access-port-registers">Memory Access Port Registers</h3>

<p>The specification for ARM DAP describes the following Memory Access Port registers:</p>

<figure class="figure mb-7">
  <table class="table table-sm table-striped table-bordered" style="text-align: center">
    <thead class="thead">
      <tr class="table-dark">
        <th scope="col">MEM-AP register</th>
        <th scope="col">Address</th>
        <th scope="col">Register bank (APBANKSEL)</th>
        <th scope="col">Offset (A[3:2])</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>CSW</td>
        <td>0x00</td>
        <td>0x00</td>
        <td>0b00</td>
      </tr>
      <tr>
        <td>TAR</td>
        <td>0x04</td>
        <td>0x00</td>
        <td>0b01</td>
      </tr>
      <tr>
        <td>DRW</td>
        <td>0x0C</td>
        <td>0x00</td>
        <td>0b11</td>
      </tr>
      <tr>
        <td>BD0</td>
        <td>0x10</td>
        <td>0x01</td>
        <td>0b00</td>
      </tr>
      <tr>
        <td>BD1</td>
        <td>0x14</td>
        <td>0x01</td>
        <td>0b01</td>
      </tr>
      <tr>
        <td>BD2</td>
        <td>0x18</td>
        <td>0x01</td>
        <td>0b10</td>
      </tr>
      <tr>
        <td>BD3</td>
        <td>0x1C</td>
        <td>0x01</td>
        <td>0b11</td>
      </tr>
      <tr>
        <td>CFG</td>
        <td>0xF4</td>
        <td>0x0F</td>
        <td>0b01</td>
      </tr>
      <tr>
        <td>BASE</td>
        <td>0xF8</td>
        <td>0x0F</td>
        <td>0b10</td>
      </tr>
      <tr>
        <td>IDR</td>
        <td>0xFC</td>
        <td>0x0F</td>
        <td>0b11</td>
      </tr>
    </tbody>
  </table>
  <figcaption class="figure-caption text-center">
    Table 9 - Memory Access Port registers
  </figcaption>
</figure>

<h4 class="no_toc" id="controlstatus-word-register-csw">Control/Status Word Register, CSW</h4>

<p>The <code class="language-plaintext highlighter-rouge">CSW</code> register is used to configure the access mode to the memory and peripheral devices of the ARM microcontroller.</p>

<p>Using the <code class="language-plaintext highlighter-rouge">CSW</code> register, you can configure parameters such as the size of the transmitted data (8, 16, or 32 bits), enable the auto-increment mode of the memory address to which access is made, and so on.</p>

<h4 class="no_toc" id="the-transfer-address-register-tar">The Transfer Address Register (TAR)</h4>

<p>This register is used to specify the address to be accessed through the AP. This address can be the address of a register, memory, or any other available address on the device.</p>

<p>When a new value is set in <code class="language-plaintext highlighter-rouge">TAR</code> in the AP, all subsequent read/write operations will be performed at the specified address until <code class="language-plaintext highlighter-rouge">TAR</code> is changed to another address and the auto-increment mode is turned off.</p>

<p>In general, before accessing any address through the AP, it is necessary to load this address into the <code class="language-plaintext highlighter-rouge">TAR</code>.</p>

<h4 class="no_toc" id="the-data-readwrite-register-drw">The Data Read/Write Register (DRW)</h4>

<p>The <code class="language-plaintext highlighter-rouge">DRW</code> (Data Register for Write) in the Access Port is used for writing data to or reading data from the target resource.</p>

<p>To write data to <code class="language-plaintext highlighter-rouge">DRW</code>, the address needs to be set in the <code class="language-plaintext highlighter-rouge">TAR</code> (Transfer Address Register), and the necessary access parameters need to be configured in <code class="language-plaintext highlighter-rouge">CSW</code>. After that, data can be written to <code class="language-plaintext highlighter-rouge">DRW</code> and transferred to the target resource. Similarly, to read data from the target resource, the access parameters in <code class="language-plaintext highlighter-rouge">CSW</code> need to be configured and the read address needs to be set in <code class="language-plaintext highlighter-rouge">TAR</code>. Then, the data from the target device will be transferred to <code class="language-plaintext highlighter-rouge">DRW</code>, ready to be read.</p>

<h4 class="no_toc" id="banked-data-registers-0-to-3-bd0-to-bd3">Banked Data Registers 0 to 3 (BD0 to BD3)</h4>

<p>The <code class="language-plaintext highlighter-rouge">BD0</code>, <code class="language-plaintext highlighter-rouge">BD1</code>, <code class="language-plaintext highlighter-rouge">BD2</code> and <code class="language-plaintext highlighter-rouge">BD3</code> registers in the Access Port are used for transferring/receiving data between the target device and the debugging system.</p>

<p>Using these registers can be useful when a large amount of data needs to be transferred or when a higher data transfer speed is required than what is possible with the <code class="language-plaintext highlighter-rouge">TAR</code> and <code class="language-plaintext highlighter-rouge">DRW</code> registers. Together, these four Banked Data Registers provide access to four words of memory space, starting at the address specified in the <code class="language-plaintext highlighter-rouge">TAR</code>. However, transferring data through the <code class="language-plaintext highlighter-rouge">BD0</code>, <code class="language-plaintext highlighter-rouge">BD1</code>, <code class="language-plaintext highlighter-rouge">BD2</code> and <code class="language-plaintext highlighter-rouge">BD3</code> registers requires more complex logic than transferring through the <code class="language-plaintext highlighter-rouge">TAR</code> and <code class="language-plaintext highlighter-rouge">DRW</code> registers and may require additional software to manage these registers.</p>

<h4 class="no_toc" id="configuration-register-cfg">Configuration Register (CFG)</h4>

<p>The CFG Register holds information about the configuration of the MEM-AP. In particular, it indicates whether accesses to the connected memory system are big-endian or little-endian.</p>

<h4 class="no_toc" id="debug-base-address-register-base">Debug Base Address Register (BASE)</h4>

<p>The BASE Register is a pointer to the connected memory system. It points to one of:
	- the start of a set of debug registers for the single connected debug component
	- the start of a ROM Table that describes the connected debug components</p>

<h4 class="no_toc" id="identification-register-idr">Identification Register (IDR)</h4>

<p>The IDR identifies the Memory Access Port.
The IDR is the only register that must be implemented by any Access Port.</p>

<h3 id="addressing-of-ap-registers">Addressing of AP Registers</h3>

<p>One of the four registers within the DP is the AP Select Register (<code class="language-plaintext highlighter-rouge">SELECT</code>). This register specifies a particular Access Port and a bank of four 32-bit words within the register map of that AP.</p>

<p>In any AP access transaction from the debugger, the two address bits A[3:2] are decoded to select one of the four 32-bit words from the register bank indicated by the <code class="language-plaintext highlighter-rouge">SELECT</code> register (see Table 9). In other words, they select a specific register within the selected four-register bank.</p>

<p>This access model is shown in Figure 4 shows how the contents of the <code class="language-plaintext highlighter-rouge">SELECT</code> register are combined with the A[3:2] bits of the <code class="language-plaintext highlighter-rouge">APACC</code> scan-chain to form the address of a register in an AP.</p>

<figure class="figure mb-7">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_ap_addr_creation.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_ap_addr_creation.png" />
    </a>
  <figcaption class="figure-caption text-center">
    <br />Figure 4 - MEM-AP access model
  </figcaption>
</figure>

<p>As can be seen in this figure, Memory Access Port registers are all 32-bit long (4 bytes), two fields in the DP <code class="language-plaintext highlighter-rouge">SELECT</code> register select the AP (<code class="language-plaintext highlighter-rouge">APSEL</code> field) and the register bank in the AP (<code class="language-plaintext highlighter-rouge">APBANKSEL</code> field), and finally, the <code class="language-plaintext highlighter-rouge">A[3:2]</code> field of <code class="language-plaintext highlighter-rouge">APACC</code> specify the exact AP register in the bank.</p>

<h3 id="accessing-the-ap-registers">Accessing the AP registers</h3>

<p>The situation with accessing the AP registers is the same as accessing the DP registers, except that instead of the <code class="language-plaintext highlighter-rouge">DPACC</code> register, the <code class="language-plaintext highlighter-rouge">APACC</code> register is used. When you write <code class="language-plaintext highlighter-rouge">APACC</code> command in the <code class="language-plaintext highlighter-rouge">IR</code> register, the <code class="language-plaintext highlighter-rouge">DR</code> register is mapped to the <code class="language-plaintext highlighter-rouge">APACC</code> register and the <code class="language-plaintext highlighter-rouge">APACC</code> register is mapped to one of the common AP registers defined in Table 9. This creates a chain of registers: <code class="language-plaintext highlighter-rouge">DR --&gt; APACC --&gt; AP Reg</code>.</p>

<h4 class="no_toc" id="apacc-register-format">APACC register format</h4>

<p>These registers also have a size of 35 bits, and the value of the bits depends on whether we write something to these registers or read from them.</p>

<h5 id="format-for-writing-1">Format for writing:</h5>

<figure class="figure mb-7">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_dpacc_write_format.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_dpacc_write_format.png" />
    </a>
  <figcaption class="figure-caption text-center">
    <br />Figure 5 - APACC register write format
  </figcaption>
</figure>

<ul>
  <li>D - This is the data bits. In these 32 bits, you store the value that you want to write to the selected register.</li>
  <li>A - These are the sub-address bits of the AP register. These two bits, together with four more bits from the DP register <code class="language-plaintext highlighter-rouge">SELECT</code>, determine the specific AP register you want to work with:</li>
</ul>

<figure class="figure mb-7">
  <table class="table table-sm table-striped table-bordered" style="text-align: center">
    <thead class="thead">
      <tr class="table-dark">
        <th scope="col">Address</th>
        <th scope="col">A[3:2]</th>
        <th scope="col">Register</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00</td>
        <td>[00]</td>
        <td>CSW</td>
      </tr>
      <tr>
        <td>0x04</td>
        <td>[01]</td>
        <td>TAR</td>
      </tr>
      <tr>
        <td>0x0C</td>
        <td>[11]</td>
        <td>DRW</td>
      </tr>
      <tr>
        <td>0x10</td>
        <td>[00]</td>
        <td>BD0</td>
      </tr>
      <tr>
        <td>0x14</td>
        <td>[01]</td>
        <td>BD1</td>
      </tr>
      <tr>
        <td>0x18</td>
        <td>[10]</td>
        <td>BD2</td>
      </tr>
      <tr>
        <td>0x1C</td>
        <td>[11]</td>
        <td>BD3</td>
      </tr>
      <tr>
        <td>0xF4</td>
        <td>[01]</td>
        <td>CFG</td>
      </tr>
      <tr>
        <td>0xF8</td>
        <td>[10]</td>
        <td>BASE</td>
      </tr>
      <tr>
        <td>0xFC</td>
        <td>[11]</td>
        <td>IDR</td>
      </tr>
    </tbody>
  </table>
  <figcaption class="figure-caption text-center">
    Table 10 - A[3:2] for MEM-AP registers
  </figcaption>
</figure>

<ul>
  <li>RnW - This bit has a value of 0 for a write operation.</li>
</ul>

<h5 id="format-for-reading-1">Format for reading:</h5>

<figure class="figure mb-7">
    <a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_dpacc_read_format.png&quot;}" href="#">
      <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-05-09-diving-into-arm-debug-access-port/DAP_dpacc_read_format.png" />
    </a>
  <figcaption class="figure-caption text-center">
    <br />Figure 6 - APACC register read format
  </figcaption>
</figure>

<ul>
  <li>DATA[31:0] - These are data bits. In other words, these 32 bits contain the value that you read from the selected register.</li>
  <li>
    <p>Bits 2:0 (ACK[2:0]) = 3-bit Acknowledge of read operation:</p>

    <ul>
      <li>0b010 = OK/FAULT</li>
      <li>0b001 = WAIT</li>
    </ul>
  </li>
</ul>

<h4 class="no_toc" id="operation-algorithm-1">Operation algorithm</h4>

<p>Now let’s go step-by-step through the algorithms for writing/reading a new value to/from an AP register:</p>

<h5 id="algorithm-for-writing-1">Algorithm for writing</h5>

<ul>
  <li>Write the <code class="language-plaintext highlighter-rouge">DPACC</code> command (<code class="language-plaintext highlighter-rouge">0b1010</code>) to the <code class="language-plaintext highlighter-rouge">IR</code> register</li>
  <li>Write 35 bits to the <code class="language-plaintext highlighter-rouge">DR</code> register in which we indicate that we are working with the <code class="language-plaintext highlighter-rouge">SELECT</code> register and write the corresponding values of the APSEL[31:24] and APBANKSEL[7:4] bits to this register:
    <ul>
      <li>DATA [31:0]:
        <ul>
          <li>APSEL[31:24] - select the desired AP</li>
          <li>APBANKSEL[7:4] - select the desired bank of registers</li>
        </ul>
      </li>
      <li>A[3:2] - <code class="language-plaintext highlighter-rouge">0b10</code> - address of <code class="language-plaintext highlighter-rouge">SELECT</code> register (see Table 7)</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b0</code></li>
    </ul>
  </li>
  <li>Write the <code class="language-plaintext highlighter-rouge">APACC</code> command (<code class="language-plaintext highlighter-rouge">0b1011</code>) to the <code class="language-plaintext highlighter-rouge">IR</code> register</li>
  <li>Write the data to the <code class="language-plaintext highlighter-rouge">DR</code> register according to the described bit values (see Figure 5):
    <ul>
      <li>DATA[31:0] = data which need to be written</li>
      <li>A[3:2] = Address of Memory Access Port register (see Table 9).</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b0</code></li>
    </ul>
  </li>
</ul>

<h5 id="algorithm-for-reading-1">Algorithm for reading</h5>

<ul>
  <li>Write the <code class="language-plaintext highlighter-rouge">DPACC</code> command (<code class="language-plaintext highlighter-rouge">0b1010</code>) to the <code class="language-plaintext highlighter-rouge">IR</code> register</li>
  <li>Write 35 bits to the <code class="language-plaintext highlighter-rouge">DR</code> register in which we indicate that we are working with the <code class="language-plaintext highlighter-rouge">SELECT</code> register and write the corresponding values of the APSEL[31:24] and APBANKSEL[7:4] bits to this register:
    <ul>
      <li>DATA[31:0]:
        <ul>
          <li>APSEL[31:24] - select the desired AP</li>
          <li>APBANKSEL[7:4] - select the desired bank of registers</li>
        </ul>
      </li>
      <li>A[3:2] - <code class="language-plaintext highlighter-rouge">0b10</code> - address of <code class="language-plaintext highlighter-rouge">SELECT</code> register (see Table 7).</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b1</code></li>
    </ul>
  </li>
  <li>Write the <code class="language-plaintext highlighter-rouge">APACC</code> command (<code class="language-plaintext highlighter-rouge">0b1011</code>) to the <code class="language-plaintext highlighter-rouge">IR</code> register</li>
  <li>Create the data read request. Write in <code class="language-plaintext highlighter-rouge">DR</code> next data:
    <ul>
      <li>DATA[31:0] = <code class="language-plaintext highlighter-rouge">0x00000000</code></li>
      <li>A[3:2] = Address of Memory Access Port register (see Table 9).</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b1</code></li>
    </ul>
  </li>
  <li>Read 35 bits from the <code class="language-plaintext highlighter-rouge">DR</code> register</li>
  <li>Check the values of the ACK[2:0] bits and if they are not equal to <code class="language-plaintext highlighter-rouge">OK/FAULT (0b001)</code>, then the data was read, if it is equal to <code class="language-plaintext highlighter-rouge">WAIT (0b001)</code>, we need to repeat the reading because the data is not ready.</li>
</ul>

<h2 id="practical-part">Practical Part</h2>

<p>Let’s take an example of an algorithm for writing values to the memory of a microcontroller and reading data from memory.</p>

<h3 id="writing-a-variable-to-memory">Writing a variable to memory</h3>

<p>Let’s try to write the value <code class="language-plaintext highlighter-rouge">0xAA55AA55</code> to the memory cell at address <code class="language-plaintext highlighter-rouge">0x20000000</code></p>

<ol>
  <li>Write <code class="language-plaintext highlighter-rouge">0b1010</code> (the <code class="language-plaintext highlighter-rouge">DPACC</code> register code) into the <code class="language-plaintext highlighter-rouge">IR</code> register.</li>
  <li>Some settings in the <code class="language-plaintext highlighter-rouge">AP</code> register <code class="language-plaintext highlighter-rouge">CSW</code> need to be configured. To access this register, we need to select the corresponding <code class="language-plaintext highlighter-rouge">AP</code> and register bank in the <code class="language-plaintext highlighter-rouge">DP SELECT</code> register. Write to the <code class="language-plaintext highlighter-rouge">DR</code> register:
    <ul>
      <li>DATA[31:0] = <code class="language-plaintext highlighter-rouge">0x00</code>
        <ul>
          <li>APSEL[31:24] = <code class="language-plaintext highlighter-rouge">0x00</code></li>
          <li>APBANKSEL[7:4] = <code class="language-plaintext highlighter-rouge">0x00</code></li>
        </ul>
      </li>
      <li>A[3:2] = <code class="language-plaintext highlighter-rouge">0b10</code> (address of <code class="language-plaintext highlighter-rouge">SELECT</code> register)</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b0</code></li>
    </ul>
  </li>
  <li>Next, we need to write the <code class="language-plaintext highlighter-rouge">CSW</code> register. Since this is an <code class="language-plaintext highlighter-rouge">AP</code> register, we need to use the <code class="language-plaintext highlighter-rouge">APACC</code> register to access it:
    <ul>
      <li>Write <code class="language-plaintext highlighter-rouge">0b1011</code> (the <code class="language-plaintext highlighter-rouge">APACC</code> register code) into the <code class="language-plaintext highlighter-rouge">IR</code> register.</li>
    </ul>
  </li>
  <li>Form the data for the configuration: set the data size for writing to 32-bits (<code class="language-plaintext highlighter-rouge">Size[0:2] = 0b010</code>), disable the auto-increment function of the address (<code class="language-plaintext highlighter-rouge">AddrInc[5:4] = 0b00</code>). Write to <code class="language-plaintext highlighter-rouge">DR</code>:
    <ul>
      <li>DATA[31:0] = <code class="language-plaintext highlighter-rouge">0x00000002</code></li>
      <li>A[3:2] = <code class="language-plaintext highlighter-rouge">0b00</code> (address of <code class="language-plaintext highlighter-rouge">CSW</code> register)</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b0</code></li>
    </ul>
  </li>
  <li>Then we need to set the address of the memory cell to which we want to write the data. This is done through the <code class="language-plaintext highlighter-rouge">AP</code> register <code class="language-plaintext highlighter-rouge">TAR</code>. And since this register belongs to the same <code class="language-plaintext highlighter-rouge">AP</code> as <code class="language-plaintext highlighter-rouge">CSW</code> and is in the same bank, we can omit the reference to the <code class="language-plaintext highlighter-rouge">DP SELECT</code> register and immediately write the address value. Write to <code class="language-plaintext highlighter-rouge">DR</code>:
    <ul>
      <li>DATA[31:0] = <code class="language-plaintext highlighter-rouge">0x20000000</code></li>
      <li>A[3:2] = <code class="language-plaintext highlighter-rouge">0b01</code> (address of <code class="language-plaintext highlighter-rouge">TAR</code> register)</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b0</code></li>
    </ul>
  </li>
  <li>The last step is to actually write the data. To do this, we need to write them to the <code class="language-plaintext highlighter-rouge">DRW</code> register. Write to <code class="language-plaintext highlighter-rouge">DRW</code>:
    <ul>
      <li>DATA[31:0] = <code class="language-plaintext highlighter-rouge">0xAA55AA55</code></li>
      <li>A[3:2] = <code class="language-plaintext highlighter-rouge">0b11</code> (address of <code class="language-plaintext highlighter-rouge">DRW</code> register)</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b0</code></li>
    </ul>
  </li>
</ol>

<h3 id="reading-a-variable-from-memory">Reading a variable from memory</h3>

<p>We know how to write data to memory, and now it’s time to read that data. The algorithm for reading largely repeats the steps for writing, but there are still some differences:</p>

<ol>
  <li>Write <code class="language-plaintext highlighter-rouge">0b1010</code> (the <code class="language-plaintext highlighter-rouge">DPACC</code> register code) into the <code class="language-plaintext highlighter-rouge">IR</code> register.</li>
  <li>We need to configure some settings in the <code class="language-plaintext highlighter-rouge">CSW</code> register of the <code class="language-plaintext highlighter-rouge">AP</code>. To access this register, we need to select the corresponding <code class="language-plaintext highlighter-rouge">AP</code> and register bank in the <code class="language-plaintext highlighter-rouge">DP SELECT</code> register. Using the data from the table, we form 35 bits of data that we write to the <code class="language-plaintext highlighter-rouge">DR</code> register:
    <ul>
      <li>DATA[31:0] = <code class="language-plaintext highlighter-rouge">0x00</code>
        <ul>
          <li>APSEL[31:24] = <code class="language-plaintext highlighter-rouge">0x00</code></li>
          <li>APBANKSEL[7:4] = <code class="language-plaintext highlighter-rouge">0x00</code></li>
        </ul>
      </li>
      <li>A[3:2] = <code class="language-plaintext highlighter-rouge">0b10</code> (address of <code class="language-plaintext highlighter-rouge">SELECT</code> register)</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b0</code></li>
    </ul>
  </li>
  <li>Next, we need to write directly to the <code class="language-plaintext highlighter-rouge">CSW</code> register. Since this is an <code class="language-plaintext highlighter-rouge">AP</code> register, we need to use the <code class="language-plaintext highlighter-rouge">APACC</code> register to access it:
    <ul>
      <li>Write <code class="language-plaintext highlighter-rouge">0b1011</code> (the <code class="language-plaintext highlighter-rouge">APACC</code> register code) into the <code class="language-plaintext highlighter-rouge">IR</code> register.</li>
    </ul>
  </li>
  <li>We form the data for configuration: we set the data size for writing to 32 bits (<code class="language-plaintext highlighter-rouge">Size[0:2] = 0b010</code>) and disable the auto-increment address function (<code class="language-plaintext highlighter-rouge">AddrInc[5:4] = 0b00</code>). Write to <code class="language-plaintext highlighter-rouge">DR</code>:
    <ul>
      <li>DATA[31:0] = <code class="language-plaintext highlighter-rouge">0x00000002</code></li>
      <li>A[3:2] = <code class="language-plaintext highlighter-rouge">0b00</code> (address of <code class="language-plaintext highlighter-rouge">CSW</code> register)</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b0</code></li>
    </ul>
  </li>
  <li>Next, we need to set the address of the memory cell from which we will read the data. This is done through the <code class="language-plaintext highlighter-rouge">TAR</code> register of the <code class="language-plaintext highlighter-rouge">AP</code>. And since this register belongs to the same <code class="language-plaintext highlighter-rouge">AP</code> as <code class="language-plaintext highlighter-rouge">CSW</code> and is in the same bank, we can skip the <code class="language-plaintext highlighter-rouge">DP SELECT</code> register access and immediately write the address value:
    <ul>
      <li>DATA[31:0] = <code class="language-plaintext highlighter-rouge">0x20000000</code></li>
      <li>A[3:2] = <code class="language-plaintext highlighter-rouge">0b01</code> (address of <code class="language-plaintext highlighter-rouge">TAR</code> register)</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b0</code></li>
    </ul>
  </li>
  <li>We form a read request. To do this, we write to the <code class="language-plaintext highlighter-rouge">DRW</code> register:
    <ul>
      <li>DATA[31:0] = <code class="language-plaintext highlighter-rouge">0x00</code></li>
      <li>A[3:2] = <code class="language-plaintext highlighter-rouge">0b11</code> (address of <code class="language-plaintext highlighter-rouge">DRW</code> register)</li>
      <li>RnW = <code class="language-plaintext highlighter-rouge">0b1</code></li>
    </ul>
  </li>
  <li>Read the <code class="language-plaintext highlighter-rouge">DRW</code> register by reading 35 bits from the <code class="language-plaintext highlighter-rouge">DR</code> register.</li>
  <li>Check the values of the <code class="language-plaintext highlighter-rouge">ACK[2:0]</code> bits, and if they are equal to <code class="language-plaintext highlighter-rouge">0b001</code>, the read operation is complete. However, to ensure that the read data is valid, we need to check for read errors.</li>
  <li>To check error flags, we need to read the <code class="language-plaintext highlighter-rouge">CTRL/STAT</code> register of the <code class="language-plaintext highlighter-rouge">DP</code> and, first of all, check the <code class="language-plaintext highlighter-rouge">STICKYERR</code> flag.</li>
</ol>

<h2 id="links">Links</h2>

<ul>
  <li><a href="https://developer.arm.com/documentation/ihi0031/latest/" target="_blank">ARM® Debug Interface v5. Architecture Specification</a></li>
  <li><a href="https://interrupt.memfault.com/blog/a-deep-dive-into-arm-cortex-m-debug-interfaces" target="_blank">A Deep Dive into ARM Cortex-M Debug Interfaces</a></li>
  <li><a href="https://www.allaboutcircuits.com/technical-articles/jtag-implementation-arm-core-devices/" target="_blank">JTAG Implementation in Arm Core Devices</a></li>
  <li>AN115533 - Serial Wire Debug (SWD) programming specification</li>
</ul>

<h2 class="no_toc" id="stay-in-touch-with-us">Stay in touch with us</h2>
<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Alex Kavalchuk</name></author><category term="blog" /><category term="engineering" /><summary type="html"><![CDATA[Exploring the Architecture and Capabilities of the ARM Debug Access Port for Embedded System Debugging]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2023-05-09-diving-into-arm-debug-access-port/title.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2023-05-09-diving-into-arm-debug-access-port/title.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>