<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://piolabs.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://piolabs.com/" rel="alternate" type="text/html" /><updated>2022-02-07T18:30:37+02:00</updated><id>https://piolabs.com/feed.xml</id><title type="html">PlatformIO Labs</title><subtitle>A proven technology used by global innovators and by over a million embedded developers around the world.</subtitle><author><name>PlatformIO Labs</name><email>contact@piolabs.com</email></author><entry><title type="html">PlatformIO Open Source January Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-january-2022-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source January Updates" /><published>2022-02-07T00:00:00+02:00</published><updated>2022-02-07T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-january-2022-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-january-2022-updates.html"><![CDATA[<p>Welcome to the January 2022 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.</p>

<p>We hope you enjoyed your holidays and had some quality time with your family and friends. Although some people like to reflect about the year gone by, others look forward to the new year and new beginnings and we are one of them! There are plenty of updates pushed in this month to help you move into working mode.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-january-news.jpg" alt="PlatformIO Open Source January Updates" /></p>

<p>Even though it’s only the beginning of the year, we’ve managed to prepare a few great updates for our community!
During January, we have added support for the latest Zephyr v2.7.1, ESP-IDF v4.3.2 and updated Teensyduino core, not to mention a lot of resolved issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#zephyr-rtos-version-271" id="markdown-toc-zephyr-rtos-version-271">Zephyr RTOS version 2.7.1</a></li>
  <li><a href="#esp-idf-v432" id="markdown-toc-esp-idf-v432">ESP-IDF v4.3.2</a></li>
  <li><a href="#espressif32-dev-platform-v35" id="markdown-toc-espressif32-dev-platform-v35">Espressif32 dev-platform v3.5</a></li>
  <li><a href="#teensy-dev-platform-v415" id="markdown-toc-teensy-dev-platform-v415">Teensy dev-platform v4.15</a></li>
  <li><a href="#new-community-dev-platform-for-texas-instruments-msp432" id="markdown-toc-new-community-dev-platform-for-texas-instruments-msp432">New community dev-platform for Texas Instruments MSP432</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="zephyr-rtos-version-271">Zephyr RTOS version 2.7.1</h2>

<p>We’re happy to announce updated support for a new release v2.7.1 of Zephyr Project - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind. v2.7.1 is the first patch release in the LTS2 series that fixes many issues</p>

<p><strong>Related resources for Zephyr framework</strong>:</p>

<ul>
  <li><a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.1">Release notes for v2.7.1</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html">Documentation for Zephyr framework</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms">Supported development platforms</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards">Supported boards</a></li>
</ul>

<h2 id="esp-idf-v432">ESP-IDF v4.3.2</h2>

<p>We’re happy to announce updated support for the latest patch update of <strong>ESP-IDF v4.3</strong> - the official development framework for the ESP32, ESP32-S and ESP32-C Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.</p>

<p><strong>Major enhancements in v4.3.2:</strong></p>

<ul>
  <li>Added support for console output via USB_SERIAL_JTAG port on ESP32-C3</li>
  <li>Added support for 32-bit address (&gt;= 16MB) GD flash.</li>
</ul>

<p>More information on project configuration for ESP-IDF can be found <a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration">here</a>.</p>

<p><strong>Related resources for ESP-IDF</strong>:</p>

<ul>
  <li><a href="https://github.com/espressif/esp-idf/releases/tag/v4.3.2">Release notes for v4.3.2</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html">Documentation for ESP-IDF</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#boards">Supported boards</a></li>
</ul>

<h2 id="espressif32-dev-platform-v35">Espressif32 dev-platform v3.5</h2>

<p>The new release of the <a href="https://platformio.org/platforms/espressif32">Espressif 32</a> dev-platform comes with ESP-IDF v4.3.2, updated toolchain packages and several minor fixes and improvements:</p>
<ul>
  <li>Added new boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/esp32-s2-franzininho.html">Franzininho WiFi Board</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/lionbit.html">LionBit</a></li>
    </ul>
  </li>
  <li>Updated ESP-IDF to v4.3.2 (<a href="https://github.com/espressif/esp-idf/releases/tag/v4.3.2">release notes</a>)</li>
  <li>Updated toolchains for ESP-IDF to v8.4.0r2-patch2</li>
  <li>Minor fixes and improvements</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-espressif32/releases/tag/v3.5.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="teensy-dev-platform-v415">Teensy dev-platform v4.15</h2>

<p>The new release of the <a href="https://platformio.org/platforms/teensy">Teensy</a> dev-platform brings support for the Zephyr framework and the latest Teensyduino:</p>

<ul>
  <li>Initial support for the Zephyr framework for <a href="https://docs.platformio.org/en/latest/boards/teensy/teensy40.html">Teensy 4.0</a> and <a href="https://docs.platformio.org/en/latest/boards/teensy/teensy41.html">Teensy 4.1</a> added by <a href="https://github.com/Rovio01">@Rovio01</a></li>
  <li>Updated Teensyduino to <code class="language-plaintext highlighter-rouge">v1.56</code> (<a href="https://github.com/PaulStoffregen/cores/releases/tag/1.56">release notes</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the Teensy dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/teensy.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-teensy/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="new-community-dev-platform-for-texas-instruments-msp432">New community dev-platform for Texas Instruments MSP432</h2>

<p>We are always happy to see great contributions from our vibrant community. This month <a href="https://github.com/min-infcof">min-infcof</a> have done an excellent job by implementing an open source <a href="https://github.com/zceemja/platform-timsp432">development platform</a> for Texas Instruments MSP432 Microcontrollers.</p>

<p>MSP432 is a mixed-signal ultra-low-power microcontroller family featuring a Cortex-M4 processor in a wide configuration of device options.
With a rich set of analog, timing, and communications peripherals, they cater to a large number of application scenarios.</p>

<p>Don’t hesitate to give it a try, the first version <a href="https://registry.platformio.org/platforms/zceemja/timsp432">0.1.0</a> is already available in PlatformIO Registry.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[New boards, Support for Zephyr v2.7.1, ESP-IDF v4.3.2 and Teensyduino v1.56, a new community dev-platform for Texas Instruments MSP432]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO 2021 Year in Review</title><link href="https://piolabs.com/blog/news/platformio-year-in-review-2021.html" rel="alternate" type="text/html" title="PlatformIO 2021 Year in Review" /><published>2021-12-31T00:00:00+02:00</published><updated>2021-12-31T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-year-in-review-2021</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-year-in-review-2021.html"><![CDATA[<p>Let’s be honest, this year wasn’t less cruel than the previous one. The world still suffers from the pandemic impacting people’s health and livelihoods. While we are happy that the year is coming to a close, there is also much to celebrate and be proud of. Since 2014, we have been focused on improving the lives of everyday engineers with free, open-source, and next-generation instruments that enhance professional development productivity. This year is no exception, so we would like to end it with a blog post highlighting the major milestones and achievements of PlatformIO Labs.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/2021-12-31-platformio-year-in-review-2021/platformio_year_in_review_2022.png" alt="PlatformIO 2021 Year in Review" /></p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#major-milestones" id="markdown-toc-major-milestones">Major Milestones</a></li>
  <li><a href="#platformio-in-education" id="markdown-toc-platformio-in-education">PlatformIO in Education</a></li>
  <li><a href="#updated-trusted-package-registry" id="markdown-toc-updated-trusted-package-registry">Updated Trusted Package Registry</a></li>
  <li><a href="#blog-and-social-activity" id="markdown-toc-blog-and-social-activity">Blog and Social Activity</a></li>
  <li><a href="#words-of-appreciation" id="markdown-toc-words-of-appreciation">Words of Appreciation</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="major-milestones">Major Milestones</h2>

<p>2021 is a special year for us. This year we’ve reached a tremendous number of 2,000,000 unique installations of our <a href="https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide" target="_blank">PlatformIO IDE for VSCode</a> extension and based on the dominant amount of 5-star reviews, we can confirm that there are tens of thousands of happy developers around the world using our products on an everyday basis!</p>

<p>We’ve continued to ship major new features and tons of improvements to all of our existing products. The PlatformIO Core finally hit the <a href="/blog/news/platformio-core-5-2-released.html">5.2 milestone</a> with huge improvements to performance, debugging experience, updated package management system, and much more. The PlatformIO IDE for Microsoft Visual Studio Code had multiple releases with the <a href="https://github.com/platformio/platformio-vscode-ide/releases/tag/v2.4.0">v2.4</a> as the latest and continues to focus on improving the developer experience and stability by leveraging our highly-customizable <a href="/technology/modern-ui-toolkit.html">Modern UI Toolkit</a>.</p>

<p>In addition to the major releases of our core products, we continued to grow our hardware ecosystem and now it contains 40+ development platforms, 1000+ boards and development kits, including cutting-edge hardware from the rapidly growing RISC-V ecosystem.</p>

<p>During 2021 PlatormIO Labs <a href="/blog/news/openhw-tv-s2e04.html">participated</a> in OpenHW Group by providing a flexible and completely vendor-neutral development ecosystem. It was great to be part of the OpenHW Software Task Group and see how our sincere contributions were greatly appreciated by the OpenHW Group community all around the world.</p>

<figure class="figure mb-7">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-12-31-platformio-year-in-review-2021/platformio_yearly_active_users_2012_2021.png" alt="PlatformIO Yearly Active Users (2014-2021)" />
  <figcaption class="figure-caption text-center">
    PlatformIO Yearly Active Users (2014-2021)
  </figcaption>
</figure>

<h2 id="platformio-in-education">PlatformIO in Education</h2>

<p>One of the main priorities of PlatformIO Labs is to play a central role in empowering academics, engineers and silicon vendors to leverage modern open-source technologies on anything from simple prototypes to truly ambitious projects. We would like to highlight that two educational courses leveraged our Tech-as-a-Service in their curriculum this year.</p>

<p>The first is one is <a href="/blog/press-releases/platformio-labs-helps-imagination-technologies.html">RVfpga: Understanding Computer Architecture</a> offered by Imagination Technologies. It includes a rich set of teaching materials and practical exercises to help students understand the key elements of processor architecture, including IP cores, and how to modify a RISC-V core and its microarchitectures. The course engaged several widely reputed sponsors and supporters who have given outstanding support to this large and complex project. We are thrilled to be part of this exciting initiative and looking forward to its future adoption in the best universities in the world.</p>

<p>The second is an entry-level course by Microsoft called <a href="/blog/news/microsoft-leverages-platformio.html">IoT for beginners</a>. This course is oriented on teachers, students and learners of all types that are just beginning their journey in the Internet of Things. Its 24-lesson curriculum covers a lot of essential topics required to get started with understanding devices, sensors, actuators, and writing those all-important first lines of code. We are happy to see how companies like Microsoft pick PlatformIO as their development tool of choice for microcontroller development.</p>

<h2 id="updated-trusted-package-registry">Updated Trusted Package Registry</h2>

<p>The <a href="/technology/trusted-package-registry.html">Trusted Package Registry</a> was designed to help developers, teams, silicon vendors securely accelerate their package distribution with a trusted, centralized channel and pipeline at scale. Even though we presented this solution not long ago, we already have engaged several enterprise clients. Such a reaction clearly indicates that there is a growing demand for turn-key package management solutions.</p>

<p>During the last few months, we’ve been working on a completely new version of UI for the <a href="https://registry.platformio.org/">PlatformIO Package Registry</a>. Finally, we are excited to announce that it’s ready to be presented to our faithful community. More powerful, more intuitive, taking the PlatformIO ecosystem capabilities to a whole new level. Even though technically the registry is already generally available, we’ll be sharing more details soon, so don’t miss the official launch in early January!</p>

<h2 id="blog-and-social-activity">Blog and Social Activity</h2>

<p>In 2021, we published a lot of learning material that unveils the most important PlatformIO Best Practices from inside and out. The new generation of embedded developers strive to write better code in all aspects, so it was no surprise that our series on unit testing was the most popular read in 2021, including the <a href="/blog/insights/unit-testing-part-3.html">Continuous Integration and Remote Testing</a> post featuring <a href="https://docs.platformio.org/en/latest/plus/pio-remote.html">PlatformIO Remote</a> running on Github Actions.</p>

<p>We believe that knowledge is power, but sharing knowledge is even more important. More than 90 high-quality articles, tutorials and videos from around the Internet were promoted under the <a href="https://www.linkedin.com/feed/hashtag/learnembedded/" target="_blank">#LearnEmbedded</a> hashtag in our social accounts. Your feedback was incredibly positive, so we plan to continue this tradition in 2022 and share with you even more in-depth informational materials.</p>

<h2 id="words-of-appreciation">Words of Appreciation</h2>

<p>We are incredibly thankful for the contributions that we receive as we continue to grow the PlatformIO project to greater heights. PlatformIO could not become as popular as it is today without you, our community of users. Your continuous pull requests and bug reports help us make our products better with each passing year. In turn, we promise to further expand the PlatformIO ecosystem and provide even more powerful products, allowing individual developers and organizations to take full advantage of our professional collaborative platform.</p>

<p>Finally, on behalf of the PlatformIO Labs team, we would like to thank everyone for being a part of all of this work and success. We are deeply grateful for your time, passion, support, and invite you to continue our journey together in the next year!</p>

<p><strong>Have a great 2022!</strong></p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><category term="featured" /><summary type="html"><![CDATA[The highlights of the major milestones and achievements of PlatformIO Labs in 2021]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-12-31-platformio-year-in-review-2021/platformio_year_in_review_2022.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-12-31-platformio-year-in-review-2021/platformio_year_in_review_2022.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Debugging with PlatformIO: Part 2. Debugging an Embedded Target</title><link href="https://piolabs.com/blog/insights/debugging-embedded.html" rel="alternate" type="text/html" title="Debugging with PlatformIO: Part 2. Debugging an Embedded Target" /><published>2021-12-13T00:00:00+02:00</published><updated>2021-12-13T00:00:00+02:00</updated><id>https://piolabs.com/blog/insights/debugging-embedded</id><content type="html" xml:base="https://piolabs.com/blog/insights/debugging-embedded.html"><![CDATA[<p>Embedded systems are becoming more complex, more autonomous, and more intelligent. The rise of the ML and AI technologies fuels the complexity of embedded software even further. It’s getting increasingly difficult to hunt down and isolate errors in the code, but at the same time, the demand for reliability continues to grow as well. With this increased complexity comes a need for more advanced and efficient debug instruments that will help to prevent bugs in production and find issues much easier.</p>

<!-- more -->

<p>This is the second part of a four-part blog series where we’re exploring the debugging workflow implemented in <a href="https://docs.platformio.org/en/latest/plus/debugging.html">PlatformIO Unified Debugger</a>. In the <a href="/blog/insights/debugging-introduction.html">first post</a>, we briefly went through the fundamental concepts of the debugging process, learned how to control the execution flow of an application, and reviewed the essential components of the “Debug” perspective.</p>

<p>In this article, we will focus on how to apply that knowledge to debugging an embedded target. This part also aims at providing a brief overview of how debugging of an embedded system works behind the scenes and what advanced instruments may be helpful for efficient debugging.</p>

<p>Throughout this post, we will be using the <a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_f401re.html">ST Nucleo-F401RE</a> board and <a href="https://docs.platformio.org/en/latest/frameworks/stm32cube.html">STM32Cube</a> as the development framework.</p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#prerequisites" id="markdown-toc-prerequisites">Prerequisites</a></li>
  <li><a href="#introduction-to-debugging-embedded-targets" id="markdown-toc-introduction-to-debugging-embedded-targets">Introduction to Debugging Embedded Targets</a>    <ul>
      <li><a href="#debug-interfaces" id="markdown-toc-debug-interfaces">Debug Interfaces</a></li>
      <li><a href="#debug-probes" id="markdown-toc-debug-probes">Debug Probes</a></li>
      <li><a href="#debug-servers" id="markdown-toc-debug-servers">Debug Servers</a></li>
    </ul>
  </li>
  <li><a href="#advanced-instruments" id="markdown-toc-advanced-instruments">Advanced Instruments</a>    <ul>
      <li><a href="#registers-and-peripherals" id="markdown-toc-registers-and-peripherals">Registers and Peripherals</a></li>
      <li><a href="#memory-window" id="markdown-toc-memory-window">Memory Window</a></li>
      <li><a href="#disassembly-window" id="markdown-toc-disassembly-window">Disassembly Window</a></li>
    </ul>
  </li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>This article uses the following components:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">VSCode with installed PlatformIO IDE extension</a></li>
  <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_f401re.html">ST Nucleo-F401RE</a></li>
</ul>

<h2 id="introduction-to-debugging-embedded-targets">Introduction to Debugging Embedded Targets</h2>

<p>Most of the time, debugging an embedded system is not very different from debugging a desktop application. Usually, the host machine, where our development environment is running, doesn’t have any facilities to access the state of external hardware. That’s why we need to configure an additional set of hardware and software components so we can translate the commands sent from the debugger on a host machine to a target device using some sort of communication channel. Before we dive into the details of the debugging workflow, let’s take a quick look at a typical setup for debugging an embedded target.</p>

<figure class="figure mb-7">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-07-05-debugging-embedded/debug-setup.jpg" alt="Compilation and linking process" />
  <figcaption class="figure-caption text-center">
    Debug setup for an embedded target
  </figcaption>
</figure>

<p>Let’s go through the main components of the configuration depicted above.</p>

<h3 id="debug-interfaces">Debug Interfaces</h3>

<p>Nowadays there are two prevalent interfaces used for debugging embedded systems: JTAG and Serial Wire Debug (SWD). The classic JTAG was developed in the ’80s by the Joint Test Access Group as a standard for verifying designs and testing printed circuit boards after manufacture. Today, JTAG is widely adopted by the semiconductor industry and frequently used for programming, testing and debugging embedded systems. The main disadvantage of the JTAG interface is that it requires at least four pins (TRST is optional) for normal functioning. This might be a problem when we are using small package ICs with a limited number of pins.</p>

<p>There is a simplified alternative interface called Serial Wire Debug (SWD) developed by Arm. It replaces the JTAG interface with two signals - a single bi-directional data line (SWDIO) and clock (SWCLK), providing all the usual debug and test functionality with higher performance compared  JTAG. Although a lot of modern microcontrollers support both JTAG and SWD interfaces, SWD is a proprietary interface and can be used mostly within the Arm ecosystem.</p>

<h3 id="debug-probes">Debug Probes</h3>

<p>We can describe debug probes as hardware mediators between the host machine and the debug port of the target embedded system. The main task of any debug probe is to convert commands from the debugger into signals understandable to the target device. Usually, debug probes are connected to the host via USB, but there are also more exotic variations with Ethernet or Wi-Fi connectivity allowing developers to debug devices even remotely from anywhere in the world.</p>

<p>There is a plenty of debug adapters available in the market, starting from open-source and vendor-agnostic probes (<a href="https://docs.platformio.org/en/latest/plus/debug-tools/blackmagic.html">Black Magic Probe</a>) up to proprietary solutions from both silicon vendors (<a href="https://docs.platformio.org/en/latest/plus/debug-tools/atmel-ice.html">Atmel-ICE</a>, <a href="https://docs.platformio.org/en/latest/plus/debug-tools/stlink.html">ST-Link</a>) and independent commercial companies (<a href="https://docs.platformio.org/en/latest/plus/debug-tools/jlink.html">Segger J-Link</a>). Some vendors also offer development kits (<a href="https://docs.platformio.org/en/latest/boards/nordicnrf52/nrf52_dk.html">Nordic nRF52-DK</a>, <a href="https://docs.platformio.org/en/latest/boards/nxpimxrt/mimxrt1010_evk.html">NXP i.MX RT1010</a>) with an onboard debug probe so developers can start debugging without any additional hardware.</p>

<p>It’s worth mentioning that PlatformIO Unified Debugger is highly configurable and can be used with a wide variety of debug probes, it also provides a huge set of predefined configurations for development kits that have built-in debug circuitry. It means that developers don’t need any debug configuration, just connect your board and start a new debug session.</p>

<h3 id="debug-servers">Debug Servers</h3>

<p>Simply put, a debug server is a piece of software running on the host machine that acts as a bridge between the debugger and the debug probe connected to the target device. <a href="http://openocd.org">OpenOCD</a> is one of the best examples of free and open-source debug servers. It’s a community-driven project with a huge number of supported debug probes and target devices. Another example is <a href="https://github.com/pyocd/pyOCD">pyOCD</a> - an open-source package for programming and debugging Arm Cortex-M microcontrollers. On the other hand, there are companies like Segger that offer their own set of tools (including debug servers) that better utilizes the capabilities of their J-Link debug probes. There are also debug probes that don’t need any intermediary host software at all (e.g. Black Magic Probe) and can interact with debuggers directly by mimicking a debug server over a serial port.</p>

<h2 id="advanced-instruments">Advanced Instruments</h2>

<p>In addition to the basic components of the Debug View reviewed in the previous part, let’s take a look at the instruments that might be useful when debugging an embedded target. For the sake of simplicity, let’s get started by importing the <code class="language-plaintext highlighter-rouge">stm32cube-hal-blink</code> example directly from the PlatformIO Home page:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-07-05-debugging-embedded/debugging-example-1.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-1.png" />
</a></p>

<p>This example contains a lot of environments, but we need to select <code class="language-plaintext highlighter-rouge">nucleo_f401re</code> according to the board used in this post:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-07-05-debugging-embedded/debugging-example-2.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-2.png" />
</a></p>

<p>Now we are ready to start debugging! To launch a new debug session we can use the following options:</p>

<ul>
  <li>Debug: Start debugging from the top menu</li>
  <li>Start Debugging option from the <code class="language-plaintext highlighter-rouge">Quick Access</code> menu</li>
  <li>Hotkey button <code class="language-plaintext highlighter-rouge">F5</code>:</li>
</ul>

<p>Once a new debug session is started we can open the advanced panes of the Debug View:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-07-05-debugging-embedded/debugging-example-3.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-3.png" />
</a></p>

<p>Let’s examine them in greater detail.</p>

<h3 id="registers-and-peripherals">Registers and Peripherals</h3>

<p>These windows show the current state of the processor and peripheral registers:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-regs-periphs.png" alt="Registers and Peripherals windows" />
  <figcaption class="figure-caption text-center">
    Registers and Peripherals windows
  </figcaption>
</figure>

<p>The Registers and Peripherals windows are especially useful for finding out the root cause of fault-related exceptions that occurred during the normal execution flow. Additionally, if we combine these windows with the Disassembly view discussed below we can get a powerful environment for very low-level debugging in cases when there is no actual source code available to step through. Note that the Registers and Peripherals windows are platform-specific, so a different target might have a different set of registers.</p>

<h3 id="memory-window">Memory Window</h3>

<p>In contrast to the “Variables” and “Watch” panes, the “Memory” window shows the raw contents of memory at a specific address:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-memory-view.png" alt="Memory Window" />
  <figcaption class="figure-caption text-center">
    Memory Window
  </figcaption>
</figure>

<p>This window is useful for examining large chunks of memory that can’t be displayed in a meaningful manner in other panes. It displays everything in the selected memory area, including code, constants and even random garbage in uninitialized memory. You can open several instances of the “Memory” windows if you want to monitor several different memory areas simultaneously.</p>

<h3 id="disassembly-window">Disassembly Window</h3>

<p>This window shows assembler instructions mixed with source code for the application being debugged:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-disasm.png" alt="Disassembly Window" />
  <figcaption class="figure-caption text-center">
    Disassembly Window
  </figcaption>
</figure>

<p>The “Disassembly” allows you to carry out all the normal debug actions including single-stepping and setting breakpoints on the level of individual assembly instructions generated by the compiler. Note that this window automatically appears if there is no source code available.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Debugging is an unavoidable part of the development process and embedded software is no exception. Debugging can consume a considerable amount of time and that’s why developers should take advantage of modern instruments to accelerate the debugging process and make it significantly easier to more precisely track down and diagnose errors in their codebase.</p>

<p>In this post, we continued to explore the debugging capabilities of the PlatformIO ecosystem. Powerful features like the Peripherals, Memory, and Disassembly views are extremely useful when we need to take a deeper look at the low-level state of the target. In the next part, we’ll review advanced best practices, tips and tricks for efficient debugging, including PlatformIO Unified Debugger in CLI mode.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html"><![CDATA[This part aims at providing a brief overview of how debugging of an embedded system works behind the scenes and what advanced instruments may be helpful for efficient debugging.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-07-05-debugging-embedded/nucleo.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-07-05-debugging-embedded/nucleo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source November Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-november-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source November Updates" /><published>2021-12-06T00:00:00+02:00</published><updated>2021-12-06T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-november-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-november-2021-updates.html"><![CDATA[<p>Welcome to the November 2021 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-november-news.jpg" alt="PlatformIO Open Source November Updates" /></p>

<p>During November, we released a new version of PlatformIO IDE for Visual Studio Code, rolled out updates for the Espressif32, Nordic nRF52, Raspberry Pi and ST STM32 platforms, fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-ide-for-visual-studio-code-v24" id="markdown-toc-platformio-ide-for-visual-studio-code-v24">PlatformIO IDE for Visual Studio Code v2.4</a></li>
  <li><a href="#platformio-core-523" id="markdown-toc-platformio-core-523">PlatformIO Core 5.2.3</a></li>
  <li><a href="#esp-idf-v431" id="markdown-toc-esp-idf-v431">ESP-IDF v4.3.1</a></li>
  <li><a href="#espressif32-dev-platform-v34" id="markdown-toc-espressif32-dev-platform-v34">Espressif32 dev-platform v3.4</a></li>
  <li><a href="#st-stm32-dev-platform-v151" id="markdown-toc-st-stm32-dev-platform-v151">ST STM32 dev-platform v15.1</a></li>
  <li><a href="#nordic-nrf52-dev-platform-v91" id="markdown-toc-nordic-nrf52-dev-platform-v91">Nordic nRF52 dev-platform v9.1</a></li>
  <li><a href="#chips-alliance-dev-platform-v11" id="markdown-toc-chips-alliance-dev-platform-v11">CHIPS Alliance dev-platform v1.1</a></li>
  <li><a href="#arduino-core-for-mbed-enabled-devices-v261" id="markdown-toc-arduino-core-for-mbed-enabled-devices-v261">Arduino Core for mbed-enabled devices v2.6.1</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="platformio-ide-for-visual-studio-code-v24">PlatformIO IDE for Visual Studio Code v2.4</h2>

<p><a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html"><img class="figure-img img-fluid" src="/assets/posts/oss-updates/platformio-ide-for-vscode-laptop.png" alt="PlatformIO IDE for VSCode" /></a></p>

<p>We are pleased to announce a new release <code class="language-plaintext highlighter-rouge">v2.4</code> of PlatformIO IDE for <a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">Visual Studio Code</a> that brings new functionality for project workspaces, updated installer and several bugfixes:</p>

<ul>
  <li>Added named status bars: “PlatformIO: Toolbar” and “PlatformIO: Project Environment Switcher” (ability to hide them separately) (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/2593">#2593</a>)</li>
  <li>Added “Verbose Check” project task</li>
  <li>Synchronize VSCode workspaces with PlatformIO Home Projects (requires PlatformIO Core 5.2.3 or above) (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/1367">#1367</a>)</li>
  <li>Automatically switch to newly created project’s environment (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/2414">#2414</a>)</li>
  <li>Fixed an issue when “Copy to Clipboard” does not work in PlatformIO Home on macOS (requires PlatformIO Core 5.2.3 or above) (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/2570">#2570</a>)</li>
  <li>PlatformIO IDE Installer
    <ul>
      <li>Updated installer script to 1.1.0</li>
      <li>Check global PlatformIO Core installation when built-in is disabled</li>
      <li>Handle “Could not find distutils module” error on Linux</li>
      <li>Rebuild project IDE configuration on “platformio.ini” change</li>
    </ul>
  </li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-vscode-ide/releases/tag/v2.4.0">Release Notes</a> for more detailed information.</p>

<h2 id="platformio-core-523">PlatformIO Core 5.2.3</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v5.2.3 release with lots of great improvements and bugfixes:</p>

<ul>
  <li>Automatically synchronize active projects between IDE and <a href="https://docs.platformio.org/en/latest/home/index.html">PlatformIO Home</a></li>
  <li>Added support for custom <a href="https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html#filters">device monitor filters</a> (<a href="https://github.com/platformio/platformio-core/issues/3924">issue #3924</a>)</li>
  <li>Show human-readable message when infinite recursion is detected while processing <a href="https://docs.platformio.org/en/latest/projectconf/interpolation.html">Interpolation of Values</a> (<a href="https://github.com/platformio/platformio-core/issues/3883">issue #3883</a>)</li>
  <li>Improved directory interpolation (<code class="language-plaintext highlighter-rouge">${platformio.***_dir}</code>) in <a href="https://docs.platformio.org/en/latest/projectconf.html">“platformio.ini”</a> configuration file (<a href="https://github.com/platformio/platformio-core/issues/3934">issue #3934</a>)</li>
  <li>Ignore resolving of SCons variables (e.g., <code class="language-plaintext highlighter-rouge">${(SOURCE.get_abspath())}</code>) when preprocessing interpolations (<a href="https://github.com/platformio/platformio-core/issues/3933">issue #3933</a>)</li>
  <li>Added “inc” as a sign that it’s the root of the library (<a href="https://github.com/platformio/platformio-core/issues/4093">issue #4093</a>)</li>
  <li>Fixed an issue when the <code class="language-plaintext highlighter-rouge">$PROJECT_DIR</code> variable was not properly replaced in the <a href="https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-server">debug_server</a> option (<a href="https://github.com/platformio/platformio-core/issues/4086">issue #4086</a>)</li>
  <li>Fixed an issue when <a href="https://docs.platformio.org/en/latest/plus/pio-remote.html">PIO Remote</a> device monitor crashes on the first keypress (<a href="https://github.com/platformio/platformio-core/issues/3832">issue #3832</a>)</li>
  <li>Fixed “Do not know how to make File target ‘debug’” issue when debugging project using <a href="https://docs.platformio.org/en/latest/integration/ide/clion.html">CLion IDE</a> (<a href="https://github.com/platformio/platformio-core/issues/4089">pull #4089</a>)</li>
  <li>Fixed “UnicodeEncodeError” when a build output contains non-ASCII characters (<a href="https://github.com/platformio/platformio-core/issues/3971">issue #3971</a>)</li>
  <li>Fixed an issue when VSCode’s debugger does not the honor default environment (<a href="https://github.com/platformio/platformio-core/issues/4098">issue #4098</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-core/releases/tag/v5.2.3">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="esp-idf-v431">ESP-IDF v4.3.1</h2>

<p>We’re happy to announce updated support for the latest stable <strong>ESP-IDF v4.3.1</strong> - the official development framework for the ESP32, ESP32-S and ESP32-C Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.</p>

<p><strong>Major enhancements in the latest release:</strong></p>

<ul>
  <li>Improvements to Classic Bluetooth and BLE</li>
  <li>Speeded up Ethernet start up process</li>
  <li>Updated mbedTLS</li>
</ul>

<p>More information on project configuration for ESP-IDF can be found <a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration">here</a>.</p>

<p><strong>Related resources for ESP-IDF</strong>:</p>

<ul>
  <li><a href="https://github.com/espressif/esp-idf/releases/tag/v4.3.1">Release notes for <code class="language-plaintext highlighter-rouge">v4.3.1</code></a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html">Documentation for ESP-IDF</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#boards">Supported boards</a></li>
</ul>

<h2 id="espressif32-dev-platform-v34">Espressif32 dev-platform v3.4</h2>

<p>The new release of the <a href="https://platformio.org/platforms/espressif32">Espressif 32</a> dev-platform comes wit the latest ESP-IDF, updated toolchain packages and several minor fixes and improvements:</p>

<ul>
  <li>Updated ESP-IDF to the latest 4.3.1 (<a href="https://github.com/espressif/esp-idf/releases/tag/v4.3.1">release notes</a>)</li>
  <li>Updated toolchains for ESP-IDF to v8.4.0</li>
  <li>Fixed partition offset calculation process</li>
  <li>Fixed a regression with incorrect flash modes used for uploading</li>
  <li>Fixed an issue with incorrect command used for embedding plain files in IDF-based projects</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-espressif32/releases/tag/v3.4.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="st-stm32-dev-platform-v151">ST STM32 dev-platform v15.1</h2>

<p>The latest <a href="https://platformio.org/platforms/ststm32">ST STM32</a> v15.1.0 brings support for the latest Arduino core for mbed-enabled boards and updated <code class="language-plaintext highlighter-rouge">ldscripts</code> package that includes the latest MCU targets:</p>

<ul>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.6.1</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.6.1">release notes</a>)</li>
  <li>Updated the <code class="language-plaintext highlighter-rouge">ldscripts</code> package to include the latest MCUs (#563)</li>
  <li>Minor fixes and improvements (#576, #582)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-ststm32/releases/tag/v15.1.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the ST STM32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-ststm32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="nordic-nrf52-dev-platform-v91">Nordic nRF52 dev-platform v9.1</h2>

<p>The new <a href="https://platformio.org/platforms/nordicnrf52">Nordic nRF52</a> v9.1.0 comes with the latest Arduino cores for Adafruit and mbed-enabled boards:</p>

<ul>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.6.1</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.6.1">release notes</a>)</li>
  <li>Updated Arduino Adafruit core to <code class="language-plaintext highlighter-rouge">v1.2.0</code> (<a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/1.2.0">release notes</a>)</li>
  <li>Minor improvements (#129)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-nordicnrf52/releases/tag/v9.1.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Nordic nRF52 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-nordicnrf52/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="chips-alliance-dev-platform-v11">CHIPS Alliance dev-platform v1.1</h2>

<p>The latest <a href="https://platformio.org/platforms/chipsalliance">CHIPS Alliance</a> v1.1 is mostly a maintenance release that brings several important bugfixes and improvements for Imagination Technologies <a href="/blog/press-releases/platformio-labs-helps-imagination-technologies.html">“RVfpga: Understanding Computer Architecture”</a> course.</p>

<ul>
  <li>Updated the OpenOCD package to v0.11</li>
  <li>Updated default FPGA bitstream</li>
  <li>Updated default upload command</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-chipsalliance/releases/tag/v1.1.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the CHIPS Alliance dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/chipsalliance.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-chipsalliance/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arduino-core-for-mbed-enabled-devices-v261">Arduino Core for mbed-enabled devices v2.6.1</h2>

<p>The <a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">ST STM32</a>, <a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Nordic nRF52</a> and <a href="https://docs.platformio.org/en/latest/platforms/raspberrypi.html">Raspberry Pi RP2040</a> dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.6.1. According to the <a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.6.1">release notes</a>, v2.6.1 brings a lot of bugfixes and improvements in core and bundled libraries.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[Improved PlatformIO IDE for Microsoft VSCode, PlatformIO Core bugfix release, Support for the latest ESP-IDF, Updated Arduino cores]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-november-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-november-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source October Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-october-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source October Updates" /><published>2021-11-01T00:00:00+02:00</published><updated>2021-11-01T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-october-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-october-2021-updates.html"><![CDATA[<p>Welcome to the October 2021 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-october-news.jpg" alt="PlatformIO Open Source October Updates" /></p>

<p>During October, we have released a new version of PlatformIO Core, added support for Zephyr v2.7.0, rolled out updates for the STMicroelectronics STM32, Nordic nRF52, Teensy and several other development platforms, resolved a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-core-52" id="markdown-toc-platformio-core-52">PlatformIO Core 5.2</a></li>
  <li><a href="#zephyr-rtos-version-270-lts2" id="markdown-toc-zephyr-rtos-version-270-lts2">Zephyr RTOS version 2.7.0 (LTS2)</a></li>
  <li><a href="#st-stm32-dev-platform-v150" id="markdown-toc-st-stm32-dev-platform-v150">ST STM32 dev-platform v15.0</a></li>
  <li><a href="#nordic-nrf52-dev-platform-v90" id="markdown-toc-nordic-nrf52-dev-platform-v90">Nordic nRF52 dev-platform v9.0</a></li>
  <li><a href="#atmel-sam-dev-platform-v70" id="markdown-toc-atmel-sam-dev-platform-v70">Atmel SAM dev-platform v7.0</a></li>
  <li><a href="#teensy-dev-platform-v414" id="markdown-toc-teensy-dev-platform-v414">Teensy dev-platform v4.14</a></li>
  <li><a href="#arduino-core-for-mbed-enabled-devices-v252" id="markdown-toc-arduino-core-for-mbed-enabled-devices-v252">Arduino Core for mbed-enabled devices v2.5.2</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="platformio-core-52">PlatformIO Core 5.2</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v5.2 release. This milestone we again received helpful feedback from our community, which let us identify and tackle many issues and prepare a lot of great improvements:</p>

<ul>
  <li><strong>Boosted Debugging Performance</strong>. The Unified Debugger codebase has been migrated to the pure Python 3 Asynchronous I/O stack which allowed us to significantly improve the overall debugging experience even in CLI mode!</li>
  <li><strong>Unit Tests Debugging</strong>. Debugging tests is now as easy as adding a single line to your configuration file.</li>
  <li><strong>Debugger for Native Platform</strong>. Embedded developers can now debug their applications on host machines using the same usual workflow.</li>
  <li>The PlatformIO build engine has been upgraded to the latest SCons 4.2.</li>
  <li>Updated package management system with a more error-proof and intuitive package publishing process.</li>
  <li>Updated static analysis tools to the latest available versions. Now developers can identify even more potential bugs, vulnerabilities, and security threats.</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-core/releases/tag/v5.2.0">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="zephyr-rtos-version-270-lts2">Zephyr RTOS version 2.7.0 (LTS2)</h2>

<p>We’re happy to announce updated support for a new release v2.7.0 of Zephyr Project - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind.</p>

<p><strong>Major enhancements in v2.7.0:</strong></p>

<ul>
  <li>Bluetooth Audio, Direction Finding, and Mesh improvements</li>
  <li>New Action-based Power Management API</li>
  <li>Improved thread safety</li>
</ul>

<p><strong>Related resources for Zephyr framework</strong>:</p>

<ul>
  <li><a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0">Release notes for v2.7.0</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html">Documentation for Zephyr framework</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms">Supported development platforms</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards">Supported boards</a></li>
</ul>

<h2 id="st-stm32-dev-platform-v150">ST STM32 dev-platform v15.0</h2>

<p>The latest release of the <a href="https://platformio.org/platforms/ststm32">ST STM32</a> platform comes with several new boards and dev-kits, support for the latest Zephyr v2.7.0, updated Arduino cores and several minor improvements:</p>

<ul>
  <li>Added new boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/bw_swan_r5.html">BluesWireless Swan R5</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/disco_b_u585i_iot02a.html">ST B-U585I-IOT02A Discovery</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/disco_h735ig.html">STM32H735G-DK Discovery kit</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_g0b1re.html">ST Nucleo G0B1RE</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_l010rb.html">ST Nucleo L010RB</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_u575zi_q.html">ST Nucleo U575ZI-Q</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/storm32_v1_31_rc.html">STorM32 BGC v1.31 RC</a></li>
    </ul>
  </li>
  <li>Updated Zephyr framework to <code class="language-plaintext highlighter-rouge">v2.7.0</code> (<a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0">release notes</a>)</li>
  <li>Updated STM32 Arduino Core to the latest <code class="language-plaintext highlighter-rouge">v2.1.0</code> (<a href="https://github.com/stm32duino/Arduino_Core_STM32/releases/tag/2.1.0">relase notes</a>)</li>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.5.2</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.5.2">release notes</a>)</li>
  <li>Updated the OpenOCD package to the latest v0.11</li>
  <li>Minor fixes and improvements (#569, #570, #574)</li>
</ul>

<p><strong>Related resources for the ST STM32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-ststm32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="nordic-nrf52-dev-platform-v90">Nordic nRF52 dev-platform v9.0</h2>

<p>The new release of <a href="https://platformio.org/platforms/nordicnrf52">Nordic nRF52</a> dev-platform brings support for Zephyr 2.7.0, updated Arduino cores and several minor bufixes:</p>
<ul>
  <li>New boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/nordicnrf52/adafruit_ledglasses_nrf52840.html">Adafruit LED Glasses Driver nRF52840</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/nordicnrf52/nicla_sense_me.html">Arduino Nicla Sense ME</a></li>
    </ul>
  </li>
  <li>Updated Zephyr framework to <code class="language-plaintext highlighter-rouge">v2.7.0</code> (<a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0">release notes</a>)</li>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.5.2</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.5.2">release notes</a>)</li>
  <li>Updated Arduino Adafruit core to <code class="language-plaintext highlighter-rouge">v1.1.0</code> (<a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/1.1.0">release notes</a>)</li>
  <li>Updated the OpenOCD package to the latest v0.11</li>
  <li>Minor fixes and improvements (#128)</li>
</ul>

<p><strong>Related resources for the Nordic nRF52 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-nordicnrf52/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="atmel-sam-dev-platform-v70">Atmel SAM dev-platform v7.0</h2>

<p>The latest <a href="https://platformio.org/platforms/atmelsam">Atmel SAM</a> v3.3.1 is mostly a maintenance release that brings several important bugfixes and improvements:</p>

<ul>
  <li>Updated Zephyr framework to <code class="language-plaintext highlighter-rouge">v2.7.0</code> (<a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0">release notes</a>)</li>
  <li>Updated Arduino Adafruit core to <code class="language-plaintext highlighter-rouge">v1.7.5</code> (<a href="https://github.com/adafruit/ArduinoCore-samd/releases/tag/1.7.5">release notes</a>)</li>
  <li>Updated the OpenOCD package to the latest v0.11</li>
</ul>

<p><strong>Related resources for the atmelsam dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/atmelsam.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-atmelsam/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="teensy-dev-platform-v414">Teensy dev-platform v4.14</h2>

<p>The new release of the <a href="https://platformio.org/platforms/teensy">Teensy</a> dev-platform comes with support for the latest Teensyduino:</p>

<ul>
  <li>Updated Teensyduino to <code class="language-plaintext highlighter-rouge">v1.55</code> (<a href="https://github.com/PaulStoffregen/cores/releases/tag/1.55">release notes</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the Teensy dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/teensy.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-teensy/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arduino-core-for-mbed-enabled-devices-v252">Arduino Core for mbed-enabled devices v2.5.2</h2>

<p>The <a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">ST STM32</a>, <a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Nordic nRF52</a> and <a href="https://docs.platformio.org/en/latest/platforms/raspberrypi.html">Raspberry Pi RP2040</a> dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.5.2. According to the <a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.5.2">release notes</a>, v2.5.2 brings a lot of bugfixes and improvements in core and bundled libraries.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[PlatformIO Core 5.2, New boards & dev-kits, Support for Zephyr v2.7.0 and Teensyduino v1.55, Updated Arduino Cores for Microchip SAM, ST STM32, Nordic nRF52 and Mbed-enabled devices]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-october-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-october-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Debugging with PlatformIO: Part 1. Back to the Basics</title><link href="https://piolabs.com/blog/insights/debugging-introduction.html" rel="alternate" type="text/html" title="Debugging with PlatformIO: Part 1. Back to the Basics" /><published>2021-09-20T00:00:00+03:00</published><updated>2021-09-20T00:00:00+03:00</updated><id>https://piolabs.com/blog/insights/debugging-introduction</id><content type="html" xml:base="https://piolabs.com/blog/insights/debugging-introduction.html"><![CDATA[<p>Debugging is an inseparable part of the development process. People make mistakes, so our code doesn’t do what we expect once in a while. Often such problems happen at the worst possible time. That’s why it’s a good idea to master debugging techniques and skills to more precisely isolate the source code of a problem and fix it in a timely manner.</p>

<!-- more -->

<p>In the <strong>Debugging with PlatformIO</strong> series, we will be exploring the debugging capabilities of the PlatformIO ecosystem. This series will walk you through the core concepts of the debug workflow implemented in <a href="https://docs.platformio.org/en/latest/plus/debugging.html">PlatformIO Unified Debugger</a>. In each part, we will explore new features and techniques which can greatly help us out when we bump into a thorny problem in a real project.</p>

<p>This series will cover a broad range of topics, starting from the basics like debugging a simple application running on your machine up to advanced topics like debugging a suite of unit tests on a remote embedded target. In each following post, we will use a new combination of debug probes and targets to show how easy it’s to switch between hardware simply by changing several lines in the PlatformIO configuration file.</p>

<p>Although throughout this series we will be using the PlatformIO IDE for VScode, PlatformIO Unified Debugger supports many other Desktop and Cloud development environments, including <a href="https://docs.platformio.org/en/latest/integration/ide/eclipse.html">Eclipse</a> and <a href="https://docs.platformio.org/en/latest/integration/ide/clion.html">JetBrains CLion</a>.</p>

<p>The first part provides a brief introduction to the debugging concept and gives a basic overview of debugging process used in the PlatformIO IDE for VSCode without any reference to the embedded software development. Setting breakpoints, adding watch expressions, and other essential features of the debugger are covered in this part.</p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#prerequisites" id="markdown-toc-prerequisites">Prerequisites</a></li>
  <li><a href="#basic-principles" id="markdown-toc-basic-principles">Basic Principles</a></li>
  <li><a href="#platformio-unified-debugger" id="markdown-toc-platformio-unified-debugger">PlatformIO Unified Debugger</a></li>
  <li><a href="#getting-started" id="markdown-toc-getting-started">Getting Started</a></li>
  <li><a href="#working-with-debugger" id="markdown-toc-working-with-debugger">Working with Debugger</a>    <ul>
      <li><a href="#debug-view" id="markdown-toc-debug-view">Debug View</a></li>
    </ul>
  </li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>This article uses the following components:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">VSCode with installed PlatformIO IDE extension</a></li>
  <li><a href="https://platformio.org/platforms/native">Native Development Platform</a></li>
</ul>

<h2 id="basic-principles">Basic Principles</h2>

<p>Modern software may be extremely complex, and sooner or later, we’ll find ourselves in a situation when some part of the code doesn’t work as expected. It’s not always clear what causes our code to behave incorrectly or even crash, so we need to get involved and figure out why and where an error occurs in our program. That process of finding and fixing such errors (so-called “bugs”) is called <em>Debugging</em>. Even though debugging is mostly a unique experience, a few general debugging principles can be picked out:</p>

<ul>
  <li>Reproduce the problem reliably</li>
  <li>Locate the source of the problem</li>
  <li>Understand the root cause of the problem</li>
  <li>Find a solution for the problem</li>
  <li>Apply the solution and test the fix</li>
</ul>

<p>While in simple projects we can make do with printing messages directly to the debug console as the code executes (commonly known as “Print Debugging”), it’s definitely a waste of time when it comes to reasonably complex projects. In such cases, we need more advanced and comprehensive instruments to better understand what actually is happening inside our code. Such tools are called <em>debuggers</em>. In general, debuggers allow working with the code interactively, controlling the execution line-by-line, examining CPU registers, inspecting variables, etc.</p>

<p>It’s also worth mentioning that to make use of a debugger we need to compile our code with debugging information (e.g. function locations). In general, such information is inserted by a compiler through the use of debugging symbols. An executable with debugging symbols can be executed as a regular binary, but it may be a slightly bigger size and run a bit slower due to disabled optimizations.</p>

<h2 id="platformio-unified-debugger">PlatformIO Unified Debugger</h2>

<p>Bringing up a debug configuration might be a daunting task. Developers need to get through complex UI windows just to configure a debugger before a debug session can be launched.</p>

<p>PlatformIO Unified Debugger is a user-friendly and extensible unified debugging environment with a set of advanced instruments, providing modern and powerful features to speed up, yet simplify, the creation and delivery of modern applications. A zero debugging configuration with support for the most popular debugging probes and compatibility between IDEs/OSes allowed to simplify the debugging process.</p>

<p>Developers can finally forget about complex UI windows which they need to pre-configure before a simple “Hello World!” debug session. No need to know any aspects about the debugging server or how to configure it because PlatformIO Unified Debugger does all the heavy lifting behind the scenes.</p>

<h2 id="getting-started">Getting Started</h2>

<p>First, we need to install the <code class="language-plaintext highlighter-rouge">native</code> development platform. PlatformIO doesn’t install any toolchains automatically for the native dev-platform and uses the toolchain (preferably based on GCC) native for your OS (on Windows it’s recommended to install MinGW and make it available via the <code class="language-plaintext highlighter-rouge">PATH</code> variable). Let’s install the native dev-platform via PlatformIO Home:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-1.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-1.png" />
</a></p>

<p>For the sake of simplicity, let’s write a simple application that sorts an array of integers using the <a href="https://en.wikipedia.org/wiki/Quicksort">Quicksort</a> algorithm. Instead of creating our project from scratch, we can import a “Hello World” example using the PlatformIO Home page:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-2.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-2.png" />
</a></p>

<p>Then simply replace the default code in <code class="language-plaintext highlighter-rouge">main.c</code> with the following code:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">xp</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">yp</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="o">*</span><span class="n">xp</span><span class="p">;</span>
    <span class="o">*</span><span class="n">xp</span> <span class="o">=</span> <span class="o">*</span><span class="n">yp</span><span class="p">;</span>
    <span class="o">*</span><span class="n">yp</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">sort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">first</span><span class="p">,</span> <span class="kt">int</span> <span class="n">last</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">last</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">first</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">last</span><span class="p">,</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">array</span><span class="p">[(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">];</span>
        <span class="k">do</span>
        <span class="p">{</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">middle</span><span class="p">)</span> <span class="n">left</span><span class="o">++</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">middle</span><span class="p">)</span> <span class="n">right</span><span class="o">--</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">array</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">array</span><span class="p">[</span><span class="n">right</span><span class="p">]);</span>
                <span class="n">left</span><span class="o">++</span><span class="p">;</span>
                <span class="n">right</span><span class="o">--</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">);</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">last</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">"Getting started with PlatformIO Unified Debugger!</span><span class="se">\r\n</span><span class="s">"</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">input_array</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">86</span> <span class="p">};</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">input_array</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">input_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">input_array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If we try to build the imported project, we should see the successful result:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-3.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-3.png" />
</a></p>

<p>Please note that the goal of this post is to focus on the debug workflow, so don’t rely on the code presented above in real projects.</p>

<h2 id="working-with-debugger">Working with Debugger</h2>

<p>Now we are ready to start debugging! To launch a new debug session we can use the following options:</p>

<ul>
  <li>Debug: Start debugging from the top menu</li>
  <li>Start Debugging option from the <code class="language-plaintext highlighter-rouge">Quick Access</code> menu</li>
  <li>Hotkey button <code class="language-plaintext highlighter-rouge">F5</code>:</li>
</ul>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-4.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-4.png" />
</a></p>

<p>Our program will start executing and then stop at the first breakpoint. Keep in mind that, by default, PlatformIO instructs the debugger to stop at the <code class="language-plaintext highlighter-rouge">main</code> function. Let’s take a closer look at our project using the debugger and its features.</p>

<h3 id="debug-view">Debug View</h3>

<p>When we start a debug session, the IDE switches to the “Debug View” with several panes which provide easy access to the debugger’s functionality:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-5.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-5.png" />
</a></p>

<p>Let’s look around and examine the most important elements.</p>

<h4 id="controlling-the-program-execution">Controlling the program execution</h4>

<p>The Debugger View provides complete control of the debugging process. You can access most of the essential control actions such as:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-6.png" alt="Debug Control Actions" />
  <figcaption class="figure-caption text-center">
    Control Actions
  </figcaption>
</figure>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Continue/Pause (F5)</code> runs the program until it locates a breakpoint and then stops.</li>
  <li><code class="language-plaintext highlighter-rouge">Step Over (F10)</code> executes the current statement and all functions that the statement calls and doesn’t suspend the execution until functions return.</li>
  <li><code class="language-plaintext highlighter-rouge">Step Into (F11)</code> advances the execution to the next statement. If the current statement is a function call, then the debugger steps into that function.</li>
  <li><code class="language-plaintext highlighter-rouge">Step Out (Shift+F11)</code> moves the execution out of the current function and back to the statement where the function was called.</li>
  <li><code class="language-plaintext highlighter-rouge">Restart (Ctrl+Shift+F5)</code> is a convenient shortcut for two operations: stopping the debug session and restarting the debugger.</li>
  <li><code class="language-plaintext highlighter-rouge">Stop (Shift+F5)</code> stops the debug session and terminates the program.</li>
</ul>

<h4 id="managing-breakpoints">Managing Breakpoints</h4>

<p>Breakpoints are one of the most important features of the debugging process. A breakpoint is a mechanism to suspend the execution of an application to inspect the state of variables with the ability to modify them to figure out why a problem is occurring. Usually, breakpoints are shown as red-filled circles in the editor margin.</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-7.png" alt="Breakpoints Window" />
  <figcaption class="figure-caption text-center">
    Breakpoints Window
  </figcaption>
</figure>

<p>We can toggle breakpoints directly in the editor pane by clicking on the left margin next to the current line or using the <code class="language-plaintext highlighter-rouge">F9</code> hotkey. A more precise configuration like group enabling, disabling, or setting breakpoint conditions can be done in the <code class="language-plaintext highlighter-rouge">Breakpoints</code> section. In the next posts in this series, we will take a deeper look at more advanced breakpoint configuration, including conditional and data breakpoints.</p>

<h4 id="call-stack">Call Stack</h4>

<p>Each time when the debugger pauses the execution (due to a breakpoint or during stepping), the sequence of function calls is displayed in the “Call Stack” window:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-8.png" alt="Call Stack Window" />
  <figcaption class="figure-caption text-center">
    Call Stack Window
  </figcaption>
</figure>

<p>The “Call Stack” window is useful when we need to examine the actual execution flow of an application. It shows the name of each called function, its address in memory, the file name and the line number where the function is defined. We can jump between stack frames and the debugger will automatically update the variables and registers. A green line will show where the execution pointer is currently located according to the selected stack frame.</p>

<h4 id="working-with-variables">Working with Variables</h4>

<p>The examination of variables is one of the essential steps for understanding why an application operates incorrectly. When the debugger is suspended, the “Variables” window allows us to inspect and modify the variables available in the context where an application is paused:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-9.png" alt="Variables Window" />
  <figcaption class="figure-caption text-center">
    Variables Window
  </figcaption>
</figure>

<p>If we double-click the value for a variable, we can edit its value. It may be useful when there is a need to verify how an application would work in a certain condition at runtime.</p>

<h4 id="watch-expressions">Watch Expressions</h4>

<p>The Watch window allows us to specify a variable (or an expression) that will be reevaluated and displayed every time the debugger stops:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-10.png" alt="Watch Window" />
  <figcaption class="figure-caption text-center">
    Watch Window
  </figcaption>
</figure>

<p>To add a new watch expression click the <code class="language-plaintext highlighter-rouge">+</code> button in the top right corner of the panel, type the expression into the text field, and press Enter to save it. The expression will be evaluated each time when the code hits a breakpoint or when we step through the code. Unlike the frame-specific “Variables” window, the “Watch” window always shows the variables that we’ve added.</p>

<h2 id="conclusion">Conclusion</h2>

<p>All developers make mistakes, and as a result, bugs show up. Learning how to debug effectively takes time, but in the long run, it can make the development process less stressful when an unexpected side effect happens. A debugger in any programming language is an essential instrument for tracking down problems in code, especially in a large and complex codebase.</p>

<p>In this post, we only scratched the surface of capabilities available in PlatformIO Unified Debugger. There is a lot of useful functionality we didn’t cover in this post which can greatly help us in real projects. The <a href="/blog/insights/debugging-embedded.html">next post</a> will be more embedded-specific, we’ll look at some more advanced features, such as peripheral and disassembly views, advanced breakpoints, and much more!</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><category term="featured" /><summary type="html"><![CDATA[Debugging is an inseparable part of the development process. The first part provides a brief introduction to the debugging concept and covers the basics of debugging process used in the PlatformIO IDE for VSCode.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-09-20-debugging-introduction/title.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-09-20-debugging-introduction/title.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Core 5.2 🚀</title><link href="https://piolabs.com/blog/news/platformio-core-5-2-released.html" rel="alternate" type="text/html" title="PlatformIO Core 5.2 🚀" /><published>2021-09-13T00:00:00+03:00</published><updated>2021-09-13T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-core-5-2-released</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-core-5-2-released.html"><![CDATA[<p>We are happy to announce the next release of PlatformIO Core with the boosted PlatformIO Debugging performance, support for the latest SCons 4.2, improved package management system, and many other minor fixes and improvements.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-released.png" alt="PlatformIO Core 5.2 🚀" /></p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#what-is-new" id="markdown-toc-what-is-new">What is New</a>    <ul>
      <li><a href="#debugging" id="markdown-toc-debugging">Debugging</a></li>
      <li><a href="#build-system" id="markdown-toc-build-system">Build System</a></li>
      <li><a href="#package-management" id="markdown-toc-package-management">Package Management</a></li>
      <li><a href="#static-code-analysis" id="markdown-toc-static-code-analysis">Static Code Analysis</a></li>
    </ul>
  </li>
  <li><a href="#upgrade" id="markdown-toc-upgrade">Upgrade</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="what-is-new">What is New</h2>

<p>In this section, we are going to highlight the most important changes and features introduced in PlatformIO Core 5.2.
Please visit <a href="https://github.com/platformio/platformio-core/releases/tag/v5.2.0" target="_blank">PlatformIO 5.2.0 Release Notes</a> for more detailed information.</p>

<h3 id="debugging">Debugging</h3>

<p>In our ongoing effort to improve the debugging experience in PlatformIO, we’ve managed to prepare several great new features and enhancements that will help developers debug their projects in a much faster and effective way.</p>

<h4 id="boosted-performance">Boosted Performance</h4>

<p>PlatformIO Core 5.2 brings significantly boosted debugging performance by migrating the codebase to the pure Python 3 Asynchronous I/O stack. This approach solves previous issues caused by the Twisted engine that depends on operating system libraries and 3rd-party Python packages. Thanks to these improvements, developers can get a blazingly fast and responsive debugging experience even in CLI mode!</p>

<!-- Youtube video -->
<p><a data-bigpicture="{&quot;ytSrc&quot;: &quot;NngpaA2klAY&quot;}" href="#">
  <img src="/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-debug-demo-cover.jpg" class="img-fluid" alt="PlatformIO Core 5.2 🚀" />
</a></p>

<h4 id="unit-tests-debugging">Unit Tests Debugging</h4>

<p>It’s an incredibly frustrating situation when a test fails for no obvious reason. Printing variables to the console while trying to find where your test is misbehaving can take a significant amount of time and patience. On the other hand, a full-featured debug session with the ability to step through the code of your unit tests can give all the necessary information to hunt down and isolate bugs in your codebase. PlatformIO Core 5.2 makes debugging tests incredibly easy simply by adding a <a href="https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-test">single line</a> your configuration file:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[env:debug_unit_tests]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">ststm32</span>
<span class="py">framework</span> <span class="p">=</span> <span class="s">arduino</span>
<span class="py">board</span> <span class="p">=</span> <span class="s">nucleo_f401re</span>
<span class="c">; Use a test file located in the test directory as the entry point
</span><span class="py">debug_test</span> <span class="p">=</span> <span class="s">*</span>
</code></pre></div></div>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-unit-tests.gif&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-13-platformio-core-5-2-released/debug-unit-tests.gif" />
</a></p>

<h4 id="debugger-for-native-platform">Debugger for Native Platform</h4>

<p>Even though PlatformIO was created to help develop embedded projects, it’s always handy to be able to run and debug projects locally without the need to upload the code to an embedded target. Starting with PlatformIO Core 5.2, embedded developers can debug their applications on host machines using the same usual workflow.</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-native.gif&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-13-platformio-core-5-2-released/debug-native.gif" />
</a></p>

<h4 id="debugging-in-cli-mode-on-windows">Debugging in CLI Mode on Windows</h4>

<p>Another commonly requested feature implemented in PlatformIO Core 5.2 is debugging projects on Windows OS via the command-line interface. Although the CLI might not be as user-friendly as a feature-rich IDE, it’s still a great instrument to quickly and efficiently find bugs in your codebase.</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-windows-cli.gif&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-13-platformio-core-5-2-released/debug-windows-cli.gif" />
</a></p>

<h3 id="build-system">Build System</h3>

<h4 id="scons-42">SCons 4.2</h4>

<p>The PlatformIO Core 5.2 build engine has been upgraded to the latest <a href="https://scons.org/" target="_blank">SCons 4.2 - a next-generation software construction tool</a>:</p>

<ul>
  <li><a href="https://docs.platformio.org/page/projectconf/advanced_scripting.html">Configuration files are Python scripts</a> – use the power of a real programming language to solve build problems</li>
  <li>Built-in reliable and automatic dependency analysis</li>
</ul>

<h3 id="package-management">Package Management</h3>

<p>PlatformIO Core 5.2 introduces the updated package management system with a more error-proof and intuitive package publishing process. Now, any package manifest is validated on the client side and its metadata is shown in a readable format before publishing it to the PlatformIO Trusted Registry.</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-13-platformio-core-5-2-released/package-management-updates.gif&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-13-platformio-core-5-2-released/package-management-updates.gif" />
</a></p>

<p>Improved checks for conflicting names and duplicates will catch accidental errors and typos in package manifests and won’t allow developers to publish erroneous packages to the PlatformIO Trusted Registry.</p>

<p>Additionally, a new CLI option <code class="language-plaintext highlighter-rouge">--non-interactive</code> might come in handy for automated uploads directly from CI/CD services in your deployment pipeline.</p>

<h3 id="static-code-analysis">Static Code Analysis</h3>

<p>We’ve updated backend static analysis tools to the latest available versions. Now developers can identify even more potential bugs, vulnerabilities and security threats.</p>

<ul>
  <li><a href="https://docs.platformio.org/page/plus/check-tools/clang-tidy.html">Clang-Tidy</a> v12.0.1 with new modules and extended checks list</li>
  <li><a href="https://docs.platformio.org/page/plus/check-tools/cppcheck.html">Cppcheck</a> v2.5.0 with improved code analysis and MISRA improvements</li>
  <li><a href="https://docs.platformio.org/page/plus/check-tools/pvs-studio.html">PVS-Studio</a> v7.14 with support for intermodular analysis, improved MISRA support and new diagnostics</li>
</ul>

<h2 id="upgrade">Upgrade</h2>

<ul>
  <li><strong>PlatformIO IDE</strong>: Left Sidebar &gt; PlatformIO (icon) &gt; Quick Access &gt; Upgrade PlatformIO Core</li>
  <li><strong>Terminal</strong>: Please run <code class="language-plaintext highlighter-rouge">pio upgrade</code> command in terminal.</li>
</ul>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><category term="featured" /><summary type="html"><![CDATA[PlatformIO Core 5.2 is out with boosted PlatformIO Debugging performance, support for SCons 4.2, and improved package management system]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-released.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-released.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Microsoft leverages PlatformIO for its course “IoT for Beginners”</title><link href="https://piolabs.com/blog/news/microsoft-leverages-platformio.html" rel="alternate" type="text/html" title="Microsoft leverages PlatformIO for its course “IoT for Beginners”" /><published>2021-09-06T00:00:00+03:00</published><updated>2021-09-06T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/microsoft-leverages-platformio</id><content type="html" xml:base="https://piolabs.com/blog/news/microsoft-leverages-platformio.html"><![CDATA[<p>IoT — the Internet of Things — is one of the biggest growth areas in technology, and one that, to me, is very exciting. You start with a device like a microcontroller, sprinkle some sensors, dust with code, mix in some cloud services and poof! You have smart cities, self-driving cars, automated farming, robotic supermarkets, or devices that can clean your toilet after you shout at Alexa for the third time.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-1.png" alt="PlatformIO lowers the barriers to entry the IoT market as much as possible" /></p>

<p>In my day job at Microsoft, I often get asked how to get started with IoT. Not just “how do I connect my device to the cloud”, but really get started with understanding devices, sensors, actuators, and writing those all-important first lines of code.</p>

<p>This is why a few of us spent a number of months putting together <a href="https://github.com/microsoft/IoT-For-Beginners" target="_blank">IoT for beginners</a>, a 24-lesson curriculum designed for teachers, students and learners of all types who want to learn IoT. This curriculum uses project-guided learning, built around the journey of food from farm to table, covering digital agriculture, logistics, manufacturing, retail, and consumer products.</p>

<p><img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-logo.png" alt="PlatformIO featured in Microsoft course IoT for Beginners" /></p>

<p>We wanted to make sure we covered a range of hardware choices – Arduino for those interested in microcontrollers, and Raspberry Pis for those interested in single-board computers. When using this hardware, we also wanted to lower the barriers to entry as much as possible. We needed to pick an ecosystem for components to reduce the need to solder and understand electronics, and we needed to ensure the software we recommended worked to support the learner, not be another hurdle to overcome.</p>

<p><img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-2.png" alt="PlatformIO is the preferred tool for Microsoft IoT curriculum" /></p>

<p>It was an easy decision to pick PlatformIO as our development tool of choice for microcontroller development. Although other tools are available, such as Arduino’s own IDE, PlatformIO is our preferred tool for this curriculum for several reasons:</p>

<ul>
  <li>
    <p><strong>Visual Studio Code integration</strong> – VS Code is an incredibly powerful developer text editor, with an extension model that supports many different languages and tools. Using PlatformIO meant learners can use the same tool to not only program their microcontrollers, but also to build the cloud services that make up modern IoT applications. One tool for C++ on the device, Python in cloud-based serverless functions, and JavaScript and HTML for data visualization web sites.</p>
  </li>
  <li>
    <p><strong>Integration with the Microsoft C/C++ language tooling</strong> – The language tooling for C/C++ in VS Code is incredibly powerful, providing the intellisense, code completion, navigation, and other features that modern developers expect from their tools. All this comes for free when developing Arduino applications in C/C++.</p>
  </li>
  <li>
    <p><strong>Library management</strong> – Arduino library management can be confusing, especially for beginners. Knowing which libraries to add to your project, setting up additional library paths, and managing library versions are all complexities that beginners don’t want to handle, they just want the code to work. Being able to manage these from a single project configuration file removes these complexities, and allows developers to just grab some code, compile it and go, rather than have to know what libraries are needed and manually work to install them.</p>
  </li>
  <li>
    <p><strong>All in one tooling</strong> – Developing for embedded devices can mean a headache of installing different tools, sometimes breaking your existing tooling for other platforms. PlatformIO takes this headache away by installing everything you need in an isolated way. We knew we could instruct learners to install PlatformIO and pick their board, and it wouldn’t break anything they already have installed, and wouldn’t limit what they could do in the future with different hardware.</p>
  </li>
  <li>
    <p><strong>Multi-platform support</strong> – PlatformIO and VS Code can run on Windows, macOS, Linux and even on Raspberry Pi OS, meaning most developers can get started using it.</p>
  </li>
  <li>
    <p><strong>Preparing learners for the future</strong> – Although our IoT for beginners course only focuses on Arduino for microcontroller development with the Wio Terminal, we wanted to ensure the skills they learned transfer to other boards and frameworks. By using PlatformIO they would be able to continue their IoT journey using the same tools, and not have to start their learning again outside of their comfort zone.</p>
  </li>
</ul>

<p>Grab your microcontroller and some <a href="https://www.seeedstudio.com/IoT-for-beginners-with-Seeed-and-Microsoft-Wio-Terminal-Starter-Kit-p-5006.html" target="_blank">sensors from our friends at Seeed Studio</a>, fire up VS Code, install PlatformIO and get learning.</p>

<p>Without further ado, please meet <a href="https://github.com/microsoft/IoT-For-Beginners" target="_blank">IoT For Beginners: A Curriculum</a>!</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-roadmap.jpg&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-roadmap.jpg" />
</a></p>

<h2 id="about-microsoft">About Microsoft</h2>

<p>Microsoft Corporation was founded in 1975 and is a leading global vendor of computer software and hardware that develops, licenses and supports a wide range of products, services, devices, and solutions, with a mission to empower every person and every organization on the planet to achieve more.</p>

<h2 id="about-platformio-labs">About PlatformIO Labs</h2>

<p>PlatformIO Labs is the corporate sponsor behind the PlatformIO open-source project. PlatformIO is a next-generation, professional collaborative platform for embedded development that enables customers to save resources and time by vastly reducing the expenses and labor associated with creating and maintaining product software. Its modern architecture is unmatched in the embedded tools market, and the result benefits developers everywhere by simplifying complexity and increasing productivity. PlatformIO Labs is a privately-held company headquartered in Tallinn, Estonia and with an R&amp;D branch in Ukraine. To learn more, follow them on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a>, Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a>, or visit <a href="https://piolabs.com/">piolabs.com</a>.</p>]]></content><author><name>Jim Bennett</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[Learn the Internet of things in a 24-lesson curriculum designed for teachers, students and learners of all types who want to explore IoT with VS Code and PlatformIO]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-logo.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source August Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-august-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source August Updates" /><published>2021-09-01T00:00:00+03:00</published><updated>2021-09-01T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-august-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-august-2021-updates.html"><![CDATA[<p>Welcome to the August 2021 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-august-news.jpg" alt="PlatformIO Open Source August Updates" /></p>

<p>During August, we updated support for the latest STM32Cube versions, rolled out updates for the Atmel AVR/megaAVR, Espressif32/8266 and Nordic nRF52 development platforms, resolved a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#st-stm32-dev-platform-v142" id="markdown-toc-st-stm32-dev-platform-v142">ST STM32 dev-platform v14.2</a></li>
  <li><a href="#nordic-nrf52-dev-platform-v83" id="markdown-toc-nordic-nrf52-dev-platform-v83">Nordic nRF52 dev-platform v8.3</a></li>
  <li><a href="#atmel-avr-dev-platform-v34" id="markdown-toc-atmel-avr-dev-platform-v34">Atmel AVR dev-platform v3.4</a></li>
  <li><a href="#atmel-megaavr-dev-platform-v15" id="markdown-toc-atmel-megaavr-dev-platform-v15">Atmel megaAVR dev-platform v1.5</a></li>
  <li><a href="#espressif-8266-v32" id="markdown-toc-espressif-8266-v32">Espressif 8266 v3.2</a></li>
  <li><a href="#espressif-32-dev-platform-v332" id="markdown-toc-espressif-32-dev-platform-v332">Espressif 32 dev-platform v3.3.2</a></li>
  <li><a href="#arduino-core-for-mbed-enabled-devices-v241" id="markdown-toc-arduino-core-for-mbed-enabled-devices-v241">Arduino Core for mbed-enabled devices v2.4.1</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="st-stm32-dev-platform-v142">ST STM32 dev-platform v14.2</h2>

<p>The latest release of the <a href="https://platformio.org/platforms/ststm32">ST STM32</a> platform comes with updated STM32Cube packages and Arduino-mbed core v2.4.1:</p>

<ul>
  <li>Updated STM32Cube packages:
    <ul>
      <li>STM32CubeF0 <code class="language-plaintext highlighter-rouge">v1.11.3</code>, STM32CubeF1 <code class="language-plaintext highlighter-rouge">v1.8.4</code>, STM32CubeF2 <code class="language-plaintext highlighter-rouge">v1.9.3</code>, STM32CubeF3 <code class="language-plaintext highlighter-rouge">v1.11.3</code>, STM32CubeF4 <code class="language-plaintext highlighter-rouge">v1.26.2</code>, STM32CubeF7 <code class="language-plaintext highlighter-rouge">v1.16.1</code>, STM32CubeG0 <code class="language-plaintext highlighter-rouge">v1.5.0</code>, STM32CubeG4 <code class="language-plaintext highlighter-rouge">v1.4.0</code>, STM32CubeH7 <code class="language-plaintext highlighter-rouge">v1.9.0</code>, STM32CubeL0 <code class="language-plaintext highlighter-rouge">v1.12.1</code>, STM32CubeL1 <code class="language-plaintext highlighter-rouge">v1.10.3</code>, STM32CubeL4 <code class="language-plaintext highlighter-rouge">v1.17.0</code>, STM32CubeL5 <code class="language-plaintext highlighter-rouge">v1.4.0</code></li>
    </ul>
  </li>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.4.1</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.4.1">release notes</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the ST STM32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-ststm32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="nordic-nrf52-dev-platform-v83">Nordic nRF52 dev-platform v8.3</h2>

<p>The new release of <a href="https://platformio.org/platforms/nordicnrf52">Nordic nRF52</a> dev-platform brings support for two new boards, the latest stable Adafruit Arduino core v1.0 and Arduino-mbed core v2.4.1:</p>

<ul>
  <li>New boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/nordicnrf52/laird_bl653_dvk.html">Laird Connectivity BL653 Development Kit</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/nordicnrf52/ublox_bmd345eval_nrf52840.html">u-blox BMD-345-EVAL</a></li>
    </ul>
  </li>
  <li>Updated Arduino Adafruit Сore to <code class="language-plaintext highlighter-rouge">v1.0.0</code> (<a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/0.24.0">release notes</a>)</li>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.4.1</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.4.1">release notes</a>)</li>
</ul>

<p><strong>Related resources for the Nordic nRF52 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-nordicnrf52/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="atmel-avr-dev-platform-v34">Atmel AVR dev-platform v3.4</h2>

<p>The latest release of the <a href="https://platformio.org/platforms/atmelavr">Atmel AVR</a> v3.4.0 brings updates for highly customizable Arduino cores by MCUdude, the latest “simavr” packages and several minor improvements:</p>

<ul>
  <li>Updated MCUdude’s cores:
    <ul>
      <li>MajorCore <code class="language-plaintext highlighter-rouge">v2.1.3</code> (<a href="https://github.com/MCUdude/MajorCore/releases/tag/v2.1.3">release notes</a>)</li>
      <li>MegaCore <code class="language-plaintext highlighter-rouge">v2.1.3</code> (<a href="https://github.com/MCUdude/MegaCore/releases/tag/v2.1.3">release notes</a>)</li>
      <li>MightyCore <code class="language-plaintext highlighter-rouge">v2.1.3</code> (<a href="https://github.com/MCUdude/MightyCore/releases/tag/v2.1.3">release notes</a>)</li>
      <li>MiniCore <code class="language-plaintext highlighter-rouge">v2.1.3</code> (<a href="https://github.com/MCUdude/MiniCore/releases/tag/v2.1.3">release notes</a>)</li>
      <li>MicroCore <code class="language-plaintext highlighter-rouge">v2.1.0</code> (<a href="https://github.com/MCUdude/MicroCore/releases/tag/v2.1.0">release notes</a>)</li>
    </ul>
  </li>
  <li>Updated simavr packages to <code class="language-plaintext highlighter-rouge">v1.7.0</code></li>
  <li>Fixed default clock source for several boards from ATTinyCore</li>
  <li>Fixed memory sizes for SparkFun ATmega128RFA1 Dev Board</li>
  <li>Minor fixes</li>
</ul>

<p><strong>Related resources for the Atmel AVR dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/atmelavr.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-atmelavr/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="atmel-megaavr-dev-platform-v15">Atmel megaAVR dev-platform v1.5</h2>

<p>The new release of the <a href="https://platformio.org/platforms/atmelmegaavr">Atmel megaAVR</a> v1.5.0 comes with updated Arduino cores and several minor improvements:</p>

<ul>
  <li>Updated MegaTinyCore to <code class="language-plaintext highlighter-rouge">v2.4.0</code> (<a href="https://github.com/SpenceKonde/megaTinyCore/releases/tag/2.4.0">release notes</a>)</li>
  <li>Updated MegaCoreX to <code class="language-plaintext highlighter-rouge">v1.0.9</code> (<a href="https://github.com/MCUdude/MegaCoreX/releases/tag/v1.0.9">release notes</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the Atmel megaAVR dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="espressif-8266-v32">Espressif 8266 v3.2</h2>

<p>The latest revision of the <a href="https://platformio.org/platforms/espressif8266">Espressif 8266</a> dev-platform brings support for the latest Arduino core v3.0.2 together with the latest GCC toolchain v10.3.0:</p>

<ul>
  <li>Updated Arduino Core to the latest <code class="language-plaintext highlighter-rouge">v3.0.2</code> (<a href="https://github.com/esp8266/Arduino/releases/tag/3.0.2">release notes</a>)</li>
  <li>Updated toolchain packages to the latest <code class="language-plaintext highlighter-rouge">v10.3.0-1757bed</code></li>
</ul>

<p><strong>Related resources for the Espressif 8266 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif8266.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif8266/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="espressif-32-dev-platform-v332">Espressif 32 dev-platform v3.3.2</h2>

<p>The latest <a href="https://platformio.org/platforms/espressif32">Espressif32</a> v3.3.2 is mostly a maintenance release that brings several important bugfixes and improvements:</p>

<ul>
  <li>Better handling of custom ESP-IDF packages</li>
  <li>Fixed RAM size for M5Stack Core2 and M5Stack FIRE</li>
  <li>Fixed an issue with whitespace characters in file names specified as binary data</li>
  <li>Fixed flash mode for the TinyPICO board</li>
</ul>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arduino-core-for-mbed-enabled-devices-v241">Arduino Core for mbed-enabled devices v2.4.1</h2>

<p>The <a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">ST STM32</a>, <a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Nordic nRF52</a> and <a href="https://docs.platformio.org/en/latest/platforms/raspberrypi.html">Raspberry Pi RP2040</a> dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.4.1. According to the <a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.4.1">release notes</a>, v2.4.1 brings updated variants rebuilt on mbed v6.13, improvements in core and bundled libraries.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[New boards & dev-kits, Support for the latest STM32Cube packages, Updated Arduino Cores for Espressif 8266, Microchip AVR, Nordic nRF52 and Mbed-enabled devices]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-august-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-august-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source July Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-july-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source July Updates" /><published>2021-08-02T00:00:00+03:00</published><updated>2021-08-02T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-july-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-july-2021-updates.html"><![CDATA[<p>Welcome to the July 2021 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-july-news.jpg" alt="PlatformIO Open Source July Updates" /></p>

<p>During July, we added support for Zephyr v2.6.0, rolled out updates for the STMicroelectronics STM32, Nordic nRF52, Teensy and Espressif32 development platforms, resolved a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#zephyr-v260-new-dev-kits-refactored-logging-subsystem-and-improved-power-management" id="markdown-toc-zephyr-v260-new-dev-kits-refactored-logging-subsystem-and-improved-power-management">Zephyr v2.6.0: New dev-kits, refactored logging subsystem and improved power management</a></li>
  <li><a href="#st-stm32-dev-platform-v141" id="markdown-toc-st-stm32-dev-platform-v141">ST STM32 dev-platform v14.1</a></li>
  <li><a href="#nordic-nrf52-dev-platform-v82" id="markdown-toc-nordic-nrf52-dev-platform-v82">Nordic nRF52 dev-platform v8.2</a></li>
  <li><a href="#teensy-dev-platform-v413" id="markdown-toc-teensy-dev-platform-v413">Teensy dev-platform v4.13</a></li>
  <li><a href="#espressif32-dev-platform-v331" id="markdown-toc-espressif32-dev-platform-v331">Espressif32 dev-platform v3.3.1</a></li>
  <li><a href="#arduino-core-for-mbed-enabled-devices-v23" id="markdown-toc-arduino-core-for-mbed-enabled-devices-v23">Arduino Core for mbed-enabled devices v2.3</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="zephyr-v260-new-dev-kits-refactored-logging-subsystem-and-improved-power-management">Zephyr v2.6.0: New dev-kits, refactored logging subsystem and improved power management</h2>

<p>We’re happy to announce updated support for a new release v2.6.0 of Zephyr Project - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind.</p>

<p><strong>Major enhancements in v2.6.0:</strong></p>

<ul>
  <li>Overhauled Logging subsystem</li>
  <li>Overhauled Tracing subsystem including expansion for tracing points</li>
  <li>Improvements to device runtime power management</li>
</ul>

<p><strong>Related resources for Zephyr framework</strong>:</p>

<ul>
  <li><a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.6.0">Release notes for v2.6.0</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html">Documentation for Zephyr framework</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms">Supported development platforms</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards">Supported boards</a></li>
</ul>

<h2 id="st-stm32-dev-platform-v141">ST STM32 dev-platform v14.1</h2>

<p>The latest release of the <a href="https://platformio.org/platforms/ststm32">ST STM32</a> platform comes with several new boards and dev-kits, support for the latest Zephyr v2.6.0 and Arduino-mbed core v2.3:</p>

<ul>
  <li>Added new boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/disco_g071rb.html">ST STM32G071B Discovery</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_h753zi.html">ST Nucleo H753ZI</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_wl55jc.html">ST Nucleo WL55JC</a></li>
    </ul>
  </li>
  <li>Updated Zephyr framework to <code class="language-plaintext highlighter-rouge">v2.6.0</code> (<a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.6.0">release notes</a>)</li>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.3.1</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.3.1">release notes</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the ST STM32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-ststm32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="nordic-nrf52-dev-platform-v82">Nordic nRF52 dev-platform v8.2</h2>

<p>The new release of <a href="https://platformio.org/platforms/nordicnrf52">Nordic nRF52</a> dev-platform brings support for Zephyr 2.6.0, updated Arduino cores and several minor bugfixes and improvements:</p>

<ul>
  <li>Updated Zephyr framework to <code class="language-plaintext highlighter-rouge">v2.6.0</code> (<a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.6.0">release notes</a>)</li>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.3.1</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.3.1">release notes</a>)</li>
  <li>Updated Arduino Adafruit core to <code class="language-plaintext highlighter-rouge">v0.24.0</code> (<a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/0.24.0">release notes</a>)</li>
  <li>Switched to a standalone <code class="language-plaintext highlighter-rouge">adafruit-nrfutil</code> package from PlatformIO Registry</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the Nordic nRF52 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-nordicnrf52/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="teensy-dev-platform-v413">Teensy dev-platform v4.13</h2>

<p>The new release of the <a href="https://platformio.org/platforms/teensy">Teensy</a> dev-platform comes with support for the latest Teensyduino v1.54 with a new development board:</p>

<ul>
  <li>New board <a href="https://docs.platformio.org/en/latest/boards/teensy/teensymm.html">SparkFun MicroMod Teensy</a></li>
  <li>Updated Teensyduino to <code class="language-plaintext highlighter-rouge">v1.54</code> (<a href="https://github.com/PaulStoffregen/cores/releases/tag/1.54">release notes</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the Teensy dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/teensy.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-teensy/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="espressif32-dev-platform-v331">Espressif32 dev-platform v3.3.1</h2>

<p>The latest <a href="https://platformio.org/platforms/espressif32">Espressif32</a> v3.3.1 is mostly a maintenance release that brings several important bugfixes and improvements:</p>

<ul>
  <li>Updated the OpenOCD package to the latest <code class="language-plaintext highlighter-rouge">v0.10.0-esp32-20210721</code> (<a href="https://github.com/espressif/openocd-esp32/releases/tag/v0.10.0-esp32-20210721">release notes</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">Esp32ExceptionDecoder</code> now supports uppercase hex addresses in backtraces (#582)</li>
  <li>Better handling of ESP-IDF configuration files (#588)</li>
  <li>Removed dynamic reconfiguration of SPI Flash mode for <code class="language-plaintext highlighter-rouge">esptoolpy</code> (#584)</li>
</ul>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arduino-core-for-mbed-enabled-devices-v23">Arduino Core for mbed-enabled devices v2.3</h2>

<p>The <a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">ST STM32</a>, <a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Nordic nRF52</a> and <a href="https://docs.platformio.org/en/latest/platforms/raspberrypi.html">Raspberry Pi RP2040</a> dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.3. According to the <a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.3.1">release notes</a>, v2.3 brings a lot of bugfixes and improvements in core and bundled libraries.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[New boards & dev-kits, Support for Zephyr v2.6.0 and Teensyduino v1.54, Updated Arduino Cores for Nordic nRF52 and Mbed-enabled devices]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-july-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-july-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>