<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://piolabs.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://piolabs.com/" rel="alternate" type="text/html" /><updated>2021-07-01T11:22:34+03:00</updated><id>https://piolabs.com/feed.xml</id><title type="html">PlatformIO Labs</title><subtitle>A proven technology used by global innovators and by over a million embedded developers around the world.</subtitle><author><name>PlatformIO Labs</name><email>contact@piolabs.com</email></author><entry><title type="html">PlatformIO Open Source June Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-june-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source June Updates" /><published>2021-07-01T00:00:00+03:00</published><updated>2021-07-01T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-june-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-june-2021-updates.html">&lt;p&gt;Welcome to the June 2021 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-june-news.jpg&quot; alt=&quot;PlatformIO Open Source June Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During June, we have released a new version of the Espressif32 dev-platform with support for the latest ESP-IDF v4.3 and the ESP32-C3 SoC, rolled out updates for the Espressif8266, Microchip SAM and ST STM32 platform, fixed a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#esp-idf-v43&quot; id=&quot;markdown-toc-esp-idf-v43&quot;&gt;ESP-IDF v4.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif32-dev-platform-v33&quot; id=&quot;markdown-toc-espressif32-dev-platform-v33&quot;&gt;Espressif32 dev-platform v3.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif8266-dev-platform-v31&quot; id=&quot;markdown-toc-espressif8266-dev-platform-v31&quot;&gt;Espressif8266 dev-platform v3.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v62&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v62&quot;&gt;Atmel SAM dev-platform v6.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#st-stm32-dev-platform-v1401&quot; id=&quot;markdown-toc-st-stm32-dev-platform-v1401&quot;&gt;ST STM32 dev-platform v14.0.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;esp-idf-v43&quot;&gt;ESP-IDF v4.3&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for the latest stable &lt;strong&gt;ESP-IDF v4.3&lt;/strong&gt; - the official development framework for the ESP32, ESP32-S and ESP32-C Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in the latest release:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP32-C3&lt;/code&gt; SoC&lt;/li&gt;
  &lt;li&gt;Updated FreeRTOS, based on upstream version v10.2.0&lt;/li&gt;
  &lt;li&gt;Improved heap algorith based on TLSF&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on project configuration for ESP-IDF can be found &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for ESP-IDF&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/espressif/esp-idf/releases/tag/v4.3&quot;&gt;Release notes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4.3&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html&quot;&gt;Documentation for ESP-IDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif32-dev-platform-v33&quot;&gt;Espressif32 dev-platform v3.3&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif 32&lt;/a&gt; dev-platform comes with support for the latest ESP-IDF v4.3 and the new ESP32-C3 SoC, updated packages and several minor fixes and improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new board: &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/esp32-c3-devkitm-1.html&quot;&gt;Espressif ESP32-C3-DevKitM-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP-IDF&lt;/code&gt; to the latest stable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Updated OpenOCD to the latest v0.10.0-20210401 (&lt;a href=&quot;https://github.com/espressif/openocd-esp32/releases/tag/v0.10.0-esp32-20210401&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdkconfig&lt;/code&gt; files are now generated for each environment separately (#539)&lt;/li&gt;
  &lt;li&gt;The global &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IDF_TOOLS_PATH&lt;/code&gt; variable is now disabled within the isolated PlatformIO environment (#555)&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-espressif32/releases/tag/v3.3.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;espressif8266-dev-platform-v31&quot;&gt;Espressif8266 dev-platform v3.1&lt;/h2&gt;

&lt;p&gt;The latest revision of the &lt;a href=&quot;https://platformio.org/platforms/espressif8266&quot;&gt;Espressif 8266&lt;/a&gt; dev-platform brings support for the latest Arduino core v3.0.1 together with the latest GCC toolchain v10.2.0 and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mklittlefs&lt;/code&gt; tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Arduino Core to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.0.1&lt;/code&gt; (&lt;a href=&quot;https://github.com/esp8266/Arduino/releases/tag/3.0.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated toolchain packages to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v10.3.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mklittlefs&lt;/code&gt; tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-espressif8266/releases/tag/v3.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v62&quot;&gt;Atmel SAM dev-platform v6.2&lt;/h2&gt;

&lt;p&gt;The new &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; v6.2 comes with a new SparkFun board, updated Arduino cores and minor fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New board &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelsam/sparkfun_samd51_micromod.html&quot;&gt;SparkFun SAMD51 MicroMod&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Update Sparkfun SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Updated LowPowerLab Moteino SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.6.3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Updated SODAQ SAMD &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.6&lt;/code&gt; (&lt;a href=&quot;https://github.com/SodaqMoja/SodaqCore-samd/releases/tag/v1.8.6-sodaq&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;st-stm32-dev-platform-v1401&quot;&gt;ST STM32 dev-platform v14.0.1&lt;/h2&gt;

&lt;p&gt;The latest &lt;a href=&quot;https://platformio.org/platforms/ststm32&quot;&gt;ST STM32&lt;/a&gt; v14.0.1 is mostly a maintenance release that brings several important bugfixes and improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated build script for the &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/libopencm3.html&quot;&gt;libOpenCM3&lt;/a&gt; framework&lt;/li&gt;
  &lt;li&gt;Fixed an issue with incorrect size of the RAM memory for Arduino-enabled L4-based boards&lt;/li&gt;
  &lt;li&gt;Fixed OpenOCD target for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vccgnd_f407zg_mini&lt;/code&gt; board&lt;/li&gt;
  &lt;li&gt;Fixed default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LINKFLAGS&lt;/code&gt; for SPL for lower memory footprint&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-ststm32/releases/tag/v14.0.1&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the June 2021 updates of PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-june-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-june-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unit Testing with PlatformIO: Part 3. Continuous Integration and Remote Testing</title><link href="https://piolabs.com/blog/insights/unit-testing-part-3.html" rel="alternate" type="text/html" title="Unit Testing with PlatformIO: Part 3. Continuous Integration and Remote Testing" /><published>2021-06-09T00:00:00+03:00</published><updated>2021-06-09T00:00:00+03:00</updated><id>https://piolabs.com/blog/insights/unit-testing-part-3</id><content type="html" xml:base="https://piolabs.com/blog/insights/unit-testing-part-3.html">&lt;p&gt;In recent years &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot; target=&quot;_blank&quot;&gt;Continuous Integration&lt;/a&gt; (CI) has become a standard for software development and embedded projects are no exception. Continuous integration allows developers to build an application and run tests in an automated way. Whenever new changes are committed to the repository, the CI system executes predefined tasks to make sure that the project works as expected and no regression was introduced. Besides compiling and running tests, we also can perform additional actions like static code analysis, applying code formatting, etc.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the previous posts (&lt;a href=&quot;/blog/insights/unit-testing-part-1.html&quot; target=&quot;_blank&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/blog/insights/unit-testing-part-2.html&quot; target=&quot;_blank&quot;&gt;Part 2&lt;/a&gt;) we’ve covered the basics of unit testing and put together a practical development environment for writing and running tests on both sides: the host machine and an embedded device. This article will show how to set up a simple CI workflow based on the &lt;a href=&quot;https://github.com/features/actions&quot; target=&quot;_blank&quot;&gt;GitHub Actions&lt;/a&gt; service and then configure the CI server to run the tests on a remote device using &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/pio-remote.html&quot; target=&quot;_blank&quot;&gt;PlatformIO Remote Development Solution&lt;/a&gt;.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot; id=&quot;markdown-toc-prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-github-actions&quot; id=&quot;markdown-toc-setting-up-github-actions&quot;&gt;Setting Up GitHub Actions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-tests-on-a-remote-target&quot; id=&quot;markdown-toc-running-tests-on-a-remote-target&quot;&gt;Running Tests on a Remote Target&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final-words&quot; id=&quot;markdown-toc-final-words&quot;&gt;Final Words&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Besides the prerequisites from the previous posts, today we will also need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PlatformIO account&lt;/li&gt;
  &lt;li&gt;GitHub account&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setting-up-github-actions&quot;&gt;Setting Up GitHub Actions&lt;/h2&gt;

&lt;p&gt;GitHub Actions is an automation feature that allows you to automate, customize, and execute software development workflows right in your GitHub repository. Registering on GitHub, creating a new repository, and pushing the code are out of the scope of this article. If you’re new to GitHub, check out the official &lt;a href=&quot;https://guides.github.com/activities/hello-world/&quot; target=&quot;_blank&quot;&gt;Getting Started guide&lt;/a&gt; from the GitHub team. Let’s suppose we already have a working repository with the code and tests from the previous posts.&lt;/p&gt;

&lt;p&gt;We will start straight from defining our workflows in a GitHub Actions configuration file. First, let’s create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflow/native.yml&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;!--  --&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.os }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;macos-latest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windows-latest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up Python&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-python@v1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install PlatformIO&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;python -m pip install --upgrade pip&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;pip install platformio&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run tests on the native platform&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;platformio test -e native&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!--  --&gt;

&lt;p&gt;The contents of the configuration file is pretty straightforward. First, we specify GitHub events that trigger the workflow, then we create a matrix to run the workflow on three popular operating systems. The most interesting part is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steps&lt;/code&gt; section that describes each step required to run our workflow. If we push this file to the repository we will see that all our tests passed successfully:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-2.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-2.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-tests-on-a-remote-target&quot;&gt;Running Tests on a Remote Target&lt;/h2&gt;

&lt;p&gt;PlatformIO offers a unique tool called &lt;strong&gt;PlatformIO Remote&lt;/strong&gt; that allows users to run tests on a remote machine or remote target device without extra software, SSH, VPN or opening network ports. First of all, to enable this feature we need to generate a special token on the machine which the target board is connected to. It can be done in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Account Page&lt;/code&gt; or via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio account token&lt;/code&gt; CLI command:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, the token must be added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Secrets&lt;/code&gt; page in the settings of the repository:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, we can add a new step to the workflow that runs the tests on the remote board:&lt;/p&gt;

&lt;!--  --&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up Python&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-python@v1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install PlatformIO&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;python -m pip install --upgrade pip&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;pip install platformio&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run tests on the embedded target&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;PLATFORMIO_AUTH_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.PLATFORMIO_AUTH_TOKEN }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;platformio remote test -e hifive1-revb -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!--  --&gt;

&lt;p&gt;The configuration slightly differs from the previous one. This time, we use one OS instead of a matrix with OSes and invoke the remote counterpart for test command.&lt;/p&gt;

&lt;p&gt;Before committing the latest changes, we need to start PlatformIO Remote agent that handled all the heavy lifting starting from establishing a secure connection up to collecting test results and sending them to the CI service. Just type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio remote agent start&lt;/code&gt; on the remote machine and we are ready to go.&lt;/p&gt;

&lt;p&gt;Finally, we are ready to push the updated configuration file. When the CI system detects a new commit it will automatically run the tests on the remote board:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-5.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-5.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Adopting CI practices in embedded projects might be sophisticated, but it’s definitely worth the effort. Leveraging modern CI services helps ensure that code coming from other developers doesn’t break the project. Another benefit of CI is that it greatly reduces the chances of failures by detecting errors early in the development process. Using the PlatformIO Remote feature considerably simplifies the process of executing tests on a remote target. With only a few commands we can run tests and safely transfer results directly to the CI service while real hardware is physically connected to a local machine.&lt;/p&gt;

&lt;h2 id=&quot;final-words&quot;&gt;Final Words&lt;/h2&gt;

&lt;p&gt;Writing good and comprehensive tests is a complex task, and we’ve barely scratched the surface. The overall goal of this three-part series was to create a convenient and automated development environment that allows developers to concentrate on writing code instead of wrestling with boring, complicated tools and configurations.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope you found this series useful and that you can now appreciate the power of unit testing. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html">In recent years Continuous Integration (CI) has become a standard for software development and embedded projects are no exception. Continuous integration allows developers to build an application and run tests in an automated way. Whenever new changes are committed to the repository, the CI system executes predefined tasks to make sure that the project works as expected and no regression was introduced. Besides compiling and running tests, we also can perform additional actions like static code analysis, applying code formatting, etc.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-1.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source May Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-may-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source May Updates" /><published>2021-06-03T00:00:00+03:00</published><updated>2021-06-03T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-may-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-may-2021-updates.html">&lt;p&gt;Welcome to the May 2021 updates of the &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so let’s go through the updates pushed in this month.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-may-news.jpg&quot; alt=&quot;PlatformIO Open Source May Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During May, we have mostly focused on our thriving Arduino community. Besides updating support for the latest stable ESP-IDF v4.2.1, we updated Arduino cores for ESP8266, ST STM32, Adafruit, and mbed-enabled devices. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif-8266-dev-platform-v30&quot; id=&quot;markdown-toc-espressif-8266-dev-platform-v30&quot;&gt;Espressif 8266 dev-platform v3.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stmicroelectronics-stm32-dev-platform-v140&quot; id=&quot;markdown-toc-stmicroelectronics-stm32-dev-platform-v140&quot;&gt;STMicroelectronics STM32 dev-platform v14.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#microchip-atmelsam-dev-platform-v61&quot; id=&quot;markdown-toc-microchip-atmelsam-dev-platform-v61&quot;&gt;Microchip AtmelSAM dev-platform v6.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#esp-idf-v421&quot; id=&quot;markdown-toc-esp-idf-v421&quot;&gt;ESP-IDF v4.2.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino-core-for-mbed-enabled-devices-v21&quot; id=&quot;markdown-toc-arduino-core-for-mbed-enabled-devices-v21&quot;&gt;Arduino Core for mbed-enabled devices v2.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif-8266-dev-platform-v30&quot;&gt;Espressif 8266 dev-platform v3.0&lt;/h2&gt;

&lt;p&gt;The latest revision of the &lt;a href=&quot;https://platformio.org/platforms/espressif8266&quot;&gt;Espressif 8266&lt;/a&gt; dev-platform brings support for the latest Arduino core v3.0.0 together with the latest GCC toolchain v10.2 and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New board &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif8266/agruminolemon.html&quot;&gt;Lifely Agrumino Lemon v4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Updated Arduino Core to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.0.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/esp8266/Arduino/releases/tag/3.0.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated toolchain packages to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v10.2.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Minor improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h4&gt;

&lt;p&gt;The latest Arduino Core &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.0.0&lt;/code&gt; is a major release that brings several breaking changes including removed and significantly changed APIs. Many popular libraries are not synchronized with these changes which may lead to non-obvious compilation and linker errors. Please thoroughly examine the summary of the changes in the &lt;a href=&quot;https://github.com/esp8266/Arduino/releases/tag/3.0.0&quot;&gt;release notes&lt;/a&gt; before updating the platform. In case your projects are not compilable after the update, you can always roll back to the previous version of the platform, for example:&lt;/p&gt;
&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:espresso_lite_v2]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;espressif8266@^2&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arduino&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;espresso_lite_v2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;mmu-configuration&quot;&gt;MMU configuration&lt;/h4&gt;

&lt;p&gt;This release introduces new configuration defines that allow adjusting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ICACHE&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IRAM&lt;/code&gt; ratio, for example:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:espresso_lite_v2]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;espressif8266&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arduino&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;espresso_lite_v2&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;build_flags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;; 16KB Cache + 48KB IRAM and 2nd Heap (shared)
&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;-DPIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48_SECHEAP_SHARED&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Espressif 8266 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/espressif8266.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-espressif8266/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stmicroelectronics-stm32-dev-platform-v140&quot;&gt;STMicroelectronics STM32 dev-platform v14.0&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/ststm32&quot;&gt;ST STM32&lt;/a&gt; platform comes with a bunch of new boards and dev-kits, support for the latest major release of Arduino core v2.0 and updated SVD files for better debugging experience:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/disco_b_g431b_esc1.html&quot;&gt;ST B-G431B-ESC1 Discovery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/disco_l4s5i_iot01a.html&quot;&gt;ST STM32L4+ Discovery kit IoT Node&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/elektor_f072c8.html&quot;&gt;Elektor LoRa Node Core F072C8 (64 kB)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/elektor_f072cb.html&quot;&gt;Elektor LoRa Node Core F072C8 (128 kB)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/nucleo_g031k8.html&quot;&gt;ST Nucleo G031K8&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/nucleo_l552ze_q.html&quot;&gt;ST Nucleo L552ZE-Q&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/olimexino_stm32f3.html&quot;&gt;Olimex OLIMEXINO-STM32F3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/vccgnd_f407zg_mini.html&quot;&gt;VCCGND F407ZGT6 Mini&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated STM32 Arduino Core to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/stm32duino/Arduino_Core_STM32/releases/tag/2.0.0&quot;&gt;relase notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.1.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.1.0&quot;&gt;relase notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated OpenOCD to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.11.0&lt;/code&gt; (&lt;a href=&quot;http://openocd.org/2021/03/openocd-0-11-0-released/&quot;&gt;relase notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated SVD files&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;note&quot;&gt;Note&lt;/h4&gt;

&lt;p&gt;The latest STM32 Arduino Core &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.0&lt;/code&gt; is a major release with refactored variant structure. These changes may break custom board manifests which used previous variant names. In case your projects are not compilable after the update, you can always roll back to the previous version of the platform, for example:&lt;/p&gt;
&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:nucleo_f072rb]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ststm32@^13.0.0&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arduino&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nucleo_f072rb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the ST STM32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;microchip-atmelsam-dev-platform-v61&quot;&gt;Microchip AtmelSAM dev-platform v6.1&lt;/h2&gt;

&lt;p&gt;The latest release of the &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; v6.1.0 brings support for new boards, updated Arduino Adafruit core and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_neokeytrinkey_m0.html&quot;&gt;Adafruit NeoKey Trinkey&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_neotrinkey_m0.html&quot;&gt;Adafruit NeoPixel Trinkey&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_proxlighttrinkey_m0.html&quot;&gt;Adafruit ProxLight Trinkey&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_rotarytrinkey_m0.html&quot;&gt;Adafruit Rotary Trinkey&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_slidetrinkey_m0.html&quot;&gt;Adafruit Slide Trinkey&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Adafruit Arduino Core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.7.2&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/ArduinoCore-samd/releases/tag/1.7.2&quot;&gt;relase notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;esp-idf-v421&quot;&gt;ESP-IDF v4.2.1&lt;/h2&gt;

&lt;p&gt;The latest version of the &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif32&lt;/a&gt; platform now supports the latest stable &lt;strong&gt;ESP-IDF v4.2.1&lt;/strong&gt; - the official development framework for the ESP32 and ESP32-S Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in the latest release:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improvements to the Bluetooth Controller (reduced IRAM consumption, support for BLE Authorization)&lt;/li&gt;
  &lt;li&gt;Minor optimizations to the Wi-Fi stack&lt;/li&gt;
  &lt;li&gt;Many fixes and improvements to the Peripheral Drivers, Core and Power Management systems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for ESP-IDF&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/espressif/esp-idf/releases/tag/v4.2.1&quot;&gt;Release notes for v4.2.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html&quot;&gt;Documentation for ESP-IDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;arduino-core-for-mbed-enabled-devices-v21&quot;&gt;Arduino Core for mbed-enabled devices v2.1&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;ST STM32&lt;/a&gt;, &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Nordic nRF52&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/raspberrypi.html&quot;&gt;Raspberry Pi RP2040&lt;/a&gt; dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.1. According to the release notes, v2.1 brings a lot of bugfixes and improvements in core and accompanying libraries.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the May 2021 updates of the PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so let’s go through the updates pushed in this month.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-may-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-may-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source April Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-april-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source April Updates" /><published>2021-05-06T00:00:00+03:00</published><updated>2021-05-06T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-april-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-april-2021-updates.html">&lt;p&gt;Welcome to the April 2021 updates of the &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so let’s go through the updates pushed in this month.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-april-news.jpg&quot; alt=&quot;PlatformIO Open Source April Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In April, we have released a new dev-platform for Raspberry Pi RP2040, updated Arduino core for mbed-enabled devices to the latest v2.0, rolled out a major update for the ST STM8 dev-platform with debugging support, integrated the OVPSim and Renode simulators into the OpenHW dev-platform. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#raspberry-pi-rp2040-dev-platform&quot; id=&quot;markdown-toc-raspberry-pi-rp2040-dev-platform&quot;&gt;Raspberry Pi RP2040 dev-platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stmicroelectronics-stm8-dev-platform-v20&quot; id=&quot;markdown-toc-stmicroelectronics-stm8-dev-platform-v20&quot;&gt;STMicroelectronics STM8 dev-platform v2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#openhw-dev-platform-v02&quot; id=&quot;markdown-toc-openhw-dev-platform-v02&quot;&gt;OpenHW dev-platform v0.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino-core-for-mbed-enabled-devices-v20&quot; id=&quot;markdown-toc-arduino-core-for-mbed-enabled-devices-v20&quot;&gt;Arduino Core for mbed-enabled devices v2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;raspberry-pi-rp2040-dev-platform&quot;&gt;Raspberry Pi RP2040 dev-platform&lt;/h2&gt;

&lt;p&gt;During the last few months, we have received a lot of private and public inquiries from the Raspberry Pi community about the integration of the recently announced RP2040 MCU into the PlatformIO ecosystem. We value your opinion and welcome your feedback, so we’re happy to announce the initial support for Raspberry Pi RP2040 MCU - a low-cost, high-performance device with a large on-chip memory, a dual-core Arm Cortex-M0+ processor, and a rich peripheral set augmented with a unique Programmable I/O (PIO) subsystem.&lt;/p&gt;

&lt;p&gt;As a company with a strong commitment to the open-source community, we welcome any valuable contribution to further develop the Raspberry Pi ecosystem with modern and flexible open-source development tools.&lt;/p&gt;

&lt;p&gt;The first release of the Raspberry Pi dev-platform brings initial support for the &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/raspberrypi/pico.html&quot;&gt;Raspberry Pi Pico&lt;/a&gt; and &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/raspberrypi/nanorp2040connect.html&quot;&gt;Arduino Nano RP2040 Connect&lt;/a&gt; boards. Only the Arduino framework is supported at the moment. See &lt;a href=&quot;https://github.com/platformio/platform-raspberrypi/releases/tag/v1.0.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Raspberry Pi RP2040 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/raspberrypi.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-raspberrypi/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stmicroelectronics-stm8-dev-platform-v20&quot;&gt;STMicroelectronics STM8 dev-platform v2.0&lt;/h2&gt;

&lt;p&gt;Thanks to our great community represented by &lt;a href=&quot;https://github.com/maxgerhardt&quot;&gt;Maximilian Gerhardt&lt;/a&gt; and &lt;a href=&quot;https://github.com/cocus&quot;&gt;Santiago Hormazabal&lt;/a&gt;, the new release of the &lt;a href=&quot;https://platformio.org/platforms/ststm8&quot;&gt;STMicroelectronics STM8&lt;/a&gt; brings initial support for debugging feature:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-05-06-oss-april-updates/stm8-debug.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-05-06-oss-april-updates/stm8-debug.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now developers are able to quickly and easily debug their bare-metal applications thanks to preconfigured &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debugging.html&quot;&gt;PlatformIO Unified Debugger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The latest release also includes severals new boards, updated toolchains and the latest Sduino core:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm8/nucleo_8s207k8.html&quot;&gt;ST NUCLEO-8S207K8&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm8/nucleo_8s208rb.html&quot;&gt;ST NUCLEO-8S208RB&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm8/stm8s003f3.html&quot;&gt;ST STM8S003F3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Added initial support for debugging feature&lt;/li&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDuino&lt;/code&gt; to the latest v0.5 (&lt;a href=&quot;https://github.com/tenbaht/sduino/releases/tag/v0.5&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDCC&lt;/code&gt; toolchain to the latest v4.1.0&lt;/li&gt;
  &lt;li&gt;Updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stm8gal&lt;/code&gt; uploader to the latest v1.5.0&lt;/li&gt;
  &lt;li&gt;Added &lt;a href=&quot;https://github.com/platformio/platform-ststm8/tree/develop/examples/native-blink&quot;&gt;a new example&lt;/a&gt; based on &lt;a href=&quot;https://github.com/gicking/STM8_headers&quot;&gt;Open-Sources device headers for STM8 MCUs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the STMicroelectronics STM8 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm8.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm8/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openhw-dev-platform-v02&quot;&gt;OpenHW dev-platform v0.2&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/openhw&quot;&gt;OpenHW&lt;/a&gt; dev-platform brings initial support for the popular &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debug-tools/ovpsim.html&quot;&gt;Imperas OVPSim&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debug-tools/renode.html&quot;&gt;Antmicro Renode&lt;/a&gt; simulators, several minor bugfixes and improvements. Simulators are very valuable in the early stages of project development when there is no real hardware available for the developers to experiment with. Combined with the &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debugging.html&quot;&gt;PlatformIO Unified Debugger&lt;/a&gt;, simulators are great instruments to develop, debug and test embedded applications on your host machine or in a CI environment.&lt;/p&gt;

&lt;h2 id=&quot;arduino-core-for-mbed-enabled-devices-v20&quot;&gt;Arduino Core for mbed-enabled devices v2.0&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;ST STM32&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.0. According to the release notes, v2.0 brings a lot of bugfixes and improvements in core and accompanying libraries.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the April 2021 updates of the PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so let’s go through the updates pushed in this month.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-april-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-april-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source March Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-march-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source March Updates" /><published>2021-04-01T00:00:00+03:00</published><updated>2021-04-01T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-march-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-march-2021-updates.html">&lt;p&gt;Welcome to the March 2021 updates of the &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-march-news.jpg&quot; alt=&quot;PlatformIO Open Source March Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During March, we released a new version of PlatformIO IDE for Visual Studio Code, added support for the latest Mbed OS, rolled out major updates for Espressif32, STMicroelectronics STM32, Nordic nRF52 dev-platforms and fixed a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-ide-for-visual-studio-code-v23&quot; id=&quot;markdown-toc-platformio-ide-for-visual-studio-code-v23&quot;&gt;PlatformIO IDE for Visual Studio Code v2.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mbed-os-v69&quot; id=&quot;markdown-toc-mbed-os-v69&quot;&gt;Mbed OS v6.9&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif32-dev-platform-v32&quot; id=&quot;markdown-toc-espressif32-dev-platform-v32&quot;&gt;Espressif32 dev-platform v3.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stmicroelectronics-stm32-dev-platform-v121&quot; id=&quot;markdown-toc-stmicroelectronics-stm32-dev-platform-v121&quot;&gt;STMicroelectronics STM32 dev-platform v12.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nordic-nrf52-dev-platform-v71&quot; id=&quot;markdown-toc-nordic-nrf52-dev-platform-v71&quot;&gt;Nordic nRF52 dev-platform v7.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-avr-dev-platform-v33&quot; id=&quot;markdown-toc-atmel-avr-dev-platform-v33&quot;&gt;Atmel AVR dev-platform v3.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-ide-for-visual-studio-code-v23&quot;&gt;PlatformIO IDE for Visual Studio Code v2.3&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html&quot;&gt;&lt;img class=&quot;figure-img img-fluid&quot; src=&quot;/assets/posts/oss-updates/platformio-ide-for-vscode-laptop.png&quot; alt=&quot;PlatformIO IDE for VSCode&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are pleased to announce a new release &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.3&lt;/code&gt; of PlatformIO IDE for &lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html&quot;&gt;Visual Studio Code&lt;/a&gt; that brings new functionality for project management, new settings and several bugfixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project management:
    &lt;ul&gt;
      &lt;li&gt;Show active project in the status bar (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2276&quot;&gt;#2276&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Automatically switch to the latest project on restart (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2365&quot;&gt;#2365&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Automatically restore the latest project environment (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2344&quot;&gt;#2344&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Allowed passing custom base URL of the Python Package Index using new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;customPyPiIndexUrl&lt;/code&gt; setting&lt;/li&gt;
  &lt;li&gt;Open &lt;a href=&quot;https://docs.platformio.org/page/projectconf/index.html&quot;&gt;“platformio.ini” configuration file&lt;/a&gt; from newly added project (if there are no other active editors) (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2263&quot;&gt;#2263&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added protection for infinite IntelliSense index rebuilding (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2363&quot;&gt;#2363&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added “OpenAPI (Swagger) Editor” extension to the conflicted list (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2324&quot;&gt;#2324&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added a new setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio-ide.autoOpenPlatformIOIniFile&lt;/code&gt; to control an automatic opening of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; file from a project when no other editors are opened (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2419&quot;&gt;#2419&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added a new setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio-ide.activateProjectOnTextEditorChange&lt;/code&gt; to enable automatic project activation depending on an active opened text editor (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2410&quot;&gt;#2410&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Automatically activate project environment opened via “PIO Home &amp;gt; New Project / Open Project” (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2414&quot;&gt;#2414&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Do not show “Default” environment when a project does not have any build environments (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2450&quot;&gt;#2450&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed issues when the “Upload and Monitor” command didn’t terminate the running task and didn’t reopen a monitor with delay (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2266&quot;&gt;#2266&lt;/a&gt;, issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2319&quot;&gt;#2319&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue with broken IntelliSense index rebuilding or tasks loading for big projects (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/2321&quot;&gt;#2321&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue when a debug breakpoint was not allowed for Assembly files&lt;/li&gt;
  &lt;li&gt;Fixed an issue “Failed to load symbols from executable file” when debugging native/desktop application&lt;/li&gt;
  &lt;li&gt;PlatformIO IDE Installer
    &lt;ul&gt;
      &lt;li&gt;Updated PlatformIO Core installer to v1.0.1&lt;/li&gt;
      &lt;li&gt;Rebuild project index only when the environment changes&lt;/li&gt;
      &lt;li&gt;Fixed an issue “The ‘path’ argument must be of type string. Received undefined”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/releases/tag/v2.3.1&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;mbed-os-v69&quot;&gt;Mbed OS v6.9&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for the latest &lt;strong&gt;Mbed OS 6&lt;/strong&gt; - an open source embedded operating system designed specifically for the Internet of Things. It includes all the features you need to develop a connected product based on an Arm Cortex-M microcontroller, including security, connectivity, an RTOS and drivers for sensors and I/O devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in the latest releases:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for the TF-M reference software v1.2 by the Trusted Firmware project&lt;/li&gt;
  &lt;li&gt;Extended BLE functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on project configuration for Mbed OS can be found &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Mbed OS&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.9.0&quot;&gt;Release notes for v6.9.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.8.0&quot;&gt;Release notes for v6.8.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.7.0&quot;&gt;Release notes for v6.7.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html&quot;&gt;Documentation for Mbed OS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html#platforms&quot;&gt;Supported development platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/mbed.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif32-dev-platform-v32&quot;&gt;Espressif32 dev-platform v3.2&lt;/h2&gt;

&lt;p&gt;The latest revision of the &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif 32&lt;/a&gt; dev-platform brings support for the latest Arduino core v1.0.6 and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new board  &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/heltec_wifi_kit_32_v2.html&quot;&gt;Heltec Wifi Kit 32 V2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Updated Arduino framework to 1.0.6 (&lt;a href=&quot;https://github.com/espressif/arduino-esp32/releases/tag/1.0.6&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated default upload speed for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m5stack-atom&lt;/code&gt; board&lt;/li&gt;
  &lt;li&gt;Preparations for updated debug configuration process in upcoming PlatformIO Core 5.2+&lt;/li&gt;
  &lt;li&gt;Fixed variant name for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ttgo-t-beam&lt;/code&gt; board&lt;/li&gt;
  &lt;li&gt;Fixed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildfs&lt;/code&gt; target declaration to be used with pre/post actions&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Espressif32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/espressif32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-espressif32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stmicroelectronics-stm32-dev-platform-v121&quot;&gt;STMicroelectronics STM32 dev-platform v12.1&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/ststm32&quot;&gt;ST STM32&lt;/a&gt; platform comes with initial support for mbed-based Arduino core, improvements for STM32Cube integration and several minor fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added a new board &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/portenta_h7_m4.html&quot;&gt;Arduino Portenta H7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Added initial support for Arduino core for mbed enabled boards&lt;/li&gt;
  &lt;li&gt;Updated Mbed OS6 to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v6.9.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.9.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Better handling of the pregenerated STM32Cube configuration file&lt;/li&gt;
  &lt;li&gt;Fixed dynamic configuration of serverless debug probes&lt;/li&gt;
  &lt;li&gt;Fixed RAM size for STM32F407VG&lt;/li&gt;
  &lt;li&gt;Nucleo-Gxxx boards now support uploading and debugging via on-board STLink probes&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the ST STM32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nordic-nrf52-dev-platform-v71&quot;&gt;Nordic nRF52 dev-platform v7.1&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/nordicnrf52&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platform brings updated Arduino core &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.3.2&lt;/code&gt; for mbed-enabled devices, several minor bugfixes and improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Mbed OS6 to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v6.9.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/releases/tag/mbed-os-6.9.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.3.2&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/1.3.2&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed dynamic configuration of serverless debug probes&lt;/li&gt;
  &lt;li&gt;Fixed RAM size for &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/bbcmicrobit_v2.html&quot;&gt;BBC Micro:Bit v2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Nordic nRF52 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-nordicnrf52/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-avr-dev-platform-v33&quot;&gt;Atmel AVR dev-platform v3.3&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelavr&quot;&gt;Atmel AVR&lt;/a&gt; v3.3.0 comes with updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATTinyCore&lt;/code&gt; v1.5.2 and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATTinyCore&lt;/code&gt; to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.5.2&lt;/code&gt; (&lt;a href=&quot;https://github.com/SpenceKonde/ATTinyCore/releases/tag/1.5.2&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Removed unnecessary wrapping quotes from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avrdude&lt;/code&gt; upload command&lt;/li&gt;
  &lt;li&gt;Minor improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Atmel AVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the March 2021 updates of the PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-march-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-march-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unit Testing with PlatformIO: Part 2. Running tests on an embedded target</title><link href="https://piolabs.com/blog/insights/unit-testing-part-2.html" rel="alternate" type="text/html" title="Unit Testing with PlatformIO: Part 2. Running tests on an embedded target" /><published>2021-03-29T00:00:00+03:00</published><updated>2021-03-29T00:00:00+03:00</updated><id>https://piolabs.com/blog/insights/unit-testing-part-2</id><content type="html" xml:base="https://piolabs.com/blog/insights/unit-testing-part-2.html">&lt;p&gt;In most cases, testing on a host machine is enough to find almost all sorts of typical programming errors (integer overflow, off-by-one error, etc) in the business logic of an embedded application, but it is not the same as testing on the real hardware.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;A different compiler, endianness, or even unpredictable hardware issues can greatly affect the correctness of the code.&lt;/p&gt;

&lt;p&gt;This is the second part of a three-part blog series where we’re setting up a testing environment for embedded development. In the &lt;a href=&quot;/blog/insights/unit-testing-part-1.html&quot; target=&quot;_blank&quot;&gt;first post&lt;/a&gt;, we briefly went through the basics of testing within the PlatformIO ecosystem, created a useful data structure called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circular buffer&lt;/code&gt; and tested it on a host machine.&lt;/p&gt;

&lt;p&gt;In this post, we will continue to set up a convenient testing environment for our project. We will be using &lt;a href=&quot;https://docs.platformio.org/page/boards/sifive/hifive1-revb.html#board-sifive-hifive1-revb&quot; target=&quot;_blank&quot;&gt;SiFive HiFive-RevB&lt;/a&gt; - a low-cost RISC-V board based on &lt;a href=&quot;https://sifive.cdn.prismic.io/sifive%2F9ecbb623-7c7f-4acc-966f-9bb10ecdb62e_fe310-g002.pdf&quot; target=&quot;_blank&quot;&gt;FE310-G002&lt;/a&gt; microcontroller from SiFive.&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot; id=&quot;markdown-toc-prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-a-new-environment&quot; id=&quot;markdown-toc-adding-a-new-environment&quot;&gt;Adding a New Environment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-custom-test-transport&quot; id=&quot;markdown-toc-adding-custom-test-transport&quot;&gt;Adding Custom Test Transport&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html&quot; target=&quot;_blank&quot;&gt;VSCode with installed PlatformIO IDE extension&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/boards/sifive/hifive1-revb.html#board-sifive-hifive1-revb&quot; target=&quot;_blank&quot;&gt;SiFive HiFive-RevB&lt;/a&gt; board&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adding-a-new-environment&quot;&gt;Adding a New Environment&lt;/h2&gt;

&lt;p&gt;In this part, we’ll carry on working with the project from the previous post.
Adding new hardware is as easy as adding several new lines to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:native]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;native&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[env:hifive1-revb]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sifive&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;freedom-e-sdk&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hifive1-revb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The configuration file is pretty simple, the first two lines we already discussed in the previous post, the new environment &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hifive1-revb&lt;/code&gt; includes general information about the platform, framework, board and describes the new embedded target on which we want to run our tests (no need to install the &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/sifive.html&quot; target=&quot;_blank&quot;&gt;sifive&lt;/a&gt; dev-platform manually, PlatformIO will do it automatically before the first compilation).&lt;/p&gt;

&lt;h2 id=&quot;adding-custom-test-transport&quot;&gt;Adding Custom Test Transport&lt;/h2&gt;

&lt;p&gt;Usually, the test sequence consists of compiling and deploying a test executable from a host machine, starting it on the embedded side, and collecting the test results via some sort of communication channel. After that, the host machine analyzes the logs and provides a detailed report.&lt;/p&gt;

&lt;figure class=&quot;figure mb-7&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-03-29-unit-testing-part-2/unit-testing-part-2-2.png&quot; alt=&quot;Compilation and linking process&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Communication between the host and the embedded device
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;PlatformIO Unit Testing Engine supports several transports for popular frameworks/SDKs. But, for this article, we deliberately used an unsupported low-level framework to show you how easy it is to add a custom communication transport for collecting testing results.&lt;/p&gt;

&lt;p&gt;Adding a custom transport boils down to implementing the following interface:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only mandatory function is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unittest_uart_putchar&lt;/code&gt; which is responsible for redirecting the test output to a proper channel. Fortunately, the board used in this article has an on-board debug probe that also acts as a virtual COM port. The &lt;a href=&quot;https://docs.platformio.org/page/frameworks/freedom-e-sdk.html&quot; target=&quot;_blank&quot;&gt;Freedom SDK&lt;/a&gt; framework is configured to redirect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt; output to that virtual COM port which greatly simplifies the implementation of the custom test transport for our case:&lt;/p&gt;

&lt;p&gt;The header file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unit_test_transport.h&lt;/code&gt; with function declarations:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef UNITEST_TRANSPORT_H
#define UNITEST_TRANSPORT_H
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unittest_uart_begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unittest_uart_putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unittest_uart_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unittest_uart_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif // UNITEST_TRANSPORT_H
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the accompanying source file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unit_test_transport.c&lt;/code&gt; with the implementation:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &quot;unittest_transport.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unittest_uart_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our case, we needed to implement only one function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unittest_uart_putchar&lt;/code&gt; that redirects the test output to the virtual COM port via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt; function.
In the last step we need to specify that we want to use a custom test transport:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:native]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;native&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[env:hifive1-revb]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sifive&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;freedom-e-sdk&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hifive1-revb&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Select custom test transport
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;test_transport&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;custom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we are ready to run our test on the real hardware. After connecting the board and validating that it’s visible to our OS, we can select our environment on the PlatformIO toolbar and run the tests:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-29-unit-testing-part-2/unit-testing-part-2-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-29-unit-testing-part-2/unit-testing-part-2-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s it! Now, we can run tests on the real board as well.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;When developing software for an embedded device, testing only on a host machine is usually not sufficient enough to cover all possible issues. Ideally, a development environment should be capable of running tests on both ends: a host machine and a target device. Besides, creating a proper communication channel to represent test results on a host machine may turn out to be a tedious task that requires a lot of manual work from developers.&lt;/p&gt;

&lt;p&gt;In this article, we explored how PlatformIO solves that problem by abstracting away all heavy lifting. We looked into the process of running tests directly on the embedded device by implementing a custom test transport for collecting results from the &lt;a href=&quot;https://docs.platformio.org/page/boards/sifive/hifive1-revb.html#board-sifive-hifive1-revb&quot; target=&quot;_blank&quot;&gt;SiFive HiFive-RevB&lt;/a&gt; board on the fly.&lt;/p&gt;

&lt;p&gt;In the next article, we will explore how to run the tests on a CI service on both native and embedded sides by utilizing an advanced PlatformIO feature called &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/pio-remote.html&quot;&gt;Remote&lt;/a&gt;.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html">In most cases, testing on a host machine is enough to find almost all sorts of typical programming errors (integer overflow, off-by-one error, etc) in the business logic of an embedded application, but it is not the same as testing on the real hardware.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-03-29-unit-testing-part-2/unit-testing-part-2-1.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-03-29-unit-testing-part-2/unit-testing-part-2-1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Labs Helps Imagination Technologies Improve RISC-V Computer Architecture Training</title><link href="https://piolabs.com/blog/press-releases/platformio-labs-helps-imagination-technologies.html" rel="alternate" type="text/html" title="PlatformIO Labs Helps Imagination Technologies Improve RISC-V Computer Architecture Training" /><published>2021-03-08T00:00:00+02:00</published><updated>2021-03-08T00:00:00+02:00</updated><id>https://piolabs.com/blog/press-releases/platformio-labs-helps-imagination-technologies</id><content type="html" xml:base="https://piolabs.com/blog/press-releases/platformio-labs-helps-imagination-technologies.html">&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-1.jpg&quot; alt=&quot;PlatformIO Labs Helps Imagination Technologies Improve RISC-V Computer Architecture Training&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RISC-V has been described as the “open silicon” of the technology revolution spurred by open hardware and open software. The ability to understand and innovate upon computer architectures has been a weak element of academic research and collaborative professional communities due to the typical proprietary nature of chip designs. Now open architectures can be combined with open hardware and software to provide unique and advanced solutions to tackle problems in our rapidly growing and complex technological world.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Due to the increasing popularity of RISC-V within the semiconductor industry, Imagination Technologies and Western Digital have teamed up to sponsor the development of new RISC-V centered coursework, designed by academics, for academics. The goal of this coursework is to provide top quality materials and an equity of opportunity to learn from them to students globally. PlatformIO Labs was chosen to support this coursework because of its open source tooling that provides best-of-breed quality for the embedded hardware industry, because of it being easy to use, because it seamlessly integrates with modern development editors such as VS Code.&lt;/p&gt;

&lt;p&gt;More and more companies have announced or have already extended their portfolio with new RISC-V products. Popular commercial and open source Real-Time Operating Systems (RTOS), debuggers, and compilers are adding support for cutting-edge RISC-V hardware. The RISC-V ISA is open source, vendor agnostic, and flexible enough to satisfy the growing demand for complex embedded systems. Because of these qualities, the RISC-V ISA is a perfect choice for FPGA soft processor designs, which will further enable RISC-V to gain increased adoption within the embedded systems industry and academic community.&lt;/p&gt;

&lt;p&gt;This growing adoption fuels the need for approachable and in-depth educational materials, especially to satisfy the increasing need and global benefits available through remote learning. It’s crucial for the RISC-V community to collaborate with universities and other academic partners to develop comprehensive curricula so undergraduates will have a deep fundamental knowledge of modern real-world computer architectures.&lt;/p&gt;

&lt;p&gt;While RISC-V adoption is on the rise, one challenge is the currently arduous development environment associated with the architecture. When working with FPGAs, developers rely on convoluted instruments simply to evaluate and interact with their RISC-V designs on real hardware. Working with FPGAs can be a daunting task even for seasoned developers, not to mention students and newly graduated specialists. The industry needs an open-source and easy-to-use development environment that covers all sets of common tasks (debugging, testing, simulating, etc.) that engineers perform on a daily basis when working with deployed designs.&lt;/p&gt;

&lt;p&gt;PlatformIO satisfies this need to bring top quality development tools to the RISC-V community, without being vendor-specific, without a hefty financial barrier, and without being locked behind the wall of a proprietary software license.&lt;/p&gt;

&lt;h2 id=&quot;about-imagination-university-programme&quot;&gt;About Imagination University Programme&lt;/h2&gt;

&lt;p&gt;Imagination Technologies offers a complete course on RISC-V computer architecture titled &lt;a href=&quot;https://university.imgtec.com/rvfpga/&quot; target=&quot;_blank&quot;&gt;“RVfpga: Understanding Computer Architecture”&lt;/a&gt;. It includes a rich set of teaching materials and practical exercises to help students understand the key elements of processor architecture, including IP cores, and how to modify a RISC-V core and its microarchitectures.&lt;/p&gt;

&lt;p&gt;The initial course consists of 10 labs with detailed instructions, examples, short questions, and hands-on exercises with solutions, giving teachers the flexibility to choose between a practical and an exam-based structure for the course. The course uses the Chips Alliance’s SweRVolf SoC, which is based on Western Digital’s RISC-V SweRV EH1 core. SweRV is one of the most developed cores in the RISC-V market that’s fully verified and ready for production.&lt;/p&gt;

&lt;p&gt;The RVfpga course was created by Dr. Sarah Harris, Associate Professor of Electrical and Computer Engineering at University of Nevada, co-author of the popular “Digital Design &amp;amp; Computer Architecture” textbook, and Dr. Daniel Chaver-Martínez, Associate Professor of Department of Computer Architecture and System Engineering at Universidad Complutense de Madrid (Spain). The course engaged several widely reputed sponsors and supporters who have given outstanding support to this large and complex project. Key contributors are listed below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-2.jpg&quot; alt=&quot;The sponsors and supporters of Imagination University Programme&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;platormio-labs-contribution&quot;&gt;PlatormIO Labs’ Contribution&lt;/h2&gt;

&lt;p&gt;One of the main missions of PlatformIO Labs is to bring together academics, developers, and silicon vendors, and to help them leverage modern open source software and hardware on anything from simple prototypes to truly groundbreaking projects, developed at any scale. We believe that when technology is open from top to bottom, that the collaboration afforded within such a community is the perfect place to explore new ideas and opens up tremendous opportunities. Our team is proud to be an active participant in this venture.&lt;/p&gt;

&lt;p&gt;The RVfpga course uses PlatformIO — the open-source core of our Technology as a Service (TaaS) platform — for collaborative embedded development. PlatformIO’s development ecosystem integrates both hardware and software aspects of the course. Its open source license and flexible design are constantly being adapted to keep up with industry advancements. Students can avoid the burden of setting up unique, expensive, or vendor-specific tooling, and instead easily jump right in with a proper development environment and proceed directly to interacting with their RISC-V soft processors.&lt;/p&gt;

&lt;p&gt;The main contributions of our work are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Powerful Unified Debugger&lt;/strong&gt;. The integrated debugger supports both real hardware and hardware simulators (Whisper-ISS, Verilator), so that students can easily switch to a mixed-mode disassembly view to evaluate symbols, registers, and complex expressions, in watch windows.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trusted Package Registry&lt;/strong&gt;. The registry quickly and securely delivers pre-built packages to students and professionals worldwide. Just-in-time, only what is needed, and fully automated downloads of dependent packages is an essential feature when it comes to online delivery of the curriculum, and ease of getting started for the students.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;In-depth Memory Analysis&lt;/strong&gt;. A user-friendly UI allows students to access memory stores and get deeper insight into the internal application structure.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PlatformIO Home&lt;/strong&gt;. Like a welcoming dashboard, the PlatformIO Home page makes it easy for anyone to get started. It provides easy access to a comprehensive set of documentation and examples that were created specifically for this course, together with the main authors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-quick-tutorial&quot;&gt;A Quick Tutorial&lt;/h2&gt;

&lt;p&gt;To demonstrate PlatformIO Labs’ contribution to this course and to show how PlatformIO reduces the usual complexity of executing ASM/C/C++ code in the RVfpga course, we are providing a short tutorial below. This tutorial shows how to import a project example, starting from the PlatformIO Home page, and how to run it even without hardware, by using an Instruction Set Simulator (ISS) called Whisper. This brief tutorial assumes you have already installed the PlatformIO IDE extension for Visual Studio Code. If you do not have the PlatformIO IDE installed, please follow &lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html#installation&quot;&gt;these instructions&lt;/a&gt; before continuing with the tutorial.&lt;/p&gt;

&lt;h3 id=&quot;installing-chips-alliance-development-platform&quot;&gt;Installing CHIPS Alliance Development Platform&lt;/h3&gt;

&lt;p&gt;To start developing for the SweRV core you first need to install the CHIPS Alliance dev-platform from PlatformIO Home. Click on the icons near the numbers highlighted in orange, from 1 to 4. Note that at step 3 you will need to input “CHIPS Alliance” into the search string.&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above procedure shows how easy it is to set up a RISC-V development environment. PlatformIO will do all the heavy lifting for us by installing everything that is needed (toolchains, frameworks, etc.) automatically. When the one-click “Install” method is complete, a dialog window will pop up to tell you that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chipsalliance&lt;/code&gt; platform has been successfully installed.&lt;/p&gt;

&lt;h3 id=&quot;importing-and-compiling-an-example&quot;&gt;Importing and Compiling an Example&lt;/h3&gt;

&lt;p&gt;For the sake of simplicity, we will import one of the readily available examples prepared by the authors of the course. From the PlatformIO Home page, under the heading “Quick Access”, select the “Project Examples” button and select “rtosal-freertos” within the CHIPS Alliance platform, as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To build the project we can invoke different options, some of which are highlighted by an orange rectangle in the screenshot below. Simply use the method that feels most comfortable to you.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build&lt;/code&gt; option under the PlatformIO &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Tasks&lt;/code&gt; menu on the left navigation column&lt;/li&gt;
  &lt;li&gt;Click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;✓&lt;/code&gt; icon  (next to the home icon) toward the left side of the bottom blue PlatformIO Toolbar&lt;/li&gt;
  &lt;li&gt;From the VS Code top header menu, select and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View: Command Palette... &amp;gt; PlatformIO: Build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;From the VS Code top header menu, select and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Terminal: Run Build Task... &amp;gt; PlatformIO: Build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Using the hot keys for your OS: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd-alt-b / ctrl-alt-b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;From a terminal prompt at the command line by typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio run&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-5.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-5.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything went well, we should see the successful result in the terminal window.&lt;/p&gt;

&lt;h3 id=&quot;debugging-experience&quot;&gt;Debugging Experience&lt;/h3&gt;

&lt;p&gt;As we mentioned in the beginning of this tutorial, we will be using the Whisper ISS to debug the example. Configuring Whisper as the debug tool is as simple as adding one line to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; file (which is located in the top level of the project folder, that you can find and open by clicking on it in the project file Explorer view):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;platform = chipsalliance
framework = wd-riscv-sdk, freertos
board = swervolf_nexys
debug_tool = whisper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To start a debug session we can use one of the following options (the first two are highlighted in an orange rectangle in the screenshot):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VS Code menu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run &amp;gt; Start Debugging&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start Debugging&lt;/code&gt; option from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlatformIO &amp;gt; Quick Access &amp;gt; Debug menu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F5&lt;/code&gt; hotkey&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-6.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-6.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the debug session is started we can walk through the code using control buttons, set breakpoints, and add variables to the Watch window:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-7.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-7.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: this introductory tutorial only shows how to get started and execute a simple example using ISS as part of the RVfpga course. To understand the SweRV core in greater depth, please refer to the &lt;a href=&quot;https://university.imgtec.com/&quot;&gt;Imagination University Programme&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;PlatformIO Labs is proud to partner with Imagination Technologies and Western Digital on the development and deployment of the RISC-V educational curriculum, as we firmly believe in the importance of collaboration between industry and academia. We are happy to see how our modern development instruments can enable an improved experience around these important educational materials. We hope that developers and students appreciate our efforts to support this combination of the RISC-V ISA, comprehensive teaching materials, and the opportunity to study the SweRVolf SoC. It’s even more fun to know that we are providing a more pleasant RISC-V learning experience for the academic community all around the world. We encourage all educational institutions to participate in the future growth of the RISC-V ecosystem.&lt;/p&gt;

&lt;h2 id=&quot;about-imagination-technologies&quot;&gt;About Imagination Technologies&lt;/h2&gt;

&lt;p&gt;Imagination was founded in 1985 and is one of the UK’s leading success stories as a developer of highly advanced intellectual property (IP) that creates considerable value in the electronic systems value chain, and ultimately improves the user experience in many different consumer electronic devices, including games consoles, mobile phones, and cars. Imagination Technologies has over 25 years of experience in designing and licensing market-leading processor solutions for graphics and vision &amp;amp; AI processing that offer strong differentiation compared to competing solutions for our customers.&lt;/p&gt;

&lt;h2 id=&quot;about-platformio-labs&quot;&gt;About PlatformIO Labs&lt;/h2&gt;

&lt;p&gt;PlatformIO Labs is the corporate sponsor behind the PlatformIO open-source project. PlatformIO is a next-generation, professional collaborative platform for embedded development that enables customers to save resources and time by vastly reducing the expenses and labor associated with creating and maintaining product software. Its modern architecture is unmatched in the embedded tools market, and the result benefits developers everywhere by simplifying complexity and increasing productivity. PlatformIO Labs is a privately-held company headquartered in Tallinn, Estonia and with an R&amp;amp;D branch in Ukraine. To learn more, follow them on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt;, Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt;, or visit &lt;a href=&quot;https://piolabs.com/&quot;&gt;piolabs.com&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="press-releases" /><summary type="html">RISC-V has been described as the “open silicon” of the technology revolution spurred by open hardware and open software. The ability to understand and innovate upon computer architectures has been a weak element of academic research and collaborative professional communities due to the typical proprietary nature of chip designs. Now open architectures can be combined with open hardware and software to provide unique and advanced solutions to tackle problems in our rapidly growing and complex technological world.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-1.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-03-08-platformio-labs-helps-imagination-technologies/platformio-labs-helps-imagination-technologies-1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source February Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-february-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source February Updates" /><published>2021-03-04T00:00:00+02:00</published><updated>2021-03-04T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-february-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-february-2021-updates.html">&lt;p&gt;Welcome to the February 2021 updates of the &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-february-news.jpg&quot; alt=&quot;PlatformIO Open Source February Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During February, we added support for Zephyr v2.5.0, rolled out updates for the Espressif32, STMicroelectronics STM32, Microchip SAM/AVR and Texas Instruments MSP430 platforms, resolved a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#zephyr-v250-new-boards-initial-support-for-thread-local-storage-new-synchronization-mechanisms&quot; id=&quot;markdown-toc-zephyr-v250-new-boards-initial-support-for-thread-local-storage-new-synchronization-mechanisms&quot;&gt;Zephyr v2.5.0: New boards, initial support for Thread Local Storage, new synchronization mechanisms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif32-dev-platform-v31&quot; id=&quot;markdown-toc-espressif32-dev-platform-v31&quot;&gt;Espressif32 dev-platform v3.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-avr-dev-platform-v32&quot; id=&quot;markdown-toc-atmel-avr-dev-platform-v32&quot;&gt;Atmel AVR dev-platform v3.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v60&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v60&quot;&gt;Atmel SAM dev-platform v6.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stmicroelectronics-stm32-dev-platform-v120&quot; id=&quot;markdown-toc-stmicroelectronics-stm32-dev-platform-v120&quot;&gt;STMicroelectronics STM32 dev-platform v12.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#texas-instruments-msp430-dev-platform-v23&quot; id=&quot;markdown-toc-texas-instruments-msp430-dev-platform-v23&quot;&gt;Texas Instruments MSP430 dev-platform v2.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;zephyr-v250-new-boards-initial-support-for-thread-local-storage-new-synchronization-mechanisms&quot;&gt;Zephyr v2.5.0: New boards, initial support for Thread Local Storage, new synchronization mechanisms&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for a new release v2.5.0 of Zephyr Project - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in v2.5.0:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added Thread Local Storage (TLS) support&lt;/li&gt;
  &lt;li&gt;Added support for per thread runtime statistics&lt;/li&gt;
  &lt;li&gt;Added new synchronization mechanisms using Condition Variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Zephyr framework&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.5.0&quot;&gt;Release notes for v2.5.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html&quot;&gt;Documentation for Zephyr framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms&quot;&gt;Supported development platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif32-dev-platform-v31&quot;&gt;Espressif32 dev-platform v3.1&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif 32&lt;/a&gt; dev-platform comes with a ton of new boards, support for the latest Arduino core v1.0.5, updated toolchains and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/wifiduino32.html&quot;&gt;Blinker WiFiduino32&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/esp32doit-espduino.html&quot;&gt;DOIT ESPduino32&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/esp32thing_plus.html&quot;&gt;SparkFun ESP32 Thing Plus&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/etboard.html&quot;&gt;ETBoard&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/piranha_esp32.html&quot;&gt;Fishino Piranha ESP-32&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/healthypi4.html&quot;&gt;ProtoCentral HealthyPi 4&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/heltec_wireless_stick_lite.html&quot;&gt;Heltec Wireless Stick Lite&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/honeylemon.html&quot;&gt;HONEYLemon&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/imbrios-logsens-v1p1.html&quot;&gt;Imbrios LogSens V1P1&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/inex_openkb.html&quot;&gt;INEX OpenKB&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/kits-edu.html&quot;&gt;KITS ESP32 EDU&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/labplus_mpython.html&quot;&gt;Labplus mPython&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/m5stack-atom.html&quot;&gt;M5Stack ATOM&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32//m5stack-core2.html&quot;&gt;M5Stack Core2&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/m5stack-coreink.html&quot;&gt;M5Stick Core Ink&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/m5stack-timer-cam.html&quot;&gt;M5Stack Timer CAM&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/mgbot-iotik32a.html&quot;&gt;MGBOT IOTIK 32A&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/mgbot-iotik32b.html&quot;&gt;MGBOT IOTIK 32B&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/s_odi_ultra.html&quot;&gt;S.ODI Ultra v1&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/sensesiot_weizen.html&quot;&gt;LOGISENSES Senses Weizen&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/ttgo-lora32-v21.html&quot;&gt;TTGO LoRa32-OLED v2.1.6&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/ttgo-t7-v13-mini32.html&quot;&gt;TTGO T7 V1.3 Mini32&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/ttgo-t7-v14-mini32.html&quot;&gt;TTGO T7 V1.4 Mini32&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif32/lolin32_lite.html&quot;&gt;WEMOS LOLIN32 Lite&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Arduino framework to 1.0.5 (&lt;a href=&quot;https://github.com/espressif/arduino-esp32/releases/tag/1.0.5&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed missing argument to OTA tool when uploading SPIFFS image&lt;/li&gt;
  &lt;li&gt;Fixed memory configuration for the Lolin D32 Pro board&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Espressif32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/espressif32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-espressif32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-avr-dev-platform-v32&quot;&gt;Atmel AVR dev-platform v3.2&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelavr&quot;&gt;Atmel AVR&lt;/a&gt; v3.2.0 brings updates for highly customizable Arduino cores by MCUdude, new Arduino core for digispark boards, updated toolchain packages and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated MCUdude’s cores:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MajorCore&lt;/code&gt; v2.1.1 (&lt;a href=&quot;https://github.com/MCUdude/MajorCore/releases/tag/v2.1.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MegaCore&lt;/code&gt; v2.1.1 (&lt;a href=&quot;https://github.com/MCUdude/MegaCore/releases/tag/v2.1.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MightyCore&lt;/code&gt; v2.1.1 (&lt;a href=&quot;https://github.com/MCUdude/MightyCore/releases/tag/v2.1.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MiniCore&lt;/code&gt; v2.1.1 (&lt;a href=&quot;https://github.com/MCUdude/MiniCore/releases/tag/v2.1.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MicroCore&lt;/code&gt; to v2.0.3 (&lt;a href=&quot;https://github.com/MCUdude/MicroCore/releases/tag/v2.0.3&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;digispark&lt;/code&gt; boards were switched to Arduino core by @ArminJo and updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;micronucleus&lt;/code&gt; tool&lt;/li&gt;
  &lt;li&gt;The default toolchain switched to GCC &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v7.3.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Atmel AVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v60&quot;&gt;Atmel SAM dev-platform v6.0&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; v6.0.0 includes updates for the Adafruit and Seeed Arduino cores, updated SVD files for better debugging experience and several minor updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.5.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.5.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Adafruit SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.6.5&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/ArduinoCore-samd/releases/tag/1.6.5&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Seeed SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.1&lt;/code&gt; (&lt;a href=&quot;https://github.com/Seeed-Studio/ArduinoCore-samd/releases/tag/v1.8.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated SVD files&lt;/li&gt;
  &lt;li&gt;Added support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug_speed&lt;/code&gt;(https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-speed) option&lt;/li&gt;
  &lt;li&gt;Minor improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Atmel SAM dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelsam.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelsam/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stmicroelectronics-stm32-dev-platform-v120&quot;&gt;STMicroelectronics STM32 dev-platform v12.0&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/ststm32&quot;&gt;ST STM32&lt;/a&gt; platform comes with new generic boards, improvements for STM32Cube integration and several minor fixes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/genericSTM32F373RC.html&quot;&gt;genericSTM32F373RC&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/genericSTM32F407IGT6.html&quot;&gt;genericSTM32F407IG&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.5.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.5.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added support for &lt;a href=&quot;https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-speed&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug_speed&lt;/code&gt;&lt;/a&gt; option&lt;/li&gt;
  &lt;li&gt;Improvements to the STM32Cube integration:
    &lt;ul&gt;
      &lt;li&gt;Link STM32Cube HAL files as objects&lt;/li&gt;
      &lt;li&gt;Fixed filter template for internal libs&lt;/li&gt;
      &lt;li&gt;Added missing path to CMSIS-DSP headers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the ST STM32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;texas-instruments-msp430-dev-platform-v23&quot;&gt;Texas Instruments MSP430 dev-platform v2.3&lt;/h2&gt;

&lt;p&gt;The new &lt;a href=&quot;https://platformio.org/platforms/timsp430&quot;&gt;TI MSP430&lt;/a&gt; v2.3 is mostly a maintenance release that comes with the most recent Energia core, updated toolchain and auxiliary packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/timsp430/lpmsp430g2476.html&quot;&gt;TI LaunchPad MSP-EXP430FR2476LP&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Energia core to 1.8.10E23&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the TI MSP430 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/timsp430.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-timsp430/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the February 2021 updates of the PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-february-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-february-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source January Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-january-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source January Updates" /><published>2021-02-04T00:00:00+02:00</published><updated>2021-02-04T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-january-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-january-2021-updates.html">&lt;p&gt;Welcome to the January 2021 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
The beginning of the year can often take off with a slow start for any project, but we managed to prepare several great updates. As usual, we’d like to walk you through everything that’s new across the PlatformIO ecosystem.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-january-news.jpg&quot; alt=&quot;PlatformIO Open Source January Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During January, we have released a new version of PlatformIO Core, published a new RISC-V based development platform, added support for ESP-IDF v4.2, rolled out updates for the Espressif32 and Microchip SAM/megaAVR platforms, fixed a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-core-51&quot; id=&quot;markdown-toc-platformio-core-51&quot;&gt;PlatformIO Core 5.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#esp-idf-v42&quot; id=&quot;markdown-toc-esp-idf-v42&quot;&gt;ESP-IDF v4.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#openhw-risc-v-dev-platform&quot; id=&quot;markdown-toc-openhw-risc-v-dev-platform&quot;&gt;OpenHW RISC-V dev-platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif32-dev-platform-v30&quot; id=&quot;markdown-toc-espressif32-dev-platform-v30&quot;&gt;Espressif32 dev-platform v3.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-megaavr-dev-platform-v14&quot; id=&quot;markdown-toc-atmel-megaavr-dev-platform-v14&quot;&gt;Atmel megaAVR dev-platform v1.4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v511&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v511&quot;&gt;Atmel SAM dev-platform v5.1.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-core-51&quot;&gt;PlatformIO Core 5.1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/core/index.html&quot;&gt;PlatformIO Core&lt;/a&gt; is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v5.1.0 release. This milestone we again received helpful feedback from our community, which let us identify and tackle many issues and prepare a lot of great improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PlatformIO Home&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Boosted &lt;a href=&quot;https://docs.platformio.org/page/home/index.html&quot;&gt;PlatformIO Home&lt;/a&gt; performance thanks to migrating the codebase to the pure Python 3 Asynchronous I/O stack&lt;/li&gt;
      &lt;li&gt;Added a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--session-id&lt;/code&gt; option to &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/cmd_home.html&quot;&gt;pio home&lt;/a&gt; command that helps to keep PlatformIO Home isolated from other instances and protect from 3rd party access (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3397&quot;&gt;issue #3397&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build System&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Upgraded build engine to the SCons 4.1 (&lt;a href=&quot;https://scons.org/scons-410-is-available.html&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Refactored a workaround for a maximum command line character limitation (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3792&quot;&gt;issue #3792&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue with Python 3.8+ on Windows when a network drive is used (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3417&quot;&gt;issue #3417&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Package Management&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;New options for &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/system/cmd_prune.html&quot;&gt;pio system prune&lt;/a&gt; command:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--dry-run&lt;/code&gt; option to show data that will be removed&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--core-packages&lt;/code&gt; option to remove unnecessary core packages&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--platform-packages&lt;/code&gt; option to remove unnecessary development platform packages (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/923&quot;&gt;issue #923&lt;/a&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Added new &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/cmd_settings.html#check-prune-system-threshold&quot;&gt;check_prune_system_threshold&lt;/a&gt; setting&lt;/li&gt;
      &lt;li&gt;Disabled automatic removal of unnecessary development platform packages (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3708&quot;&gt;issue #3708&lt;/a&gt;, &lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3770&quot;&gt;issue #3770&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue when unnecessary packages were removed in  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update --dry-run&lt;/code&gt; mode (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3809&quot;&gt;issue #3809&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed a “ValueError: Invalid simple block” when uninstalling a package with a custom name and external source (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3816&quot;&gt;issue #3816&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Configure a custom debug adapter speed using a new &lt;a href=&quot;https://docs.platformio.org/page/projectconf/section_env_debug.html#debug-speed&quot;&gt;debug_speed&lt;/a&gt; option (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3799&quot;&gt;issue #3799&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Handle debugging server’s “ready_pattern” in “stderr” output&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Improved listing of &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/device/cmd_list.html&quot;&gt;multicast DNS services&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Fixed a “UnicodeDecodeError: ‘utf-8’ codec can’t decode byte” when using J-Link for firmware uploading on Linux (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3804&quot;&gt;issue #3804&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue with a compiler driver for “.ccls” language server (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3808&quot;&gt;issue #3808&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Fixed an issue when &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html#cmdoption-pio-device-monitor-eol&quot;&gt;pio device monitor –eol&lt;/a&gt; and “send_on_enter” filter do not work properly (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3787&quot;&gt;issue #3787&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information and use &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html&quot;&gt;pio upgrade&lt;/a&gt; command to update to the latest version.&lt;/p&gt;

&lt;h2 id=&quot;esp-idf-v42&quot;&gt;ESP-IDF v4.2&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for the latest stable &lt;strong&gt;ESP-IDF v4.2&lt;/strong&gt; - the official development framework for the ESP32 and ESP32-S Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in the latest release:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP32-S2&lt;/code&gt; SoC&lt;/li&gt;
  &lt;li&gt;Support of Bluetooth 5.0 for ESP32&lt;/li&gt;
  &lt;li&gt;Improvements to the Wi-Fi stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on project configuration for ESP-IDF can be found &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for ESP-IDF&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/espressif/esp-idf/releases/tag/v4.2&quot;&gt;Release notes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4.2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html&quot;&gt;Documentation for ESP-IDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openhw-risc-v-dev-platform&quot;&gt;OpenHW RISC-V dev-platform&lt;/h2&gt;

&lt;p&gt;OpenHW Group is a not-for-profit, global organization that provides an infrastructure for hosting high quality open-source HW developments in line with industry best practices. The OpenHW CV32E40P RISC-V core is the first open-source core for high-volume chips verified with the state-of-the-art process required for high-integrity, commercial SoCs.&lt;/p&gt;

&lt;p&gt;The first release of the OpenHW dev-platform includes basic functionality for uploading pregenerated bitstreams to FPGA boards, developing and debugging applications based on the PULP SDK.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-openhw/releases/tag/v0.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for OpenHW dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/openhw.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-openhw/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif32-dev-platform-v30&quot;&gt;Espressif32 dev-platform v3.0&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif 32&lt;/a&gt; dev-platform comes with new boards including the new ESP32-S2 SoC, support for ESP-IDF v4.2 and several improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/featheresp32-s2.html&quot;&gt;Adafruit ESP32-S2 Feather Development Board&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/esp32-s2-kaluga-1.html&quot;&gt;Espressif ESP32-S2-Kaluga-1 Kit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/esp32-s2-saola-1.html&quot;&gt;Espressif ESP32-S2-Saola-1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/nscreen-32.html&quot;&gt;YeaCreate NSCREEN-32&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP-IDF&lt;/code&gt; to the latest stable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added support for the new &lt;a href=&quot;https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-speed&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug_speed&lt;/code&gt;&lt;/a&gt; option&lt;/li&gt;
  &lt;li&gt;Default Arduino partitions moved to a separate section&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-megaavr-dev-platform-v14&quot;&gt;Atmel megaAVR dev-platform v1.4&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelmegaavr&quot;&gt;Atmel megaAVR&lt;/a&gt; includes initial support for megaTinyCore - a lightweight Arduino core for the tinyAVR 0-series and 1-series chips, a lot of new generic boards, updated Arduino packages, and several minor updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New board manifests for the following generic MCUs: &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1604.html&quot;&gt;ATtiny1604&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1606.html&quot;&gt;ATtiny1606&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1607.html&quot;&gt;ATtiny1607&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1614.html&quot;&gt;ATtiny1614&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1616.html&quot;&gt;ATtiny1616&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny1617.html&quot;&gt;ATtiny1617&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny202.html&quot;&gt;ATtiny202&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny204.html&quot;&gt;ATtiny204&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny212.html&quot;&gt;ATtiny212&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny214.html&quot;&gt;ATtiny214&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny3216.html&quot;&gt;ATtiny3216&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny3217.html&quot;&gt;ATtiny3217&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny402.html&quot;&gt;ATtiny402&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny404.html&quot;&gt;ATtiny404&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny406.html&quot;&gt;ATtiny406&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny412.html&quot;&gt;ATtiny412&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny414.html&quot;&gt;ATtiny414&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny416.html&quot;&gt;ATtiny416&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny417.html&quot;&gt;ATtiny417&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny804.html&quot;&gt;ATtiny804&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega64.html&quot;&gt;ATmega64&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny806.html&quot;&gt;ATtiny806&lt;/a&gt;, &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelmegaavr/ATtiny817.html&quot;&gt;ATtiny817&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initial support for &lt;a href=&quot;https://github.com/SpenceKonde/megaTinyCore&quot;&gt;megaTinyCore&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Updated megaAVR Arduino core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.7&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-megaavr/releases/tag/1.8.7&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated MegaCoreX to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.0.7&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MegaCoreX/releases/tag/v1.0.7&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Improvements to fuses and bootloader programming process&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/releases/tag/v1.4.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Atmel megaAVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v511&quot;&gt;Atmel SAM dev-platform v5.1.1&lt;/h2&gt;

&lt;p&gt;The new &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; v5.1.1 is mostly a maintenance release that comes with updated Arduino core and minor fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Adafruit SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.11&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-samd/releases/tag/1.8.11&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelsam/releases/tag/v5.1.1&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the January 2021 updates of PlatformIO Open Source professional collaborative platform for embedded development. The beginning of the year can often take off with a slow start for any project, but we managed to prepare several great updates. As usual, we’d like to walk you through everything that’s new across the PlatformIO ecosystem.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Core 5.1 🚀</title><link href="https://piolabs.com/blog/news/platformio-core-5-1-released.html" rel="alternate" type="text/html" title="PlatformIO Core 5.1 🚀" /><published>2021-01-28T00:00:00+02:00</published><updated>2021-01-28T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-core-5-1-released</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-core-5-1-released.html">&lt;p&gt;We are happy to announce the next release of PlatformIO Core with the boosted performance for PlatformIO Home, support for SCons 4.1, and the improved package management system!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/2021-01-28-platformio-core-5-1-released/platformio-core-5-1-released.png&quot; alt=&quot;PlatformIO Core 5.1 🚀&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-new&quot; id=&quot;markdown-toc-what-is-new&quot;&gt;What is New&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#platformio-home&quot; id=&quot;markdown-toc-platformio-home&quot;&gt;PlatformIO Home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build-system&quot; id=&quot;markdown-toc-build-system&quot;&gt;Build System&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#package-management&quot; id=&quot;markdown-toc-package-management&quot;&gt;Package Management&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#debugging&quot; id=&quot;markdown-toc-debugging&quot;&gt;Debugging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#upgrade&quot; id=&quot;markdown-toc-upgrade&quot;&gt;Upgrade&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-tuned&quot; id=&quot;markdown-toc-stay-tuned&quot;&gt;Stay tuned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-new&quot;&gt;What is New&lt;/h2&gt;

&lt;p&gt;In this section, we are going to highlight the most important changes and features introduced in PlatformIO Core 5.1.
Please visit &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.1.0&quot; target=&quot;_blank&quot;&gt;PlatformIO 5.1.0 Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h3 id=&quot;platformio-home&quot;&gt;PlatformIO Home&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/page/home/index.html&quot;&gt;PlatformIO Home&lt;/a&gt; is a powerful, modern, and interactive user interface (UI) for PlatformIO collaborative platform.
It’s powered by &lt;a href=&quot;/technology/modern-ui-toolkit.html&quot;&gt;PlatformIO Labs’ Modern UI Toolkit&lt;/a&gt; and contains the following key instruments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project Management&lt;/li&gt;
  &lt;li&gt;Library Management&lt;/li&gt;
  &lt;li&gt;Development Platforms, frameworks, and boards Management&lt;/li&gt;
  &lt;li&gt;Device Management (serial, logical, and multicast DNS services)&lt;/li&gt;
  &lt;li&gt;Static Code Analysis&lt;/li&gt;
  &lt;li&gt;Firmware File Explorer&lt;/li&gt;
  &lt;li&gt;Firmware Memory Inspection&lt;/li&gt;
  &lt;li&gt;Firmware Sections &amp;amp; Symbols Viewer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PlatformIO Core 5.1 brings significantly boosted performance to PlatformIO Home by migrating the codebase to the pure Python 3 Asynchronous I/O stack.
This approach solves previous issues caused by the Twisted engine that depends on operating system libraries and 3rd-party Python packages.&lt;/p&gt;

&lt;h3 id=&quot;build-system&quot;&gt;Build System&lt;/h3&gt;

&lt;h4 id=&quot;scons-41&quot;&gt;SCons 4.1&lt;/h4&gt;

&lt;p&gt;The PlatformIO Core 5.1 build engine has been upgraded to the latest &lt;a href=&quot;https://scons.org/&quot; target=&quot;_blank&quot;&gt;SCons 4.1 - a next-generation software construction tool&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/projectconf/advanced_scripting.html&quot;&gt;Configuration files are Python scripts&lt;/a&gt; – use the power of a real programming language to solve build problems&lt;/li&gt;
  &lt;li&gt;Built-in reliable and automatic dependency analysis&lt;/li&gt;
  &lt;li&gt;Improved support for parallel builds&lt;/li&gt;
  &lt;li&gt;Ability to &lt;a href=&quot;https://docs.platformio.org/page/projectconf/section_platformio.html#projectconf-pio-cache-dir&quot;&gt;share built files in a cache&lt;/a&gt; to speed up multiple builds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;command-line-character-limitation&quot;&gt;Command-line character limitation&lt;/h4&gt;

&lt;p&gt;Operating systems have their own default command-line character limitations. Windows OS is limited to 8192 characters where most Unix OSes to 131072.
These limitations lead to build issues caused by development frameworks that pass multiple “include” flags or dependent libraries per one command.&lt;/p&gt;

&lt;p&gt;PlatformIO Core 5.1 was switched to the SCons TempFileMunge that automatically handles long commands and moves flags to a temporary file.&lt;/p&gt;

&lt;h3 id=&quot;package-management&quot;&gt;Package Management&lt;/h3&gt;

&lt;p&gt;Starting with PlatformIO Core 5.1, the package management system does not cleanup unnecessary packages automatically.
We had a lot of discussion around this case, and the best solution was to allow users to personally maintain PlatformIO System.&lt;/p&gt;

&lt;p&gt;Hence, PlatformIO Core 5.1 introduces updated &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/system/cmd_prune.html&quot;&gt;pio system prune&lt;/a&gt; command with new options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--dry-run&lt;/code&gt; option to show data that will be removed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--core-packages&lt;/code&gt; option to remove unnecessary core packages&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--platform-packages&lt;/code&gt; option to remove unnecessary development platform packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that PlatformIO Core 5.1 will monitor PlatformIO installation and inform you about unnecessary data when their size on disk crosses a value set in &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/cmd_settings.html#check-prune-system-threshold&quot;&gt;check_prune_system_threshold&lt;/a&gt; setting. A default value is set to 1024Mb (1Gb).&lt;/p&gt;

&lt;p&gt;To list unnecessary data without pruning, please use the following command – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio system prune --dry-run&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;debugging&quot;&gt;Debugging&lt;/h3&gt;

&lt;p&gt;The initial debug adapter speed is an important setting that greatly affects the overall debugging experience. This new option will help users to more easily tune that value directly from their project configuration file regardless of what debug server is used. Here are some typical examples:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:custom_debug_speed_examples]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; fixed speed in kHz
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;debug_speed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;500&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; automatic speed (only J-Link)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;debug_speed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;auto&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; adaptive clocking instead of fixed JTAG speed (only J-Link)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;debug_speed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;adaptive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that not all dev-platforms support this feature at the moment, but we’ll gradually implement this functionality in all eligible platforms. Stay tuned!&lt;/p&gt;

&lt;h2 id=&quot;upgrade&quot;&gt;Upgrade&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PlatformIO IDE&lt;/strong&gt;: Left Sidebar &amp;gt; PlatformIO (icon) &amp;gt; Quick Access &amp;gt; Upgrade PlatformIO Core&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Terminal&lt;/strong&gt;: Please run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio upgrade&lt;/code&gt; command in terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-tuned&quot;&gt;Stay tuned&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><summary type="html">We are happy to announce the next release of PlatformIO Core with the boosted performance for PlatformIO Home, support for SCons 4.1, and the improved package management system!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-01-28-platformio-core-5-1-released/platformio-core-5-1-released.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-01-28-platformio-core-5-1-released/platformio-core-5-1-released.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>