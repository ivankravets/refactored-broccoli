<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://piolabs.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://piolabs.com/" rel="alternate" type="text/html" /><updated>2022-05-16T17:01:27+03:00</updated><id>https://piolabs.com/feed.xml</id><title type="html">PlatformIO Labs</title><subtitle>A proven technology used by global innovators and by millions of embedded developers around the world.</subtitle><author><name>PlatformIO Labs</name><email>contact@piolabs.com</email></author><entry><title type="html">PlatformIO Core 6.0 üöÄ</title><link href="https://piolabs.com/blog/news/platformio-core-6-0-released.html" rel="alternate" type="text/html" title="PlatformIO Core 6.0 üöÄ" /><published>2022-05-16T00:00:00+03:00</published><updated>2022-05-16T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-core-6-0-released</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-core-6-0-released.html"><![CDATA[<p>We are happy to announce the major release of PlatformIO Core with unified
Package Management CLI and a new generation of PlatformIO Unit Testing solution
that brings advanced instruments and new opportunities for test-driven embedded
development.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/2022-05-16-platformio-core-6-0-released/platformio-core-6-0-released.png" alt="PlatformIO Core 6.0 üöÄ" /></p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#what-is-new" id="markdown-toc-what-is-new">What is new</a>    <ul>
      <li><a href="#package-management" id="markdown-toc-package-management">Package Management</a>        <ul>
          <li><a href="#run-package-command" id="markdown-toc-run-package-command">Run package command</a></li>
          <li><a href="#virtual-symbolic-links" id="markdown-toc-virtual-symbolic-links">Virtual symbolic links</a></li>
        </ul>
      </li>
      <li><a href="#unit-testing" id="markdown-toc-unit-testing">Unit Testing</a>        <ul>
          <li><a href="#test-driven-development" id="markdown-toc-test-driven-development">Test-driven development</a></li>
          <li><a href="#hardware-less-development" id="markdown-toc-hardware-less-development">Hardware-less development</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#migration" id="markdown-toc-migration">Migration</a></li>
  <li><a href="#upgrade" id="markdown-toc-upgrade">Upgrade</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="what-is-new">What is new</h2>

<p>In this section, we are going to highlight the most important changes and
features introduced in PlatformIO Core 6.0. Please visit
<a href="https://docs.platformio.org/en/latest/core/history.html">PlatformIO Core 6.0 Release Notes</a>
for more detailed information.</p>

<h3 id="package-management">Package Management</h3>

<p>The PlatformIO Core 6.0 brings a powerful solution to manage libraries,
platforms and tools using the unified
<a href="https://docs.platformio.org/en/latest/core/userguide/pkg/index.html">Package Management CLI</a>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_install.html">pio pkg install</a> - install the project dependencies or custom packages</li>
  <li><a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_list.html">pio pkg list</a> - list installed packages</li>
  <li><a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_outdated.html">pio pkg outdated</a> - check for project outdated packages</li>
  <li><a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_search.html">pio pkg search</a> - search for packages</li>
  <li><a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_show.html">pio pkg show</a> - show package information</li>
  <li><a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_uninstall.html">pio pkg uninstall</a> uninstall the project dependencies or custom packages</li>
  <li><a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_update.html">pio pkg update</a> - update the project dependencies or custom packages.</li>
</ul>

<p>There are no more global packages that could lead to potential issues.
The new package management solution allows developers to use a modern declarative approach
for safety-critical embedded development. Using the Semantic
<a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_install.html#cmd-pkg-install-requirements">Version Requirements</a>
guarantees the full project reproducibility on any supported host machine for decades.</p>

<p>The new Package Management CLI operates in accordance with the active (working) project. The
<a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_install.html">pio pkg install</a>
command will install all required project dependencies.
The <a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_list.html">pio pkg list</a>
command allows listing not only dependent libraries but also
development platforms and their packages.</p>

<p>The notable addition is the <a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_outdated.html">pio pkg outdated</a>
command. It allows developers to check for outdated project packages and list version
information for all dependencies. There are three color legends to help developers
easily identify which updates are backward-incompatible.</p>

<h4 id="run-package-command">Run package command</h4>

<p><a href="https://registry.platformio.org/">PlatformIO Registry</a> contains a rich set of popular
toolchains and other useful tools. The <a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_exec.html#cmd-pkg-exec">pio pkg exec</a>
command allows developers to run an arbitrary command from the specified package. If the package
requirement is specified using the <code class="language-plaintext highlighter-rouge">pio pkg exec --package</code> option, PlatformIO will ensure that
the package is installed before running any command.</p>

<p>Practical use cases include running debugging servers, uploaders or
special tools from a toolchain. A few examples of how to leverage the
new <a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_exec.html#cmd-pkg-exec">pio pkg exec</a> command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Ensure JLink tool is installed and start GDB server</span>
<span class="o">&gt;</span> pio pkg <span class="nb">exec</span> <span class="nt">--package</span><span class="o">=</span>tool-jlink <span class="nt">--</span> JLinkGDBServer <span class="nt">-singlerun</span> <span class="nt">-if</span> JTAG <span class="nt">-select</span> USB <span class="nt">-jtagconf</span> <span class="nt">-1</span>,-1 <span class="nt">-device</span> EFR32BG22CxxxF512 <span class="nt">-port</span> 2331

<span class="c"># Run Espressif SoC serial bootloader utility and erase a flash from the target device</span>
<span class="o">&gt;</span> pio pkg <span class="nb">exec</span> <span class="nt">--</span> esptool.py erase_flash

<span class="c"># Disassembly AVR ELF file</span>
<span class="o">&gt;</span> pio pkg <span class="nb">exec</span> <span class="nt">--</span> avr-objdump <span class="nt">-d</span> <span class="nt">-m</span> avr2 .pio/build/uno/firmware.elf
</code></pre></div></div>

<h4 id="virtual-symbolic-links">Virtual symbolic links</h4>

<p>The most requested feature from the library maintainers was the ability to link
the existing package with the project without hard copying (duplicating). As a
workaround, developers used a Unix-native symlink solution and hence it was not possible
to declare a symlinked dependency in the
<a href="https://docs.platformio.org/en/latest/projectconf/index.html">‚Äúplatformio.ini‚Äù (Project Configuration File)</a>.</p>

<p>The PlatformIO 6.0 introduces cross-platform virtual symbolic links without
any dependencies on the host OS. PlatformIO <code class="language-plaintext highlighter-rouge">symlink://</code> resources do not
require any specific OS permissions. They are portable between different
host machines.</p>

<p>See <a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_install.html#cmd-pkg-install-specifications">Package Specifications</a>
for the ‚ÄúLocal Folder‚Äù.</p>

<h3 id="unit-testing">Unit Testing</h3>

<p>It‚Äôs been <a href="https://github.com/platformio/platformio-core/commit/bb22a1297bc2e4c3131530f15a2b4b3914836560" target="_blank">six years</a>
since we added support for unit testing and Unity was the only available testing framework.
We didn‚Äôt expect that the <a href="https://docs.platformio.org/en/latest/advanced/unit-testing/index.html">PlatformIO Unit Testing</a>
solution will gain broad popularity, especially when it comes to using it on native (host) machines.</p>

<p>So, the time has come to refresh our view on PlatformIO Unit Testing with taking into account
<a href="https://github.com/platformio/platformio-core/issues?q=is%3Aissue+label%3A%22unit+testing%22+is%3Aclosed+milestone%3A6.0" target="_blank">your feedback and feature requests</a>.</p>

<h4 id="test-driven-development">Test-driven development</h4>

<p>The PlatformIO Core 6.0 introduces an absolutely new workflow for
<a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank">test-driven development</a>
in the embedded systems industry.
Thanks to the rich set of supported <a href="https://docs.platformio.org/en/latest/advanced/unit-testing/frameworks/index.html">Unit Testing Frameworks</a>
and the ability to organize tests in groups using the <a href="https://docs.platformio.org/en/latest/advanced/unit-testing/structure.html#unit-testing-test-hierarchy">Test Hierarchy</a>,
developers can create hybrid projects and benefit from multiple testing
frameworks depending on the project requirements simultaneously. See a simple example of
the hybrid configuration:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[env:native]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">native</span>
<span class="py">test_framework</span> <span class="p">=</span> <span class="s">googletest</span>
<span class="py">test_filter</span> <span class="p">=</span>
  <span class="err">common/*</span>
  <span class="err">native/*</span>

<span class="nn">[env:embedded]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">...</span>
<span class="py">framework</span> <span class="p">=</span> <span class="s">...</span>
<span class="py">test_framework</span> <span class="p">=</span> <span class="s">unity</span>
<span class="py">test_filter</span> <span class="p">=</span>
  <span class="err">common/*</span>
  <span class="err">embedded/*</span>
</code></pre></div></div>

<p>Use more advanced C++ testing frameworks with Mocking support such as
<a href="https://docs.platformio.org/en/latest/advanced/unit-testing/frameworks/googletest.html">GoogleTest</a>
in pair with the <a href="https://docs.platformio.org/en/latest/platforms/native.html">Native</a>
development platform to run desktop tests on the host machine and a lightweight
framework, such as <a href="https://docs.platformio.org/en/latest/advanced/unit-testing/frameworks/unity.html#unit-testing-frameworks-unity">Unity</a>,
for running tests on the target embedded device with constrained resources.</p>

<h4 id="hardware-less-development">Hardware-less development</h4>

<p>It‚Äôs hard to imagine today a next-gen project development workflow that does
not benefit from <a href="https://docs.platformio.org/en/latest/integration/ci/index.html">Continuous Integration</a> systems.
PlatformIO already provides multiple solutions to improve code quality
including <a href="https://docs.platformio.org/en/latest/plus/pio-check.html">Static Code Analysis</a>.
In addition to the testing frameworks that allow developers to mock objects and simulate the
behavior of real objects, the PlatformIO Core 6.0 adds support for the
<a href="https://docs.platformio.org/en/latest/advanced/unit-testing/simulators/index.html">Simulators</a>.</p>

<p>The combination of simulation tools and testing frameworks allow developers to simulate hardware systems
and run unit tests in virtual environments. Simulators can significantly
accelerate project development, especially when used in pair
with <a href="https://docs.platformio.org/en/latest/integration/ci/index.html">Continuous Integration</a>.</p>

<p>Integration of any simulator tool to the PlatformIO :ref:<code class="language-plaintext highlighter-rouge">unit_testing</code>
is very simple and does not require any extra software or code writing.
Please take a look at the example below how easy it is to integrate
the  <a href="https://docs.platformio.org/en/latest/advanced/unit-testing/simulators/renode.html#unit-testing-simulators-renode">Renode</a>
simulation framework:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[env:hifive1-revb]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">sifive</span>
<span class="py">framework</span> <span class="p">=</span> <span class="s">zephyr</span>
<span class="py">board</span> <span class="p">=</span> <span class="s">hifive1-revb</span>

<span class="py">platform_packages</span> <span class="p">=</span>
    <span class="err">platformio/tool-renode</span>
<span class="py">test_testing_command</span> <span class="p">=</span>
    <span class="err">${platformio.packages_dir}/tool-renode/renode</span>
    <span class="err">--disable-xwt</span>
    <span class="err">-e</span> <span class="err">include</span> <span class="err">@scripts/single-node/sifive_fe310.resc</span>
    <span class="err">-e</span> <span class="err">showAnalyzer</span> <span class="err">uart1</span>
    <span class="err">-e</span> <span class="err">sysbus</span> <span class="err">LoadELF</span> <span class="err">@${platformio.build_dir}/${this.__env__}/firmware.elf</span>
    <span class="err">-e</span> <span class="err">start</span>
</code></pre></div></div>

<h2 id="migration">Migration</h2>

<p>PlatformIO Core 6.0 is fully backward compatible with PlatformIO 5.0 projects.</p>

<p>See <a href="https://docs.platformio.org/en/latest/core/migration.html">migration guide from 5.x to 6.0</a> for the further details.</p>

<h2 id="upgrade">Upgrade</h2>

<ul>
  <li><strong>PlatformIO IDE</strong>: Left Sidebar &gt; PlatformIO (icon) &gt; Quick Access &gt; Upgrade PlatformIO Core</li>
  <li><strong>Terminal</strong>: Please run <code class="language-plaintext highlighter-rouge">pio upgrade</code> command in terminal.</li>
</ul>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[PlatformIO Core 6.0 is out with unified Package Management CLI and a new generation of PlatformIO Unit Testing solution that brings advanced instruments and new opportunities for test-driven embedded development]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2022-05-16-platformio-core-6-0-released/platformio-core-6-0-released.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2022-05-16-platformio-core-6-0-released/platformio-core-6-0-released.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source April Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-april-2022-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source April Updates" /><published>2022-05-02T00:00:00+03:00</published><updated>2022-05-02T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-april-2022-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-april-2022-updates.html"><![CDATA[<p>Welcome to the April 2022 updates of the <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.</p>

<!-- more -->

<p>The last two months turned out to be a nightmare for the R&amp;D part of PlatformIO team located in Ukraine, as on February 24th they woke up in a new reality where a huge country can invade its neighbor, occupy cities and brutally kill thousands of innocent people. It‚Äôs hard to believe that in the twenty-first century there are people who seek for bloody wars instead of economic, human, scientific and technological development.</p>

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-april-news.jpg" alt="PlatformIO Open Source April Updates" /></p>

<p>Despite all difficulties and constant threats of shelling, we continued to work on the PlatformIO ecosystem and managed to prepare some great news for our community, so let‚Äôs go through the updates pushed recently.</p>

<p>We published new minor releases of PlatformIO Core and PlatformIO IDE for Visual Studio Code, rolled out updates for the Espressif32, Nordic nRF52, ST STM32 and Raspberry Pi platforms, fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-core-525" id="markdown-toc-platformio-core-525">PlatformIO Core 5.2.5</a></li>
  <li><a href="#espressif32-v42" id="markdown-toc-espressif32-v42">Espressif32 v4.2</a></li>
  <li><a href="#st-stm32-dev-platform-v153" id="markdown-toc-st-stm32-dev-platform-v153">ST STM32 dev-platform v15.3</a></li>
  <li><a href="#nordic-nrf52-dev-platform-v93" id="markdown-toc-nordic-nrf52-dev-platform-v93">Nordic nRF52 dev-platform v9.3</a></li>
  <li><a href="#arduino-core-for-mbed-enabled-devices-v30" id="markdown-toc-arduino-core-for-mbed-enabled-devices-v30">Arduino Core for mbed-enabled devices v3.0</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="platformio-core-525">PlatformIO Core 5.2.5</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v5.2.5 release. This milestone we again received helpful feedback from our community, which let us identify and tackle many issues and prepare a lot of great improvements:</p>

<ul>
  <li>Improved support for private packages in <a href="https://registry.platformio.org/">PlatformIO Registry</a></li>
  <li>Improved checking of available Internet connection for IPv6-only workstations (<a href="https://github.com/platformio/platformio-core/pull/4151">PR #4151</a>)</li>
  <li>Better detecting of default PlatformIO project directory on Linux OS (<a href="https://github.com/platformio/platformio-core/pull/4158">PR #4158</a>)</li>
  <li>Respect disabling debugging server from ‚Äúplatformio.ini‚Äù passing an empty value to the <a href="https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-server">debug_server</a> option</li>
  <li>Fixed a ‚Äúmodule asyncio has no attribute run‚Äù error when launching PIO Home using Python 3.6 (<a href="https://github.com/platformio/platformio-core/issues/4169">issue #4169</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-core/releases/tag/v5.2.5">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="espressif32-v42">Espressif32 v4.2</h2>

<p>The latest release of the <a href="https://registry.platformio.org/platforms/platformio/espressif32">Espressif 32</a> dev-platform comes with a hude number of new boards, the latest stable Arduino core v2.0.2, updated toolchain packages and a lot of fixes and improvements. The following release notes represent a cumulative list of changes introduced in the last releases of the Espressif 32 dev-platform:</p>

<ul>
  <li>Added new boards: <a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_funhouse_esp32s2">Adafruit FunHouse</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_magtag29_esp32s2">Adafruit MagTag 2.9</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_metro_esp32s2">Adafruit Metro ESP32-S2</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/atmegazero_esp32s2">ATMegaZero ESP32-S2</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/deneyapkart">Deneyap Kart</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/deneyapmini">Deneyap Mini</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/denky32">Denky32</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/denky_d4">Denky D4</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/franzininho_wifi_esp32s2">Franzininho WiFi</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/franzininho_wifi_msc_esp32s2">Franzininho WiFi MSC</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/kb32-ft">MakerAsia KB32-FT</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/micros2">microS2</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/sparkfun_esp32micromod">SparkFun ESP32 MicroMod</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/sparkfun_esp32s2_thing_plus">SparkFun ESP32-S2 Thing Plus</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/trueverit-iot-driver">Trueverit ESP32 Universal IoT Driver</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/trueverit-iot-driver-mk2">Trueverit ESP32 Universal IoT Driver MK II</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/um_feathers2">Unexpected Maker FeatherS2</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/um_feathers2_neo">Unexpected Maker FeatherS2 Neo</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/um_tinys2">Unexpected Maker TinyS2</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/upesy_wroom">uPesy ESP32 Wroom DevKit</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/upesy_wrover">uPesy ESP32 Wrover DevKit</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/ttgo-t-oi-plus.html">TTGO T-OI PLUS RISC-V ESP32-C3</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_feather_esp32s2_tft.html">Adafruit Feather ESP32-S2 TFT</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_qtpy_esp32s2.html">Adafruit QT Py ESP32-S2</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/dpu_esp32.html">DPU ESP32</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/wipy3.html">PyCom WiPy3 Board</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/wt32-eth01.html">Wireless-Tag WT32-ETH01</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/wipy3.html">PyCom WiPy3</a></li>
  <li>Added support for the latest stable Arduino v2.0.2 (<a href="https://github.com/espressif/arduino-esp32/releases/tag/2.0.2">release notes</a>)</li>
  <li>Added support for LittleFS and FFat filesystems (#546, #570, #643)</li>
  <li>Updated OpenOCD package to v0.11.0-esp32-20220411 (<a href="https://github.com/espressif/openocd-esp32/releases/tag/v0.11.0-esp32-20220411">release notes</a>)</li>
  <li>Updated esptoolpy to v3.3 (#770) (<a href="https://github.com/espressif/esptool/releases">release notes</a>)</li>
  <li>Added a feature of uploading filesystem images via a debug tool (#177, #422)</li>
  <li>Added <code class="language-plaintext highlighter-rouge">CMSIS-DAP</code> as available debug probe (#771)</li>
  <li>Fixed an issue with incorrect <code class="language-plaintext highlighter-rouge">objcopy</code> binary used for embedding external files (#714)</li>
  <li>Fixed an inconsistency with not used <code class="language-plaintext highlighter-rouge">offset_address</code> option when uploading via <code class="language-plaintext highlighter-rouge">esptool</code> (#538)</li>
  <li>Deprecated support for Simba and Pumbaa frameworks</li>
  <li>Minor fixes and improvements (#547, #603)</li>
</ul>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="st-stm32-dev-platform-v153">ST STM32 dev-platform v15.3</h2>

<p>The latest release of the <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a> platform comes with several new boards and dev-kits, support for the latest Arduino cores and several minor improvements:</p>

<ul>
  <li>Added new boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/devebox_h743vitx.html">DevEBox H743VITX</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/devebox_h750vbtx.html">DevEBox H750VBTX</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/electrosmith_daisy_patch_sm.html">Electrosmith Daisy Patch SM</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/electrosmith_daisy_petal_sm.html">Electrosmith Daisy Petal SM</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/weact_mini_h743vitx.html">WeAct Studio MiniSTM32H743VITX</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/weact_mini_h750vbtx.html">WeAct Studio MiniSTM32H750VBTX</a></li>
    </ul>
  </li>
  <li>Updated STM32 Arduino Core to the latest <code class="language-plaintext highlighter-rouge">v2.2.0</code> (<a href="https://github.com/stm32duino/Arduino_Core_STM32/releases/tag/2.2.0">release notes</a>)</li>
  <li>Updated Arduino Core for mbed enabled devices to the latest <code class="language-plaintext highlighter-rouge">v3.0.1</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/3.0.1">release notes</a>)</li>
</ul>

<p><strong>Related resources for the ST STM32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-ststm32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="nordic-nrf52-dev-platform-v93">Nordic nRF52 dev-platform v9.3</h2>

<p>The new <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> v9.3.0 comes with the latest Arduino cores for Adafruit and mbed-enabled boards:</p>

<ul>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v3.0.1</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/3.0.1">release notes</a>)</li>
  <li>Updated Arduino Adafruit core to <code class="language-plaintext highlighter-rouge">v1.3.0</code> (<a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/1.3.0">release notes</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-nordicnrf52/releases/tag/v9.3.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Nordic nRF52 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-nordicnrf52/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arduino-core-for-mbed-enabled-devices-v30">Arduino Core for mbed-enabled devices v3.0</h2>

<p>The <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a>, <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> and <a href="https://registry.platformio.org/platforms/platformio/raspberrypi">Raspberry Pi RP2040</a> dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v3.0 According to the release notes, v3.0 brings a lot of bugfixes and improvements in core and accompanying libraries.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[PlatformIO Core 5.2.5, New boards & dev-kits, Support for the latest Arduino ESP32 core v2.0, Updated Arduino Cores for ST STM32, Nordic nRF52 and Mbed-enabled devices]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-april-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-april-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Debugging with PlatformIO: Part 3. PlatformIO Unified Debugger in CLI mode</title><link href="https://piolabs.com/blog/insights/debugging-cli.html" rel="alternate" type="text/html" title="Debugging with PlatformIO: Part 3. PlatformIO Unified Debugger in CLI mode" /><published>2022-03-14T00:00:00+02:00</published><updated>2022-03-14T00:00:00+02:00</updated><id>https://piolabs.com/blog/insights/debugging-cli</id><content type="html" xml:base="https://piolabs.com/blog/insights/debugging-cli.html"><![CDATA[<p>Previously in this series we discussed the debugging workflow of desktop and embedded applications using the graphical facilities of VSCode. IDEs can provide the necessary functionality in many cases, but what to do when there isn‚Äôt any graphical frontend that can provide you all the tools and buttons to step through code and examine the execution process?</p>

<!-- more -->

<p>This is the third part (<a href="/blog/insights/debugging-introduction.html" target="_blank">Part 1</a>, <a href="/blog/insights/debugging-embedded.html" target="_blank">Part 2</a>) of a series where we‚Äôre exploring the capabilities of <a href="https://docs.platformio.org/en/latest/plus/debugging.html">PlatformIO Unified Debugger</a>. In this post we will cover the essential functionality in CLI mode that is extremely useful in cases when we don‚Äôt have the luxury of using a full-featured development environment. This post will give you a set of essential recommendations so that you can hunt down bugs much efficiently even without an IDE at hand.</p>

<p>Throughout this post, we will be using the <a href="https://docs.platformio.org/en/latest/boards/sifive/hifive1-revb.html">SiFive HiFive1 Rev B</a> board and <a href="https://docs.platformio.org/en/latest/frameworks/freedom-e-sdk.html">Freedom E SDK</a> as the development framework, but the techniques described here can be used with pretty much any target.</p>

<p>If you are new to the series, you may find the <a href="/blog/insights/debugging-introduction.html">Debugging with PlatformIO: Part 1. Back to the Basics</a> a useful starting point.</p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#prerequisites" id="markdown-toc-prerequisites">Prerequisites</a></li>
  <li><a href="#unified-debugger-in-cli-mode" id="markdown-toc-unified-debugger-in-cli-mode">Unified Debugger in CLI Mode</a>    <ul>
      <li><a href="#getting-started" id="markdown-toc-getting-started">Getting Started</a></li>
      <li><a href="#essential-commands" id="markdown-toc-essential-commands">Essential Commands</a>        <ul>
          <li><a href="#basic-navigation" id="markdown-toc-basic-navigation">Basic Navigation</a></li>
          <li><a href="#breakpoints" id="markdown-toc-breakpoints">Breakpoints</a></li>
          <li><a href="#watchpoints" id="markdown-toc-watchpoints">Watchpoints</a></li>
          <li><a href="#viewing-variables-memory-and-disassembly" id="markdown-toc-viewing-variables-memory-and-disassembly">Viewing Variables, Memory and Disassembly</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>This article uses the following components:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/core/installation.html#installation-methods">PlatformIO Core</a></li>
  <li><a href="https://docs.platformio.org/en/latest/boards/sifive/hifive1-revb.html">SiFive HiFive1 Rev B</a></li>
</ul>

<h2 id="unified-debugger-in-cli-mode">Unified Debugger in CLI Mode</h2>

<p>In previous articles we reviewed all essential components of the debugging process. One last piece that remained undefined is PlatformIO Unified Debugger itself. During several last years we‚Äôve been looking into the problem of the enormous complexity of the usual embedded software development tasks. As it turned out, setting all parts of the debug process is quite a challenge. That‚Äôs why we‚Äôve developed a unique instrument that abstracts away all the complexity of actual low-level debugging tasks like compiling firmware with debug symbols, setting up a debug server, configuring a target to reset the chip, and halt it at a specific line of code, etc. PlatformIO takes care of all these complex configuration steps behind the scenes and provides a rich command-line interface, so developers can focus solely on the debugging process. A huge additional benefit of this approach is that developers can conveniently switch among a huge range of debug frontends (IDEs, editors, etc.), debug probes, and debug servers while keeping the same unified configuration.</p>

<p>Let‚Äôs go deeper into the usual workflow and essential commands used when we run PlatformIO Unified Debugger in the CLI mode.</p>

<h3 id="getting-started">Getting Started</h3>

<p>As we outlined earlier, we are using the <code class="language-plaintext highlighter-rouge">HiFive RevB</code> board in this post. First, let‚Äôs install the <code class="language-plaintext highlighter-rouge">SiFive</code> development platform:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pio platform <span class="nb">install </span>sifive
</code></pre></div></div>

<p>PlatformIO will do all the heavy lifting for us by installing everything that is needed (toolchains, frameworks, etc.) automatically.
For the sake of simplicity, let‚Äôs get started by compiling the <code class="language-plaintext highlighter-rouge">freedom-e-sdk_sifive-welcome</code> example shipped together with the platform:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Navigate to the project folder</span>
<span class="nv">$ </span><span class="nb">cd</span> /home/&lt;user&gt;/.platformio/platforms/sifive/examples/freedom-e-sdk_sifive-welcome
<span class="c"># Build example for the sifive-hifive1-revb environment</span>
<span class="nv">$ </span>pio run <span class="nt">-e</span> sifive-hifive1-revb
</code></pre></div></div>

<p>If everything went well, we should see the successful result in the terminal window.</p>

<p>We compiled our project example, now let‚Äôs move to the debugging. We can start a new debug session in the CLI mode using the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pio debug <span class="nt">--interface</span><span class="o">=</span>gdb <span class="nt">-x</span> .pioinit
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">--interface</code> option specifies the name of the underlying debugger (in our case it‚Äôs GNU Debugger) and <code class="language-plaintext highlighter-rouge">.pioinit</code> is a pregenerated file with the default configuration for the current target. More info on the available flags can be found in the <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_debug.html">docs</a> for the <code class="language-plaintext highlighter-rouge">debug</code> command.</p>

<p>Once the initialization is completed, the output should look something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(gdb) PlatformIO: Resume the execution to `debug_init_break = tbreak main`
Setting breakpoint @ address 0x200115BA, Size = 2, BPHandle = 0x0001
Starting target CPU...
...Breakpoint reached @ address 0x200115BA
Reading all registers
Removing breakpoint @ address 0x200115BA, Size = 2
Temporary breakpoint 1, main () at src/sifive-welcome.c:84
84      {
(gdb)
</code></pre></div></div>

<p>Starting from this point we can type commands directly in the terminal.</p>

<h3 id="essential-commands">Essential Commands</h3>

<p>A thorough overview of all available commands is out of the scope for this post, but let‚Äôs review some fundamental commands for effective debugging in the CLI mode.</p>

<h4 id="basic-navigation">Basic Navigation</h4>

<p>Navigation in the code is essential functionality required to carefully examine the program‚Äôs state and behavior. The workflow is pretty much similar to the control actions available in any IDE. We can inspect the code line-by-line, step into functions or run the program until a breakpoint is reached. Here are the most common and often-used commands and their shortcuts for controlling the execution flow:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Continue execution
</span><span class="err">(gdb)</span> <span class="nn">[c]</span><span class="err">ontinue</span>
<span class="c"># Step one line of code (steps into function calls).
</span><span class="err">(gdb)</span> <span class="nn">[s]</span><span class="err">tep</span>
<span class="c"># Step one line of code (steps over function calls).
</span><span class="err">(gdb)</span> <span class="nn">[n]</span><span class="err">ext</span>
<span class="c"># Run until a source line past the current line
</span><span class="err">frame,</span> <span class="err">is</span> <span class="err">reached.</span>
<span class="err">(gdb)</span> <span class="nn">[u]</span><span class="err">ntil</span>
<span class="c"># Run until the current function returns.
</span><span class="err">(gdb)</span> <span class="nn">[f]</span><span class="err">inish</span>
</code></pre></div></div>

<p>A typical scenario for using stepping is to set a breakpoint in your program where a bug is supposedly located, run your program until it stops at that breakpoint, and then step through the code, checking the most relevant variables, until the problem occurs.</p>

<h4 id="breakpoints">Breakpoints</h4>

<p>As we discussed in the previous post, breakpoints is an extremely useful technique when we want to check the program‚Äôs state in a specific situation or condition. We can set breakpoints on a function name, a line number, or an instruction located at a particular address. The syntax for setting breakpoints is the following:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[b]</span><span class="err">reak</span> <span class="err">&lt;line</span> <span class="err">|</span> <span class="err">function</span> <span class="err">|</span> <span class="err">filename:line</span> <span class="err">|</span> <span class="err">filename:function</span> <span class="err">|</span> <span class="err">*memory</span> <span class="err">address&gt;</span>
</code></pre></div></div>

<p>When we create a new breakpoint, the debugger will assign a number to it. For example:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Set a breakpoint at a function name</span>
<span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>metal_led_get_rgb
Read 2 bytes @ address 0x20013F18
Breakpoint 6 at 0x20013f18: file src/led.c, line 8.
</code></pre></div></div>

<p>If we need to put a breakpoint somewhere in the middle of a function, we can specify a line number. To break in a different file, we need to specify the file name followed by a colon and the line number:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Set a temporary breakpoint at a line in the current file</span>
<span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>5
<span class="c"># or a specific line in a file</span>
<span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>led.c:13
</code></pre></div></div>

<p>We also can set a temporary breakpoint which will be deleted after the first time it‚Äôs hit:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Set a temporary breakpoint at a function name</span>
<span class="o">(</span>gdb<span class="o">)</span> tbreak main
<span class="c"># or a specific address</span>
<span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break</span> <span class="k">*</span>0x20013f18
</code></pre></div></div>

<p>To control breakpoints (enable/disable/delete) we can use the following commands:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enable/disable a breakpoint using its number</span>
<span class="o">(</span>gdb<span class="o">)</span> disable 2
<span class="o">(</span>gdb<span class="o">)</span> <span class="nb">enable </span>2
<span class="c"># Clear all breakpoints in a function</span>
<span class="o">(</span>gdb<span class="o">)</span> clear metal_led_get_rgb
<span class="c"># Clear all breakpoints at a given line</span>
<span class="o">(</span>gdb<span class="o">)</span> clear led.c:18
<span class="c"># Delete specific breakpoints</span>
<span class="o">(</span>gdb<span class="o">)</span> delete 5 6
</code></pre></div></div>

<h5 id="conditional-breakpoints">Conditional Breakpoints</h5>

<p>Sometimes, we need to stop the execution not only at a specific location but also when a certain condition is met. Conditional breakpoints can help with this by allowing more precise control of the reason for the program to stop. If the execution reaches the conditional breakpoint and the expression evaluates to false, then the debugger will automatically skip the breakpoint and let the program continue without notifying the user. A conditional breakpoint can be created by combining the usual breakpoint command with a specific condition:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[b]</span><span class="err">reak</span> <span class="err">&lt;line</span> <span class="err">|</span> <span class="err">function</span> <span class="err">|</span> <span class="err">filename:line</span> <span class="err">|</span> <span class="err">filename:function</span> <span class="err">|</span> <span class="err">*memory</span> <span class="err">address&gt;</span> <span class="err">&lt;condition&gt;</span>
</code></pre></div></div>
<p>Here are a few examples:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Set a breakpoint at a function name with a condition</span>
<span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>wait_for_timer <span class="k">if </span>timer_isr_flag <span class="o">==</span> 0
<span class="c"># Set a temporary breakpoint when a specific value in a CPU register</span>
<span class="o">(</span>gdb<span class="o">)</span> tbreak sifive_gpio-leds.c:58 <span class="k">if</span> <span class="nv">$a6</span> <span class="o">==</span> 0x80000f90
</code></pre></div></div>

<h4 id="watchpoints">Watchpoints</h4>

<p>Watchpoints are very similar to breakpoints which we discussed above. Unlike breakpoints which are set for functions or lines of code, watchpoints are set on expressions. Simply put, a watchpoint is just a special kind of breakpoint that stops the execution when the value of an expression changes without having to predict a specific location where this may happen. Watchpoints can monitor a simple variable or more complex expressions:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Watch a variable</span>
<span class="o">(</span>gdb<span class="o">)</span> watch rc
<span class="c"># Watch an address in memory</span>
<span class="o">(</span>gdb<span class="o">)</span> watch <span class="k">*</span><span class="o">(</span>uint8_t <span class="k">*</span><span class="o">)</span>0x10012000
<span class="c"># Watch a complex expression</span>
<span class="o">(</span>gdb<span class="o">)</span> watch <span class="o">(</span>rc <span class="o">!=</span> 0<span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span>counter <span class="o">&gt;</span> 100<span class="o">)</span>
</code></pre></div></div>

<p>We can manage watchpoints like any other breakpoint: enable, disable, and delete using the same commands:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enable/disable a watchpoint using its number</span>
<span class="o">(</span>gdb<span class="o">)</span> disable 2
<span class="o">(</span>gdb<span class="o">)</span> <span class="nb">enable </span>2
<span class="c"># Delete a specific watchpoint</span>
<span class="o">(</span>gdb<span class="o">)</span> delete 2
</code></pre></div></div>

<p>For example, in our project we can set a watchpoint to detect when the <code class="language-plaintext highlighter-rouge">timer_isr_flag</code> variable changes its value:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> watch timer_isr_flag
Read 4 bytes @ address 0x80000BB4 <span class="o">(</span>Data <span class="o">=</span> 0x00000000<span class="o">)</span>
Read 4 bHardware watchpoint 5: timer_isr_flag
Hardware watchpoint 6: timer_isr_flag
<span class="o">(</span>gdb<span class="o">)</span> <span class="k">continue
</span>Hardware watchpoint 8: timer_isr_flag
Old value <span class="o">=</span> 0
New value <span class="o">=</span> 1
0x20011418 <span class="k">in </span>timer_isr <span class="o">(</span><span class="nb">id</span><span class="o">=</span>&lt;optimized out&gt;, <span class="nv">data</span><span class="o">=</span>&lt;optimized out&gt;<span class="o">)</span>
    at src/sifive-welcome.c:57
57          timer_isr_flag <span class="o">=</span> 1<span class="p">;</span>
</code></pre></div></div>

<h4 id="viewing-variables-memory-and-disassembly">Viewing Variables, Memory and Disassembly</h4>

<p>When there is a pause in the execution (after the <code class="language-plaintext highlighter-rouge">next</code> or <code class="language-plaintext highlighter-rouge">step</code> commands, any type of breakpoint, etc.) we can print the values of all local and global variables using the <code class="language-plaintext highlighter-rouge">print</code> command:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">(gdb)</span> <span class="nn">[p]</span><span class="err">rint</span> <span class="err">&lt;expression&gt;</span>
</code></pre></div></div>

<p>It is possible to print complicated expressions, type casts, call functions, etc. Here are a few examples:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Print a variable</span>
<span class="o">(</span>gdb<span class="o">)</span> print wait_for_timer
<span class="c"># Print the value in hexadecimal format</span>
<span class="o">(</span>gdb<span class="o">)</span> print /x <span class="k">*</span>0x80000ad0
<span class="c"># Print the first three elements of an array</span>
<span class="o">(</span>gdb<span class="o">)</span> print <span class="k">*</span>array@3
</code></pre></div></div>

<p>GDB also provides a handy command called <code class="language-plaintext highlighter-rouge">printf</code> for formatted printing. It supports most of the standard C conversion specifications:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Formatted printing</span>
<span class="o">(</span>gdb<span class="o">)</span> <span class="nb">printf</span> <span class="s2">"led0_green size = %d, address = %p</span><span class="se">\n</span><span class="s2">"</span>, sizeof<span class="o">(</span>led0_green<span class="o">)</span>, <span class="o">((</span>void<span class="k">*</span><span class="o">)</span><span class="k">*</span>led0_green<span class="o">)</span>
Read 4 bytes @ address 0x80000ACC <span class="o">(</span>Data <span class="o">=</span> 0x20011288<span class="o">)</span>
led0_green size <span class="o">=</span> 4, address <span class="o">=</span> 0x20011288
</code></pre></div></div>

<p>Another option is the <code class="language-plaintext highlighter-rouge">display</code> command. It takes the same arguments as <code class="language-plaintext highlighter-rouge">print</code>, but prints the specified item every time the program stops:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> display led0_blue
1: led0_blue <span class="o">=</span> <span class="o">(</span>struct metal_led <span class="k">*</span><span class="o">)</span> 0x80000ad0 &lt;__metal_dt_led_2&gt;
<span class="o">(</span>gdb<span class="o">)</span> next
Performing single step...
150             wait_for_timer<span class="o">(</span>led0_red<span class="o">)</span><span class="p">;</span>
1: led0_blue <span class="o">=</span> <span class="o">(</span>struct metal_led <span class="k">*</span><span class="o">)</span> 0x80000ad0 &lt;__metal_dt_led_2&gt;
</code></pre></div></div>

<p>It‚Äôs also possible to print the values of all the local variables in the current stack frame by invoking the <code class="language-plaintext highlighter-rouge">info locals</code> command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> info locals
rc <span class="o">=</span> 0
led0_red <span class="o">=</span> 0x80000ac8 &lt;__metal_dt_led_0&gt;
led0_green <span class="o">=</span> 0x80000acc &lt;__metal_dt_led_1&gt;
led0_blue <span class="o">=</span> 0x80000ad0 &lt;__metal_dt_led_2&gt;
</code></pre></div></div>

<h5 id="examining-memory">Examining Memory</h5>

<p>GDB offers a convenient way of inspecting memory regions using the <code class="language-plaintext highlighter-rouge">x</code> command. The functionality is very similar to what we have in any IDE. The syntax is the following:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">x/nfu</span> <span class="err">&lt;address&gt;</span>
</code></pre></div></div>

<p>Where <code class="language-plaintext highlighter-rouge">nfu</code> are optional parameters that are responsible for how much data to show and how to format it. It supports various styles, including binary, decimal, hex, or even strings. Here is the memory dump for the region where the main function is located:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> x/64i main
0x200115ba &lt;main&gt;:      0x39    0x71    0x06    0xde    0x22    0xdc    0x26    0xda
0x200115c2 &lt;main+8&gt;:    0x4a    0xd8    0x4e    0xd6    0xb7    0x05    0x01    0x20
0x200115ca &lt;main+16&gt;:   0x93    0x85    0xc5    0x71    0x37    0x09    0x01    0x20
0x200115d2 &lt;main+24&gt;:   0x13    0x05    0x09    0x72    0xef    0x20    0x10    0x14
0x200115da &lt;main+32&gt;:   0x2a    0x84    0xb7    0x05    0x01    0x20    0x93    0x85
0x200115e2 &lt;main+40&gt;:   0x45    0x72    0x13    0x05    0x09    0x72    0xef    0x20
0x200115ea &lt;main+48&gt;:   0xf0    0x12    0xaa    0x84    0xb7    0x05    0x01    0x20
</code></pre></div></div>

<h5 id="disassembly">Disassembly</h5>

<p>GDB has built-in support for printing machine code for any function or a range of memory. We can quickly do that using the <code class="language-plaintext highlighter-rouge">disassemble</code> command:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[disas]</span><span class="err">semble</span> <span class="err">&lt;function</span> <span class="err">|</span> <span class="err">address1,</span> <span class="err">address2&gt;</span>
</code></pre></div></div>
<p>This command disassembles any function into assembly instructions, shows the address, name, and operands of each instruction:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> disassemble wait_for_timer
Dump of assembler code <span class="k">for function </span>wait_for_timer:
   0x2001155a &lt;+0&gt;:     addi    sp,sp,-16
   0x2001155c &lt;+2&gt;:     sw      ra,12<span class="o">(</span>sp<span class="o">)</span>
   0x2001155e &lt;+4&gt;:     sw      s0,8<span class="o">(</span>sp<span class="o">)</span>
   ...
</code></pre></div></div>
<p>It can also provide a mixed view of disassembly together with source code by specifying the <code class="language-plaintext highlighter-rouge">/s</code> modifier. The <code class="language-plaintext highlighter-rouge">/r</code> modifier can be used to print the raw instructions in hex. Here is an example that prints the disassembly for a range of addresses:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> disassemble/sr 0x200115c2, 0x200115cd
Dump of assembler code from 0x200115c2 to 0x200115cd:
src/sifive-welcome.c:
84      <span class="o">{</span>
   0x200115c2 &lt;main+8&gt;:         4a d8   sw      s2,48<span class="o">(</span>sp<span class="o">)</span>
   0x200115c4 &lt;main+10&gt;:        4e d6   sw      s3,44<span class="o">(</span>sp<span class="o">)</span>

85          int rc<span class="p">;</span>
86          struct metal_led <span class="k">*</span>led0_red, <span class="k">*</span>led0_green, <span class="k">*</span>led0_blue<span class="p">;</span>
87
88          // This demo will toggle LEDs colors so we define them here
89          led0_red <span class="o">=</span> metal_led_get_rgb<span class="o">(</span><span class="s2">"LD0"</span>, <span class="s2">"red"</span><span class="o">)</span><span class="p">;</span>
   0x200115c6 &lt;main+12&gt;:        b7 05 01 20     lui     a1,0x20010
   0x200115ca &lt;main+16&gt;:        93 85 c5 71     addi    a1,a1,1820 <span class="c"># 0x2001071c</span>
End of assembler dump.
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>In this post, we continued to explore the debugging capabilities of the PlatformIO ecosystem. Although the command-line interface might not be as user-friendly as a feature-rich IDE, it‚Äôs still a great instrument to quickly and efficiently hunt down bugs in your code base. The fact that CLI needs much fewer resources gives us the ability to debug applications even in a headless OS while keeping the same level of functionality.</p>

<p>In the next article, we will explore a very useful technique called ‚Äúsemihosting‚Äù used for communicating I/O requests from application code to a host computer running a debugger.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html"><![CDATA[In this post, we will cover the essential functionality in CLI mode which is extremely useful in cases when we don't have the luxury of using a full-featured development environment.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2022-03-14-debugging-cli/title.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2022-03-14-debugging-cli/title.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source January Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-january-2022-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source January Updates" /><published>2022-02-07T00:00:00+02:00</published><updated>2022-02-07T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-january-2022-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-january-2022-updates.html"><![CDATA[<p>Welcome to the January 2022 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.</p>

<p>We hope you enjoyed your holidays and had some quality time with your family and friends. Although some people like to reflect about the year gone by, others look forward to the new year and new beginnings and we are one of them! There are plenty of updates pushed in this month to help you move into working mode.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-january-news.jpg" alt="PlatformIO Open Source January Updates" /></p>

<p>Even though it‚Äôs only the beginning of the year, we‚Äôve managed to prepare a few great updates for our community!
During January, we have added support for the latest Zephyr v2.7.1, ESP-IDF v4.3.2 and updated Teensyduino core, not to mention a lot of resolved issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#zephyr-rtos-version-271" id="markdown-toc-zephyr-rtos-version-271">Zephyr RTOS version 2.7.1</a></li>
  <li><a href="#esp-idf-v432" id="markdown-toc-esp-idf-v432">ESP-IDF v4.3.2</a></li>
  <li><a href="#espressif32-dev-platform-v35" id="markdown-toc-espressif32-dev-platform-v35">Espressif32 dev-platform v3.5</a></li>
  <li><a href="#teensy-dev-platform-v415" id="markdown-toc-teensy-dev-platform-v415">Teensy dev-platform v4.15</a></li>
  <li><a href="#new-community-dev-platform-for-texas-instruments-msp432" id="markdown-toc-new-community-dev-platform-for-texas-instruments-msp432">New community dev-platform for Texas Instruments MSP432</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="zephyr-rtos-version-271">Zephyr RTOS version 2.7.1</h2>

<p>We‚Äôre happy to announce updated support for a new release v2.7.1 of Zephyr Project - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind. v2.7.1 is the first patch release in the LTS2 series that fixes many issues</p>

<p><strong>Related resources for Zephyr framework</strong>:</p>

<ul>
  <li><a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.1">Release notes for v2.7.1</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html">Documentation for Zephyr framework</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms">Supported development platforms</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards">Supported boards</a></li>
</ul>

<h2 id="esp-idf-v432">ESP-IDF v4.3.2</h2>

<p>We‚Äôre happy to announce updated support for the latest patch update of <strong>ESP-IDF v4.3</strong> - the official development framework for the ESP32, ESP32-S and ESP32-C Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.</p>

<p><strong>Major enhancements in v4.3.2:</strong></p>

<ul>
  <li>Added support for console output via USB_SERIAL_JTAG port on ESP32-C3</li>
  <li>Added support for 32-bit address (&gt;= 16MB) GD flash.</li>
</ul>

<p>More information on project configuration for ESP-IDF can be found <a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration">here</a>.</p>

<p><strong>Related resources for ESP-IDF</strong>:</p>

<ul>
  <li><a href="https://github.com/espressif/esp-idf/releases/tag/v4.3.2">Release notes for v4.3.2</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html">Documentation for ESP-IDF</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#boards">Supported boards</a></li>
</ul>

<h2 id="espressif32-dev-platform-v35">Espressif32 dev-platform v3.5</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/espressif32">Espressif 32</a> dev-platform comes with ESP-IDF v4.3.2, updated toolchain packages and several minor fixes and improvements:</p>
<ul>
  <li>Added new boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/esp32-s2-franzininho.html">Franzininho WiFi Board</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/lionbit.html">LionBit</a></li>
    </ul>
  </li>
  <li>Updated ESP-IDF to v4.3.2 (<a href="https://github.com/espressif/esp-idf/releases/tag/v4.3.2">release notes</a>)</li>
  <li>Updated toolchains for ESP-IDF to v8.4.0r2-patch2</li>
  <li>Minor fixes and improvements</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-espressif32/releases/tag/v3.5.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="teensy-dev-platform-v415">Teensy dev-platform v4.15</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/teensy">Teensy</a> dev-platform brings support for the Zephyr framework and the latest Teensyduino:</p>

<ul>
  <li>Initial support for the Zephyr framework for <a href="https://docs.platformio.org/en/latest/boards/teensy/teensy40.html">Teensy 4.0</a> and <a href="https://docs.platformio.org/en/latest/boards/teensy/teensy41.html">Teensy 4.1</a> added by <a href="https://github.com/Rovio01">@Rovio01</a></li>
  <li>Updated Teensyduino to <code class="language-plaintext highlighter-rouge">v1.56</code> (<a href="https://github.com/PaulStoffregen/cores/releases/tag/1.56">release notes</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the Teensy dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/teensy.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-teensy/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="new-community-dev-platform-for-texas-instruments-msp432">New community dev-platform for Texas Instruments MSP432</h2>

<p>We are always happy to see great contributions from our vibrant community. This month <a href="https://github.com/min-infcof">min-infcof</a> have done an excellent job by implementing an open source <a href="https://github.com/zceemja/platform-timsp432">development platform</a> for Texas Instruments MSP432 Microcontrollers.</p>

<p>MSP432 is a mixed-signal ultra-low-power microcontroller family featuring a Cortex-M4 processor in a wide configuration of device options.
With a rich set of analog, timing, and communications peripherals, they cater to a large number of application scenarios.</p>

<p>Don‚Äôt hesitate to give it a try, the first version <a href="https://registry.platformio.org/platforms/zceemja/timsp432">0.1.0</a> is already available in PlatformIO Registry.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[New boards, Support for Zephyr v2.7.1, ESP-IDF v4.3.2 and Teensyduino v1.56, a new community dev-platform for Texas Instruments MSP432]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO 2021 Year in Review</title><link href="https://piolabs.com/blog/news/platformio-year-in-review-2021.html" rel="alternate" type="text/html" title="PlatformIO 2021 Year in Review" /><published>2021-12-31T00:00:00+02:00</published><updated>2021-12-31T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-year-in-review-2021</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-year-in-review-2021.html"><![CDATA[<p>Let‚Äôs be honest, this year wasn‚Äôt less cruel than the previous one. The world still suffers from the pandemic impacting people‚Äôs health and livelihoods. While we are happy that the year is coming to a close, there is also much to celebrate and be proud of. Since 2014, we have been focused on improving the lives of everyday engineers with free, open-source, and next-generation instruments that enhance professional development productivity. This year is no exception, so we would like to end it with a blog post highlighting the major milestones and achievements of PlatformIO Labs.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/2021-12-31-platformio-year-in-review-2021/platformio_year_in_review_2022.png" alt="PlatformIO 2021 Year in Review" /></p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#major-milestones" id="markdown-toc-major-milestones">Major Milestones</a></li>
  <li><a href="#platformio-in-education" id="markdown-toc-platformio-in-education">PlatformIO in Education</a></li>
  <li><a href="#updated-trusted-package-registry" id="markdown-toc-updated-trusted-package-registry">Updated Trusted Package Registry</a></li>
  <li><a href="#blog-and-social-activity" id="markdown-toc-blog-and-social-activity">Blog and Social Activity</a></li>
  <li><a href="#words-of-appreciation" id="markdown-toc-words-of-appreciation">Words of Appreciation</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="major-milestones">Major Milestones</h2>

<p>2021 is a special year for us. This year we‚Äôve reached a tremendous number of 2,000,000 unique installations of our <a href="https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide" target="_blank">PlatformIO IDE for VSCode</a> extension and based on the dominant amount of 5-star reviews, we can confirm that there are tens of thousands of happy developers around the world using our products on an everyday basis!</p>

<p>We‚Äôve continued to ship major new features and tons of improvements to all of our existing products. The PlatformIO Core finally hit the <a href="/blog/news/platformio-core-5-2-released.html">5.2 milestone</a> with huge improvements to performance, debugging experience, updated package management system, and much more. The PlatformIO IDE for Microsoft Visual Studio Code had multiple releases with the <a href="https://github.com/platformio/platformio-vscode-ide/releases/tag/v2.4.0">v2.4</a> as the latest and continues to focus on improving the developer experience and stability by leveraging our highly-customizable <a href="/technology/modern-ui-toolkit.html">Modern UI Toolkit</a>.</p>

<p>In addition to the major releases of our core products, we continued to grow our hardware ecosystem and now it contains 40+ development platforms, 1000+ boards and development kits, including cutting-edge hardware from the rapidly growing RISC-V ecosystem.</p>

<p>During 2021 PlatormIO Labs <a href="/blog/news/openhw-tv-s2e04.html">participated</a> in OpenHW Group by providing a flexible and completely vendor-neutral development ecosystem. It was great to be part of the OpenHW Software Task Group and see how our sincere contributions were greatly appreciated by the OpenHW Group community all around the world.</p>

<figure class="figure mb-7">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-12-31-platformio-year-in-review-2021/platformio_yearly_active_users_2012_2021.png" alt="PlatformIO Yearly Active Users (2014-2021)" />
  <figcaption class="figure-caption text-center">
    PlatformIO Yearly Active Users (2014-2021)
  </figcaption>
</figure>

<h2 id="platformio-in-education">PlatformIO in Education</h2>

<p>One of the main priorities of PlatformIO Labs is to play a central role in empowering academics, engineers and silicon vendors to leverage modern open-source technologies on anything from simple prototypes to truly ambitious projects. We would like to highlight that two educational courses leveraged our Tech-as-a-Service in their curriculum this year.</p>

<p>The first is one is <a href="/blog/press-releases/platformio-labs-helps-imagination-technologies.html">RVfpga: Understanding Computer Architecture</a> offered by Imagination Technologies. It includes a rich set of teaching materials and practical exercises to help students understand the key elements of processor architecture, including IP cores, and how to modify a RISC-V core and its microarchitectures. The course engaged several widely reputed sponsors and supporters who have given outstanding support to this large and complex project. We are thrilled to be part of this exciting initiative and looking forward to its future adoption in the best universities in the world.</p>

<p>The second is an entry-level course by Microsoft called <a href="/blog/news/microsoft-leverages-platformio.html">IoT for beginners</a>. This course is oriented on teachers, students and learners of all types that are just beginning their journey in the Internet of Things. Its 24-lesson curriculum covers a lot of essential topics required to get started with understanding devices, sensors, actuators, and writing those all-important first lines of code. We are happy to see how companies like Microsoft pick PlatformIO as their development tool of choice for microcontroller development.</p>

<h2 id="updated-trusted-package-registry">Updated Trusted Package Registry</h2>

<p>The <a href="/technology/trusted-package-registry.html">Trusted Package Registry</a> was designed to help developers, teams, silicon vendors securely accelerate their package distribution with a trusted, centralized channel and pipeline at scale. Even though we presented this solution not long ago, we already have engaged several enterprise clients. Such a reaction clearly indicates that there is a growing demand for turn-key package management solutions.</p>

<p>During the last few months, we‚Äôve been working on a completely new version of UI for the <a href="https://registry.platformio.org/">PlatformIO Package Registry</a>. Finally, we are excited to announce that it‚Äôs ready to be presented to our faithful community. More powerful, more intuitive, taking the PlatformIO ecosystem capabilities to a whole new level. Even though technically the registry is already generally available, we‚Äôll be sharing more details soon, so don‚Äôt miss the official launch in early January!</p>

<h2 id="blog-and-social-activity">Blog and Social Activity</h2>

<p>In 2021, we published a lot of learning material that unveils the most important PlatformIO Best Practices from inside and out. The new generation of embedded developers strive to write better code in all aspects, so it was no surprise that our series on unit testing was the most popular read in 2021, including the <a href="/blog/insights/unit-testing-part-3.html">Continuous Integration and Remote Testing</a> post featuring <a href="https://docs.platformio.org/en/latest/plus/pio-remote.html">PlatformIO Remote</a> running on Github Actions.</p>

<p>We believe that knowledge is power, but sharing knowledge is even more important. More than 90 high-quality articles, tutorials and videos from around the Internet were promoted under the <a href="https://www.linkedin.com/feed/hashtag/learnembedded/" target="_blank">#LearnEmbedded</a> hashtag in our social accounts. Your feedback was incredibly positive, so we plan to continue this tradition in 2022 and share with you even more in-depth informational materials.</p>

<h2 id="words-of-appreciation">Words of Appreciation</h2>

<p>We are incredibly thankful for the contributions that we receive as we continue to grow the PlatformIO project to greater heights. PlatformIO could not become as popular as it is today without you, our community of users. Your continuous pull requests and bug reports help us make our products better with each passing year. In turn, we promise to further expand the PlatformIO ecosystem and provide even more powerful products, allowing individual developers and organizations to take full advantage of our professional collaborative platform.</p>

<p>Finally, on behalf of the PlatformIO Labs team, we would like to thank everyone for being a part of all of this work and success. We are deeply grateful for your time, passion, support, and invite you to continue our journey together in the next year!</p>

<p><strong>Have a great 2022!</strong></p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><category term="featured" /><summary type="html"><![CDATA[The highlights of the major milestones and achievements of PlatformIO Labs in 2021]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-12-31-platformio-year-in-review-2021/platformio_year_in_review_2022.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-12-31-platformio-year-in-review-2021/platformio_year_in_review_2022.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Debugging with PlatformIO: Part 2. Debugging an Embedded Target</title><link href="https://piolabs.com/blog/insights/debugging-embedded.html" rel="alternate" type="text/html" title="Debugging with PlatformIO: Part 2. Debugging an Embedded Target" /><published>2021-12-13T00:00:00+02:00</published><updated>2021-12-13T00:00:00+02:00</updated><id>https://piolabs.com/blog/insights/debugging-embedded</id><content type="html" xml:base="https://piolabs.com/blog/insights/debugging-embedded.html"><![CDATA[<p>Embedded systems are becoming more complex, more autonomous, and more intelligent. The rise of the ML and AI technologies fuels the complexity of embedded software even further. It‚Äôs getting increasingly difficult to hunt down and isolate errors in the code, but at the same time, the demand for reliability continues to grow as well. With this increased complexity comes a need for more advanced and efficient debug instruments that will help to prevent bugs in production and find issues much easier.</p>

<!-- more -->

<p>This is the second part of a four-part blog series where we‚Äôre exploring the debugging workflow implemented in <a href="https://docs.platformio.org/en/latest/plus/debugging.html">PlatformIO Unified Debugger</a>. In the <a href="/blog/insights/debugging-introduction.html">first post</a>, we briefly went through the fundamental concepts of the debugging process, learned how to control the execution flow of an application, and reviewed the essential components of the ‚ÄúDebug‚Äù perspective.</p>

<p>In this article, we will focus on how to apply that knowledge to debugging an embedded target. This part also aims at providing a brief overview of how debugging of an embedded system works behind the scenes and what advanced instruments may be helpful for efficient debugging.</p>

<p>Throughout this post, we will be using the <a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_f401re.html">ST Nucleo-F401RE</a> board and <a href="https://docs.platformio.org/en/latest/frameworks/stm32cube.html">STM32Cube</a> as the development framework.</p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#prerequisites" id="markdown-toc-prerequisites">Prerequisites</a></li>
  <li><a href="#introduction-to-debugging-embedded-targets" id="markdown-toc-introduction-to-debugging-embedded-targets">Introduction to Debugging Embedded Targets</a>    <ul>
      <li><a href="#debug-interfaces" id="markdown-toc-debug-interfaces">Debug Interfaces</a></li>
      <li><a href="#debug-probes" id="markdown-toc-debug-probes">Debug Probes</a></li>
      <li><a href="#debug-servers" id="markdown-toc-debug-servers">Debug Servers</a></li>
    </ul>
  </li>
  <li><a href="#advanced-instruments" id="markdown-toc-advanced-instruments">Advanced Instruments</a>    <ul>
      <li><a href="#registers-and-peripherals" id="markdown-toc-registers-and-peripherals">Registers and Peripherals</a></li>
      <li><a href="#memory-window" id="markdown-toc-memory-window">Memory Window</a></li>
      <li><a href="#disassembly-window" id="markdown-toc-disassembly-window">Disassembly Window</a></li>
    </ul>
  </li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>This article uses the following components:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">VSCode with installed PlatformIO IDE extension</a></li>
  <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_f401re.html">ST Nucleo-F401RE</a></li>
</ul>

<h2 id="introduction-to-debugging-embedded-targets">Introduction to Debugging Embedded Targets</h2>

<p>Most of the time, debugging an embedded system is not very different from debugging a desktop application. Usually, the host machine, where our development environment is running, doesn‚Äôt have any facilities to access the state of external hardware. That‚Äôs why we need to configure an additional set of hardware and software components so we can translate the commands sent from the debugger on a host machine to a target device using some sort of communication channel. Before we dive into the details of the debugging workflow, let‚Äôs take a quick look at a typical setup for debugging an embedded target.</p>

<figure class="figure mb-7">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-07-05-debugging-embedded/debug-setup.jpg" alt="Compilation and linking process" />
  <figcaption class="figure-caption text-center">
    Debug setup for an embedded target
  </figcaption>
</figure>

<p>Let‚Äôs go through the main components of the configuration depicted above.</p>

<h3 id="debug-interfaces">Debug Interfaces</h3>

<p>Nowadays there are two prevalent interfaces used for debugging embedded systems: JTAG and Serial Wire Debug (SWD). The classic JTAG was developed in the ‚Äô80s by the Joint Test Access Group as a standard for verifying designs and testing printed circuit boards after manufacture. Today, JTAG is widely adopted by the semiconductor industry and frequently used for programming, testing and debugging embedded systems. The main disadvantage of the JTAG interface is that it requires at least four pins (TRST is optional) for normal functioning. This might be a problem when we are using small package ICs with a limited number of pins.</p>

<p>There is a simplified alternative interface called Serial Wire Debug (SWD) developed by Arm. It replaces the JTAG interface with two signals - a single bi-directional data line (SWDIO) and clock (SWCLK), providing all the usual debug and test functionality with higher performance compared  JTAG. Although a lot of modern microcontrollers support both JTAG and SWD interfaces, SWD is a proprietary interface and can be used mostly within the Arm ecosystem.</p>

<h3 id="debug-probes">Debug Probes</h3>

<p>We can describe debug probes as hardware mediators between the host machine and the debug port of the target embedded system. The main task of any debug probe is to convert commands from the debugger into signals understandable to the target device. Usually, debug probes are connected to the host via USB, but there are also more exotic variations with Ethernet or Wi-Fi connectivity allowing developers to debug devices even remotely from anywhere in the world.</p>

<p>There is a plenty of debug adapters available in the market, starting from open-source and vendor-agnostic probes (<a href="https://docs.platformio.org/en/latest/plus/debug-tools/blackmagic.html">Black Magic Probe</a>) up to proprietary solutions from both silicon vendors (<a href="https://docs.platformio.org/en/latest/plus/debug-tools/atmel-ice.html">Atmel-ICE</a>, <a href="https://docs.platformio.org/en/latest/plus/debug-tools/stlink.html">ST-Link</a>) and independent commercial companies (<a href="https://docs.platformio.org/en/latest/plus/debug-tools/jlink.html">Segger J-Link</a>). Some vendors also offer development kits (<a href="https://docs.platformio.org/en/latest/boards/nordicnrf52/nrf52_dk.html">Nordic nRF52-DK</a>, <a href="https://docs.platformio.org/en/latest/boards/nxpimxrt/mimxrt1010_evk.html">NXP i.MX RT1010</a>) with an onboard debug probe so developers can start debugging without any additional hardware.</p>

<p>It‚Äôs worth mentioning that PlatformIO Unified Debugger is highly configurable and can be used with a wide variety of debug probes, it also provides a huge set of predefined configurations for development kits that have built-in debug circuitry. It means that developers don‚Äôt need any debug configuration, just connect your board and start a new debug session.</p>

<h3 id="debug-servers">Debug Servers</h3>

<p>Simply put, a debug server is a piece of software running on the host machine that acts as a bridge between the debugger and the debug probe connected to the target device. <a href="http://openocd.org">OpenOCD</a> is one of the best examples of free and open-source debug servers. It‚Äôs a community-driven project with a huge number of supported debug probes and target devices. Another example is <a href="https://github.com/pyocd/pyOCD">pyOCD</a> - an open-source package for programming and debugging Arm Cortex-M microcontrollers. On the other hand, there are companies like Segger that offer their own set of tools (including debug servers) that better utilizes the capabilities of their J-Link debug probes. There are also debug probes that don‚Äôt need any intermediary host software at all (e.g. Black Magic Probe) and can interact with debuggers directly by mimicking a debug server over a serial port.</p>

<h2 id="advanced-instruments">Advanced Instruments</h2>

<p>In addition to the basic components of the Debug View reviewed in the previous part, let‚Äôs take a look at the instruments that might be useful when debugging an embedded target. For the sake of simplicity, let‚Äôs get started by importing the <code class="language-plaintext highlighter-rouge">stm32cube-hal-blink</code> example directly from the PlatformIO Home page:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-07-05-debugging-embedded/debugging-example-1.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-1.png" />
</a></p>

<p>This example contains a lot of environments, but we need to select <code class="language-plaintext highlighter-rouge">nucleo_f401re</code> according to the board used in this post:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-07-05-debugging-embedded/debugging-example-2.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-2.png" />
</a></p>

<p>Now we are ready to start debugging! To launch a new debug session we can use the following options:</p>

<ul>
  <li>Debug: Start debugging from the top menu</li>
  <li>Start Debugging option from the <code class="language-plaintext highlighter-rouge">Quick Access</code> menu</li>
  <li>Hotkey button <code class="language-plaintext highlighter-rouge">F5</code>:</li>
</ul>

<p>Once a new debug session is started we can open the advanced panes of the Debug View:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-07-05-debugging-embedded/debugging-example-3.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-3.png" />
</a></p>

<p>Let‚Äôs examine them in greater detail.</p>

<h3 id="registers-and-peripherals">Registers and Peripherals</h3>

<p>These windows show the current state of the processor and peripheral registers:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-regs-periphs.png" alt="Registers and Peripherals windows" />
  <figcaption class="figure-caption text-center">
    Registers and Peripherals windows
  </figcaption>
</figure>

<p>The Registers and Peripherals windows are especially useful for finding out the root cause of fault-related exceptions that occurred during the normal execution flow. Additionally, if we combine these windows with the Disassembly view discussed below we can get a powerful environment for very low-level debugging in cases when there is no actual source code available to step through. Note that the Registers and Peripherals windows are platform-specific, so a different target might have a different set of registers.</p>

<h3 id="memory-window">Memory Window</h3>

<p>In contrast to the ‚ÄúVariables‚Äù and ‚ÄúWatch‚Äù panes, the ‚ÄúMemory‚Äù window shows the raw contents of memory at a specific address:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-memory-view.png" alt="Memory Window" />
  <figcaption class="figure-caption text-center">
    Memory Window
  </figcaption>
</figure>

<p>This window is useful for examining large chunks of memory that can‚Äôt be displayed in a meaningful manner in other panes. It displays everything in the selected memory area, including code, constants and even random garbage in uninitialized memory. You can open several instances of the ‚ÄúMemory‚Äù windows if you want to monitor several different memory areas simultaneously.</p>

<h3 id="disassembly-window">Disassembly Window</h3>

<p>This window shows assembler instructions mixed with source code for the application being debugged:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-07-05-debugging-embedded/debugging-example-disasm.png" alt="Disassembly Window" />
  <figcaption class="figure-caption text-center">
    Disassembly Window
  </figcaption>
</figure>

<p>The ‚ÄúDisassembly‚Äù allows you to carry out all the normal debug actions including single-stepping and setting breakpoints on the level of individual assembly instructions generated by the compiler. Note that this window automatically appears if there is no source code available.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Debugging is an unavoidable part of the development process and embedded software is no exception. Debugging can consume a considerable amount of time and that‚Äôs why developers should take advantage of modern instruments to accelerate the debugging process and make it significantly easier to more precisely track down and diagnose errors in their codebase.</p>

<p>In this post, we continued to explore the debugging capabilities of the PlatformIO ecosystem. Powerful features like the Peripherals, Memory, and Disassembly views are extremely useful when we need to take a deeper look at the low-level state of the target. In the <a href="/blog/insights/debugging-cli.html">next part</a>, we‚Äôll review advanced best practices, tips and tricks for efficient debugging, including PlatformIO Unified Debugger in CLI mode.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html"><![CDATA[This part aims at providing a brief overview of how debugging of an embedded system works behind the scenes and what advanced instruments may be helpful for efficient debugging.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-07-05-debugging-embedded/nucleo.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-07-05-debugging-embedded/nucleo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source November Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-november-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source November Updates" /><published>2021-12-06T00:00:00+02:00</published><updated>2021-12-06T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-november-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-november-2021-updates.html"><![CDATA[<p>Welcome to the November 2021 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-november-news.jpg" alt="PlatformIO Open Source November Updates" /></p>

<p>During November, we released a new version of PlatformIO IDE for Visual Studio Code, rolled out updates for the Espressif32, Nordic nRF52, Raspberry Pi and ST STM32 platforms, fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-ide-for-visual-studio-code-v24" id="markdown-toc-platformio-ide-for-visual-studio-code-v24">PlatformIO IDE for Visual Studio Code v2.4</a></li>
  <li><a href="#platformio-core-523" id="markdown-toc-platformio-core-523">PlatformIO Core 5.2.3</a></li>
  <li><a href="#esp-idf-v431" id="markdown-toc-esp-idf-v431">ESP-IDF v4.3.1</a></li>
  <li><a href="#espressif32-dev-platform-v34" id="markdown-toc-espressif32-dev-platform-v34">Espressif32 dev-platform v3.4</a></li>
  <li><a href="#st-stm32-dev-platform-v151" id="markdown-toc-st-stm32-dev-platform-v151">ST STM32 dev-platform v15.1</a></li>
  <li><a href="#nordic-nrf52-dev-platform-v91" id="markdown-toc-nordic-nrf52-dev-platform-v91">Nordic nRF52 dev-platform v9.1</a></li>
  <li><a href="#chips-alliance-dev-platform-v11" id="markdown-toc-chips-alliance-dev-platform-v11">CHIPS Alliance dev-platform v1.1</a></li>
  <li><a href="#arduino-core-for-mbed-enabled-devices-v261" id="markdown-toc-arduino-core-for-mbed-enabled-devices-v261">Arduino Core for mbed-enabled devices v2.6.1</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="platformio-ide-for-visual-studio-code-v24">PlatformIO IDE for Visual Studio Code v2.4</h2>

<p><a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html"><img class="figure-img img-fluid" src="/assets/posts/oss-updates/platformio-ide-for-vscode-laptop.png" alt="PlatformIO IDE for VSCode" /></a></p>

<p>We are pleased to announce a new release <code class="language-plaintext highlighter-rouge">v2.4</code> of PlatformIO IDE for <a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">Visual Studio Code</a> that brings new functionality for project workspaces, updated installer and several bugfixes:</p>

<ul>
  <li>Added named status bars: ‚ÄúPlatformIO: Toolbar‚Äù and ‚ÄúPlatformIO: Project Environment Switcher‚Äù (ability to hide them separately) (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/2593">#2593</a>)</li>
  <li>Added ‚ÄúVerbose Check‚Äù project task</li>
  <li>Synchronize VSCode workspaces with PlatformIO Home Projects (requires PlatformIO Core 5.2.3 or above) (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/1367">#1367</a>)</li>
  <li>Automatically switch to newly created project‚Äôs environment (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/2414">#2414</a>)</li>
  <li>Fixed an issue when ‚ÄúCopy to Clipboard‚Äù does not work in PlatformIO Home on macOS (requires PlatformIO Core 5.2.3 or above) (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/2570">#2570</a>)</li>
  <li>PlatformIO IDE Installer
    <ul>
      <li>Updated installer script to 1.1.0</li>
      <li>Check global PlatformIO Core installation when built-in is disabled</li>
      <li>Handle ‚ÄúCould not find distutils module‚Äù error on Linux</li>
      <li>Rebuild project IDE configuration on ‚Äúplatformio.ini‚Äù change</li>
    </ul>
  </li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-vscode-ide/releases/tag/v2.4.0">Release Notes</a> for more detailed information.</p>

<h2 id="platformio-core-523">PlatformIO Core 5.2.3</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v5.2.3 release with lots of great improvements and bugfixes:</p>

<ul>
  <li>Automatically synchronize active projects between IDE and <a href="https://docs.platformio.org/en/latest/home/index.html">PlatformIO Home</a></li>
  <li>Added support for custom <a href="https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html#filters">device monitor filters</a> (<a href="https://github.com/platformio/platformio-core/issues/3924">issue #3924</a>)</li>
  <li>Show human-readable message when infinite recursion is detected while processing <a href="https://docs.platformio.org/en/latest/projectconf/interpolation.html">Interpolation of Values</a> (<a href="https://github.com/platformio/platformio-core/issues/3883">issue #3883</a>)</li>
  <li>Improved directory interpolation (<code class="language-plaintext highlighter-rouge">${platformio.***_dir}</code>) in <a href="https://docs.platformio.org/en/latest/projectconf.html">‚Äúplatformio.ini‚Äù</a> configuration file (<a href="https://github.com/platformio/platformio-core/issues/3934">issue #3934</a>)</li>
  <li>Ignore resolving of SCons variables (e.g., <code class="language-plaintext highlighter-rouge">${(SOURCE.get_abspath())}</code>) when preprocessing interpolations (<a href="https://github.com/platformio/platformio-core/issues/3933">issue #3933</a>)</li>
  <li>Added ‚Äúinc‚Äù as a sign that it‚Äôs the root of the library (<a href="https://github.com/platformio/platformio-core/issues/4093">issue #4093</a>)</li>
  <li>Fixed an issue when the <code class="language-plaintext highlighter-rouge">$PROJECT_DIR</code> variable was not properly replaced in the <a href="https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-server">debug_server</a> option (<a href="https://github.com/platformio/platformio-core/issues/4086">issue #4086</a>)</li>
  <li>Fixed an issue when <a href="https://docs.platformio.org/en/latest/plus/pio-remote.html">PIO Remote</a> device monitor crashes on the first keypress (<a href="https://github.com/platformio/platformio-core/issues/3832">issue #3832</a>)</li>
  <li>Fixed ‚ÄúDo not know how to make File target ‚Äòdebug‚Äô‚Äù issue when debugging project using <a href="https://docs.platformio.org/en/latest/integration/ide/clion.html">CLion IDE</a> (<a href="https://github.com/platformio/platformio-core/issues/4089">pull #4089</a>)</li>
  <li>Fixed ‚ÄúUnicodeEncodeError‚Äù when a build output contains non-ASCII characters (<a href="https://github.com/platformio/platformio-core/issues/3971">issue #3971</a>)</li>
  <li>Fixed an issue when VSCode‚Äôs debugger does not the honor default environment (<a href="https://github.com/platformio/platformio-core/issues/4098">issue #4098</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-core/releases/tag/v5.2.3">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="esp-idf-v431">ESP-IDF v4.3.1</h2>

<p>We‚Äôre happy to announce updated support for the latest stable <strong>ESP-IDF v4.3.1</strong> - the official development framework for the ESP32, ESP32-S and ESP32-C Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.</p>

<p><strong>Major enhancements in the latest release:</strong></p>

<ul>
  <li>Improvements to Classic Bluetooth and BLE</li>
  <li>Speeded up Ethernet start up process</li>
  <li>Updated mbedTLS</li>
</ul>

<p>More information on project configuration for ESP-IDF can be found <a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration">here</a>.</p>

<p><strong>Related resources for ESP-IDF</strong>:</p>

<ul>
  <li><a href="https://github.com/espressif/esp-idf/releases/tag/v4.3.1">Release notes for <code class="language-plaintext highlighter-rouge">v4.3.1</code></a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html">Documentation for ESP-IDF</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#boards">Supported boards</a></li>
</ul>

<h2 id="espressif32-dev-platform-v34">Espressif32 dev-platform v3.4</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/espressif32">Espressif 32</a> dev-platform comes wit the latest ESP-IDF, updated toolchain packages and several minor fixes and improvements:</p>

<ul>
  <li>Updated ESP-IDF to the latest 4.3.1 (<a href="https://github.com/espressif/esp-idf/releases/tag/v4.3.1">release notes</a>)</li>
  <li>Updated toolchains for ESP-IDF to v8.4.0</li>
  <li>Fixed partition offset calculation process</li>
  <li>Fixed a regression with incorrect flash modes used for uploading</li>
  <li>Fixed an issue with incorrect command used for embedding plain files in IDF-based projects</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-espressif32/releases/tag/v3.4.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="st-stm32-dev-platform-v151">ST STM32 dev-platform v15.1</h2>

<p>The latest <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a> v15.1.0 brings support for the latest Arduino core for mbed-enabled boards and updated <code class="language-plaintext highlighter-rouge">ldscripts</code> package that includes the latest MCU targets:</p>

<ul>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.6.1</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.6.1">release notes</a>)</li>
  <li>Updated the <code class="language-plaintext highlighter-rouge">ldscripts</code> package to include the latest MCUs (#563)</li>
  <li>Minor fixes and improvements (#576, #582)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-ststm32/releases/tag/v15.1.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the ST STM32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-ststm32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="nordic-nrf52-dev-platform-v91">Nordic nRF52 dev-platform v9.1</h2>

<p>The new <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> v9.1.0 comes with the latest Arduino cores for Adafruit and mbed-enabled boards:</p>

<ul>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.6.1</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.6.1">release notes</a>)</li>
  <li>Updated Arduino Adafruit core to <code class="language-plaintext highlighter-rouge">v1.2.0</code> (<a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/1.2.0">release notes</a>)</li>
  <li>Minor improvements (#129)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-nordicnrf52/releases/tag/v9.1.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Nordic nRF52 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-nordicnrf52/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="chips-alliance-dev-platform-v11">CHIPS Alliance dev-platform v1.1</h2>

<p>The latest <a href="https://registry.platformio.org/platforms/platformio/chipsalliance">CHIPS Alliance</a> v1.1 is mostly a maintenance release that brings several important bugfixes and improvements for Imagination Technologies <a href="/blog/press-releases/platformio-labs-helps-imagination-technologies.html">‚ÄúRVfpga: Understanding Computer Architecture‚Äù</a> course.</p>

<ul>
  <li>Updated the OpenOCD package to v0.11</li>
  <li>Updated default FPGA bitstream</li>
  <li>Updated default upload command</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-chipsalliance/releases/tag/v1.1.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the CHIPS Alliance dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/chipsalliance.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-chipsalliance/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arduino-core-for-mbed-enabled-devices-v261">Arduino Core for mbed-enabled devices v2.6.1</h2>

<p>The <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a>, <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> and <a href="https://registry.platformio.org/platforms/platformio/raspberrypi">Raspberry Pi RP2040</a> dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.6.1. According to the <a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.6.1">release notes</a>, v2.6.1 brings a lot of bugfixes and improvements in core and bundled libraries.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[Improved PlatformIO IDE for Microsoft VSCode, PlatformIO Core bugfix release, Support for the latest ESP-IDF, Updated Arduino cores]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-november-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-november-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source October Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-october-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source October Updates" /><published>2021-11-01T00:00:00+02:00</published><updated>2021-11-01T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-october-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-october-2021-updates.html"><![CDATA[<p>Welcome to the October 2021 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-october-news.jpg" alt="PlatformIO Open Source October Updates" /></p>

<p>During October, we have released a new version of PlatformIO Core, added support for Zephyr v2.7.0, rolled out updates for the STMicroelectronics STM32, Nordic nRF52, Teensy and several other development platforms, resolved a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-core-52" id="markdown-toc-platformio-core-52">PlatformIO Core 5.2</a></li>
  <li><a href="#zephyr-rtos-version-270-lts2" id="markdown-toc-zephyr-rtos-version-270-lts2">Zephyr RTOS version 2.7.0 (LTS2)</a></li>
  <li><a href="#st-stm32-dev-platform-v150" id="markdown-toc-st-stm32-dev-platform-v150">ST STM32 dev-platform v15.0</a></li>
  <li><a href="#nordic-nrf52-dev-platform-v90" id="markdown-toc-nordic-nrf52-dev-platform-v90">Nordic nRF52 dev-platform v9.0</a></li>
  <li><a href="#atmel-sam-dev-platform-v70" id="markdown-toc-atmel-sam-dev-platform-v70">Atmel SAM dev-platform v7.0</a></li>
  <li><a href="#teensy-dev-platform-v414" id="markdown-toc-teensy-dev-platform-v414">Teensy dev-platform v4.14</a></li>
  <li><a href="#arduino-core-for-mbed-enabled-devices-v252" id="markdown-toc-arduino-core-for-mbed-enabled-devices-v252">Arduino Core for mbed-enabled devices v2.5.2</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="platformio-core-52">PlatformIO Core 5.2</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v5.2 release. This milestone we again received helpful feedback from our community, which let us identify and tackle many issues and prepare a lot of great improvements:</p>

<ul>
  <li><strong>Boosted Debugging Performance</strong>. The Unified Debugger codebase has been migrated to the pure Python 3 Asynchronous I/O stack which allowed us to significantly improve the overall debugging experience even in CLI mode!</li>
  <li><strong>Unit Tests Debugging</strong>. Debugging tests is now as easy as adding a single line to your configuration file.</li>
  <li><strong>Debugger for Native Platform</strong>. Embedded developers can now debug their applications on host machines using the same usual workflow.</li>
  <li>The PlatformIO build engine has been upgraded to the latest SCons 4.2.</li>
  <li>Updated package management system with a more error-proof and intuitive package publishing process.</li>
  <li>Updated static analysis tools to the latest available versions. Now developers can identify even more potential bugs, vulnerabilities, and security threats.</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-core/releases/tag/v5.2.0">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="zephyr-rtos-version-270-lts2">Zephyr RTOS version 2.7.0 (LTS2)</h2>

<p>We‚Äôre happy to announce updated support for a new release v2.7.0 of Zephyr Project - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind.</p>

<p><strong>Major enhancements in v2.7.0:</strong></p>

<ul>
  <li>Bluetooth Audio, Direction Finding, and Mesh improvements</li>
  <li>New Action-based Power Management API</li>
  <li>Improved thread safety</li>
</ul>

<p><strong>Related resources for Zephyr framework</strong>:</p>

<ul>
  <li><a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0">Release notes for v2.7.0</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html">Documentation for Zephyr framework</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms">Supported development platforms</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards">Supported boards</a></li>
</ul>

<h2 id="st-stm32-dev-platform-v150">ST STM32 dev-platform v15.0</h2>

<p>The latest release of the <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a> platform comes with several new boards and dev-kits, support for the latest Zephyr v2.7.0, updated Arduino cores and several minor improvements:</p>

<ul>
  <li>Added new boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/bw_swan_r5.html">BluesWireless Swan R5</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/disco_b_u585i_iot02a.html">ST B-U585I-IOT02A Discovery</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/disco_h735ig.html">STM32H735G-DK Discovery kit</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_g0b1re.html">ST Nucleo G0B1RE</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_l010rb.html">ST Nucleo L010RB</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_u575zi_q.html">ST Nucleo U575ZI-Q</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/storm32_v1_31_rc.html">STorM32 BGC v1.31 RC</a></li>
    </ul>
  </li>
  <li>Updated Zephyr framework to <code class="language-plaintext highlighter-rouge">v2.7.0</code> (<a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0">release notes</a>)</li>
  <li>Updated STM32 Arduino Core to the latest <code class="language-plaintext highlighter-rouge">v2.1.0</code> (<a href="https://github.com/stm32duino/Arduino_Core_STM32/releases/tag/2.1.0">relase notes</a>)</li>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.5.2</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.5.2">release notes</a>)</li>
  <li>Updated the OpenOCD package to the latest v0.11</li>
  <li>Minor fixes and improvements (#569, #570, #574)</li>
</ul>

<p><strong>Related resources for the ST STM32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-ststm32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="nordic-nrf52-dev-platform-v90">Nordic nRF52 dev-platform v9.0</h2>

<p>The new release of <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> dev-platform brings support for Zephyr 2.7.0, updated Arduino cores and several minor bufixes:</p>
<ul>
  <li>New boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/nordicnrf52/adafruit_ledglasses_nrf52840.html">Adafruit LED Glasses Driver nRF52840</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/nordicnrf52/nicla_sense_me.html">Arduino Nicla Sense ME</a></li>
    </ul>
  </li>
  <li>Updated Zephyr framework to <code class="language-plaintext highlighter-rouge">v2.7.0</code> (<a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0">release notes</a>)</li>
  <li>Updated Arduino Core for mbed enabled devices to <code class="language-plaintext highlighter-rouge">v2.5.2</code> (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.5.2">release notes</a>)</li>
  <li>Updated Arduino Adafruit core to <code class="language-plaintext highlighter-rouge">v1.1.0</code> (<a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/1.1.0">release notes</a>)</li>
  <li>Updated the OpenOCD package to the latest v0.11</li>
  <li>Minor fixes and improvements (#128)</li>
</ul>

<p><strong>Related resources for the Nordic nRF52 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-nordicnrf52/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="atmel-sam-dev-platform-v70">Atmel SAM dev-platform v7.0</h2>

<p>The latest <a href="https://registry.platformio.org/platforms/platformio/atmelsam">Atmel SAM</a> v3.3.1 is mostly a maintenance release that brings several important bugfixes and improvements:</p>

<ul>
  <li>Updated Zephyr framework to <code class="language-plaintext highlighter-rouge">v2.7.0</code> (<a href="https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0">release notes</a>)</li>
  <li>Updated Arduino Adafruit core to <code class="language-plaintext highlighter-rouge">v1.7.5</code> (<a href="https://github.com/adafruit/ArduinoCore-samd/releases/tag/1.7.5">release notes</a>)</li>
  <li>Updated the OpenOCD package to the latest v0.11</li>
</ul>

<p><strong>Related resources for the atmelsam dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/atmelsam.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-atmelsam/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="teensy-dev-platform-v414">Teensy dev-platform v4.14</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/teensy">Teensy</a> dev-platform comes with support for the latest Teensyduino:</p>

<ul>
  <li>Updated Teensyduino to <code class="language-plaintext highlighter-rouge">v1.55</code> (<a href="https://github.com/PaulStoffregen/cores/releases/tag/1.55">release notes</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the Teensy dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/teensy.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-teensy/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arduino-core-for-mbed-enabled-devices-v252">Arduino Core for mbed-enabled devices v2.5.2</h2>

<p>The <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a>, <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> and <a href="https://registry.platformio.org/platforms/platformio/raspberrypi">Raspberry Pi RP2040</a> dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.5.2. According to the <a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.5.2">release notes</a>, v2.5.2 brings a lot of bugfixes and improvements in core and bundled libraries.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[PlatformIO Core 5.2, New boards & dev-kits, Support for Zephyr v2.7.0 and Teensyduino v1.55, Updated Arduino Cores for Microchip SAM, ST STM32, Nordic nRF52 and Mbed-enabled devices]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-october-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-october-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Debugging with PlatformIO: Part 1. Back to the Basics</title><link href="https://piolabs.com/blog/insights/debugging-introduction.html" rel="alternate" type="text/html" title="Debugging with PlatformIO: Part 1. Back to the Basics" /><published>2021-09-20T00:00:00+03:00</published><updated>2021-09-20T00:00:00+03:00</updated><id>https://piolabs.com/blog/insights/debugging-introduction</id><content type="html" xml:base="https://piolabs.com/blog/insights/debugging-introduction.html"><![CDATA[<p>Debugging is an inseparable part of the development process. People make mistakes, so our code doesn‚Äôt do what we expect once in a while. Often such problems happen at the worst possible time. That‚Äôs why it‚Äôs a good idea to master debugging techniques and skills to more precisely isolate the source code of a problem and fix it in a timely manner.</p>

<!-- more -->

<p>In the <strong>Debugging with PlatformIO</strong> series, we will be exploring the debugging capabilities of the PlatformIO ecosystem. This series will walk you through the core concepts of the debug workflow implemented in <a href="https://docs.platformio.org/en/latest/plus/debugging.html">PlatformIO Unified Debugger</a>. In each part, we will explore new features and techniques which can greatly help us out when we bump into a thorny problem in a real project.</p>

<p>This series will cover a broad range of topics, starting from the basics like debugging a simple application running on your machine up to advanced topics like debugging a suite of unit tests on a remote embedded target. In each following post, we will use a new combination of debug probes and targets to show how easy it‚Äôs to switch between hardware simply by changing several lines in the PlatformIO configuration file. For your reference, below is a list of the articles in this series:</p>

<ul>
  <li>Part 1. Back to the Basics (this article)</li>
  <li><a href="/blog/insights/debugging-embedded.html">Part 2. Debugging an Embedded Target</a></li>
  <li><a href="/blog/insights/debugging-cli.html">Part 3. PlatformIO Unified Debugger in CLI mode</a></li>
  <li>Part 4. Using Semihosting on ARM Targets (coming soon).</li>
</ul>

<p>Although throughout this series we will be using the PlatformIO IDE for VScode, PlatformIO Unified Debugger supports many other Desktop and Cloud development environments, including <a href="https://docs.platformio.org/en/latest/integration/ide/eclipse.html">Eclipse</a> and <a href="https://docs.platformio.org/en/latest/integration/ide/clion.html">JetBrains CLion</a>.</p>

<p>The first part provides a brief introduction to the debugging concept and gives a basic overview of debugging process used in the PlatformIO IDE for VSCode without any reference to the embedded software development. Setting breakpoints, adding watch expressions, and other essential features of the debugger are covered in this part.</p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#prerequisites" id="markdown-toc-prerequisites">Prerequisites</a></li>
  <li><a href="#basic-principles" id="markdown-toc-basic-principles">Basic Principles</a></li>
  <li><a href="#platformio-unified-debugger" id="markdown-toc-platformio-unified-debugger">PlatformIO Unified Debugger</a></li>
  <li><a href="#getting-started" id="markdown-toc-getting-started">Getting Started</a></li>
  <li><a href="#working-with-debugger" id="markdown-toc-working-with-debugger">Working with Debugger</a>    <ul>
      <li><a href="#debug-view" id="markdown-toc-debug-view">Debug View</a>        <ul>
          <li><a href="#controlling-the-program-execution" id="markdown-toc-controlling-the-program-execution">Controlling the program execution</a></li>
          <li><a href="#managing-breakpoints" id="markdown-toc-managing-breakpoints">Managing Breakpoints</a></li>
          <li><a href="#call-stack" id="markdown-toc-call-stack">Call Stack</a></li>
          <li><a href="#working-with-variables" id="markdown-toc-working-with-variables">Working with Variables</a></li>
          <li><a href="#watch-expressions" id="markdown-toc-watch-expressions">Watch Expressions</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>This article uses the following components:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">VSCode with installed PlatformIO IDE extension</a></li>
  <li><a href="https://registry.platformio.org/platforms/platformio/native">Native Development Platform</a></li>
</ul>

<h2 id="basic-principles">Basic Principles</h2>

<p>Modern software may be extremely complex, and sooner or later, we‚Äôll find ourselves in a situation when some part of the code doesn‚Äôt work as expected. It‚Äôs not always clear what causes our code to behave incorrectly or even crash, so we need to get involved and figure out why and where an error occurs in our program. That process of finding and fixing such errors (so-called ‚Äúbugs‚Äù) is called <em>Debugging</em>. Even though debugging is mostly a unique experience, a few general debugging principles can be picked out:</p>

<ul>
  <li>Reproduce the problem reliably</li>
  <li>Locate the source of the problem</li>
  <li>Understand the root cause of the problem</li>
  <li>Find a solution for the problem</li>
  <li>Apply the solution and test the fix</li>
</ul>

<p>While in simple projects we can make do with printing messages directly to the debug console as the code executes (commonly known as ‚ÄúPrint Debugging‚Äù), it‚Äôs definitely a waste of time when it comes to reasonably complex projects. In such cases, we need more advanced and comprehensive instruments to better understand what actually is happening inside our code. Such tools are called <em>debuggers</em>. In general, debuggers allow working with the code interactively, controlling the execution line-by-line, examining CPU registers, inspecting variables, etc.</p>

<p>It‚Äôs also worth mentioning that to make use of a debugger we need to compile our code with debugging information (e.g. function locations). In general, such information is inserted by a compiler through the use of debugging symbols. An executable with debugging symbols can be executed as a regular binary, but it may be a slightly bigger size and run a bit slower due to disabled optimizations.</p>

<h2 id="platformio-unified-debugger">PlatformIO Unified Debugger</h2>

<p>Bringing up a debug configuration might be a daunting task. Developers need to get through complex UI windows just to configure a debugger before a debug session can be launched.</p>

<p>PlatformIO Unified Debugger is a user-friendly and extensible unified debugging environment with a set of advanced instruments, providing modern and powerful features to speed up, yet simplify, the creation and delivery of modern applications. A zero debugging configuration with support for the most popular debugging probes and compatibility between IDEs/OSes allowed to simplify the debugging process.</p>

<p>Developers can finally forget about complex UI windows which they need to pre-configure before a simple ‚ÄúHello World!‚Äù debug session. No need to know any aspects about the debugging server or how to configure it because PlatformIO Unified Debugger does all the heavy lifting behind the scenes.</p>

<h2 id="getting-started">Getting Started</h2>

<p>First, we need to install the <code class="language-plaintext highlighter-rouge">native</code> development platform. PlatformIO doesn‚Äôt install any toolchains automatically for the native dev-platform and uses the toolchain (preferably based on GCC) native for your OS (on Windows it‚Äôs recommended to install MinGW and make it available via the <code class="language-plaintext highlighter-rouge">PATH</code> variable). Let‚Äôs install the native dev-platform via PlatformIO Home:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-1.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-1.png" />
</a></p>

<p>For the sake of simplicity, let‚Äôs write a simple application that sorts an array of integers using the <a href="https://en.wikipedia.org/wiki/Quicksort">Quicksort</a> algorithm. Instead of creating our project from scratch, we can import a ‚ÄúHello World‚Äù example using the PlatformIO Home page:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-2.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-2.png" />
</a></p>

<p>Then simply replace the default code in <code class="language-plaintext highlighter-rouge">main.c</code> with the following code:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">xp</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">yp</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="o">*</span><span class="n">xp</span><span class="p">;</span>
    <span class="o">*</span><span class="n">xp</span> <span class="o">=</span> <span class="o">*</span><span class="n">yp</span><span class="p">;</span>
    <span class="o">*</span><span class="n">yp</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">sort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">first</span><span class="p">,</span> <span class="kt">int</span> <span class="n">last</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">last</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">first</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">last</span><span class="p">,</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">array</span><span class="p">[(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">];</span>
        <span class="k">do</span>
        <span class="p">{</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">middle</span><span class="p">)</span> <span class="n">left</span><span class="o">++</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">middle</span><span class="p">)</span> <span class="n">right</span><span class="o">--</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">array</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">array</span><span class="p">[</span><span class="n">right</span><span class="p">]);</span>
                <span class="n">left</span><span class="o">++</span><span class="p">;</span>
                <span class="n">right</span><span class="o">--</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">);</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">last</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">"Getting started with PlatformIO Unified Debugger!</span><span class="se">\r\n</span><span class="s">"</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">input_array</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">86</span> <span class="p">};</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">input_array</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">input_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">input_array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If we try to build the imported project, we should see the successful result:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-3.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-3.png" />
</a></p>

<p>Please note that the goal of this post is to focus on the debug workflow, so don‚Äôt rely on the code presented above in real projects.</p>

<h2 id="working-with-debugger">Working with Debugger</h2>

<p>Now we are ready to start debugging! To launch a new debug session we can use the following options:</p>

<ul>
  <li>Debug: Start debugging from the top menu</li>
  <li>Start Debugging option from the <code class="language-plaintext highlighter-rouge">Quick Access</code> menu</li>
  <li>Hotkey button <code class="language-plaintext highlighter-rouge">F5</code>:</li>
</ul>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-4.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-4.png" />
</a></p>

<p>Our program will start executing and then stop at the first breakpoint. Keep in mind that, by default, PlatformIO instructs the debugger to stop at the <code class="language-plaintext highlighter-rouge">main</code> function. Let‚Äôs take a closer look at our project using the debugger and its features.</p>

<h3 id="debug-view">Debug View</h3>

<p>When we start a debug session, the IDE switches to the ‚ÄúDebug View‚Äù with several panes which provide easy access to the debugger‚Äôs functionality:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-5.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-5.png" />
</a></p>

<p>Let‚Äôs look around and examine the most important elements.</p>

<h4 id="controlling-the-program-execution">Controlling the program execution</h4>

<p>The Debugger View provides complete control of the debugging process. You can access most of the essential control actions such as:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-6.png" alt="Debug Control Actions" />
  <figcaption class="figure-caption text-center">
    Control Actions
  </figcaption>
</figure>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Continue/Pause (F5)</code> runs the program until it locates a breakpoint and then stops.</li>
  <li><code class="language-plaintext highlighter-rouge">Step Over (F10)</code> executes the current statement and all functions that the statement calls and doesn‚Äôt suspend the execution until functions return.</li>
  <li><code class="language-plaintext highlighter-rouge">Step Into (F11)</code> advances the execution to the next statement. If the current statement is a function call, then the debugger steps into that function.</li>
  <li><code class="language-plaintext highlighter-rouge">Step Out (Shift+F11)</code> moves the execution out of the current function and back to the statement where the function was called.</li>
  <li><code class="language-plaintext highlighter-rouge">Restart (Ctrl+Shift+F5)</code> is a convenient shortcut for two operations: stopping the debug session and restarting the debugger.</li>
  <li><code class="language-plaintext highlighter-rouge">Stop (Shift+F5)</code> stops the debug session and terminates the program.</li>
</ul>

<h4 id="managing-breakpoints">Managing Breakpoints</h4>

<p>Breakpoints are one of the most important features of the debugging process. A breakpoint is a mechanism to suspend the execution of an application to inspect the state of variables with the ability to modify them to figure out why a problem is occurring. Usually, breakpoints are shown as red-filled circles in the editor margin.</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-7.png" alt="Breakpoints Window" />
  <figcaption class="figure-caption text-center">
    Breakpoints Window
  </figcaption>
</figure>

<p>We can toggle breakpoints directly in the editor pane by clicking on the left margin next to the current line or using the <code class="language-plaintext highlighter-rouge">F9</code> hotkey. A more precise configuration like group enabling, disabling, or setting breakpoint conditions can be done in the <code class="language-plaintext highlighter-rouge">Breakpoints</code> section. In the next posts in this series, we will take a deeper look at more advanced breakpoint configuration, including conditional and data breakpoints.</p>

<h4 id="call-stack">Call Stack</h4>

<p>Each time when the debugger pauses the execution (due to a breakpoint or during stepping), the sequence of function calls is displayed in the ‚ÄúCall Stack‚Äù window:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-8.png" alt="Call Stack Window" />
  <figcaption class="figure-caption text-center">
    Call Stack Window
  </figcaption>
</figure>

<p>The ‚ÄúCall Stack‚Äù window is useful when we need to examine the actual execution flow of an application. It shows the name of each called function, its address in memory, the file name and the line number where the function is defined. We can jump between stack frames and the debugger will automatically update the variables and registers. A green line will show where the execution pointer is currently located according to the selected stack frame.</p>

<h4 id="working-with-variables">Working with Variables</h4>

<p>The examination of variables is one of the essential steps for understanding why an application operates incorrectly. When the debugger is suspended, the ‚ÄúVariables‚Äù window allows us to inspect and modify the variables available in the context where an application is paused:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-9.png" alt="Variables Window" />
  <figcaption class="figure-caption text-center">
    Variables Window
  </figcaption>
</figure>

<p>If we double-click the value for a variable, we can edit its value. It may be useful when there is a need to verify how an application would work in a certain condition at runtime.</p>

<h4 id="watch-expressions">Watch Expressions</h4>

<p>The Watch window allows us to specify a variable (or an expression) that will be reevaluated and displayed every time the debugger stops:</p>

<figure class="figure mb-4" align="center">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-10.png" alt="Watch Window" />
  <figcaption class="figure-caption text-center">
    Watch Window
  </figcaption>
</figure>

<p>To add a new watch expression click the <code class="language-plaintext highlighter-rouge">+</code> button in the top right corner of the panel, type the expression into the text field, and press Enter to save it. The expression will be evaluated each time when the code hits a breakpoint or when we step through the code. Unlike the frame-specific ‚ÄúVariables‚Äù window, the ‚ÄúWatch‚Äù window always shows the variables that we‚Äôve added.</p>

<h2 id="conclusion">Conclusion</h2>

<p>All developers make mistakes, and as a result, bugs show up. Learning how to debug effectively takes time, but in the long run, it can make the development process less stressful when an unexpected side effect happens. A debugger in any programming language is an essential instrument for tracking down problems in code, especially in a large and complex codebase.</p>

<p>In this post, we only scratched the surface of capabilities available in PlatformIO Unified Debugger. There is a lot of useful functionality we didn‚Äôt cover in this post which can greatly help us in real projects. The <a href="/blog/insights/debugging-embedded.html">next post</a> will be more embedded-specific, we‚Äôll look at some more advanced features, such as peripheral and disassembly views, advanced breakpoints, and much more!</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><category term="featured" /><summary type="html"><![CDATA[Debugging is an inseparable part of the development process. The first part provides a brief introduction to the debugging concept and covers the basics of debugging process used in the PlatformIO IDE for VSCode.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-09-20-debugging-introduction/title.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-09-20-debugging-introduction/title.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Core 5.2 üöÄ</title><link href="https://piolabs.com/blog/news/platformio-core-5-2-released.html" rel="alternate" type="text/html" title="PlatformIO Core 5.2 üöÄ" /><published>2021-09-13T00:00:00+03:00</published><updated>2021-09-13T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-core-5-2-released</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-core-5-2-released.html"><![CDATA[<p>We are happy to announce the next release of PlatformIO Core with the boosted PlatformIO Debugging performance, support for the latest SCons 4.2, improved package management system, and many other minor fixes and improvements.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-released.png" alt="PlatformIO Core 5.2 üöÄ" /></p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#what-is-new" id="markdown-toc-what-is-new">What is New</a>    <ul>
      <li><a href="#debugging" id="markdown-toc-debugging">Debugging</a>        <ul>
          <li><a href="#boosted-performance" id="markdown-toc-boosted-performance">Boosted Performance</a></li>
          <li><a href="#unit-tests-debugging" id="markdown-toc-unit-tests-debugging">Unit Tests Debugging</a></li>
          <li><a href="#debugger-for-native-platform" id="markdown-toc-debugger-for-native-platform">Debugger for Native Platform</a></li>
          <li><a href="#debugging-in-cli-mode-on-windows" id="markdown-toc-debugging-in-cli-mode-on-windows">Debugging in CLI Mode on Windows</a></li>
        </ul>
      </li>
      <li><a href="#build-system" id="markdown-toc-build-system">Build System</a>        <ul>
          <li><a href="#scons-42" id="markdown-toc-scons-42">SCons 4.2</a></li>
        </ul>
      </li>
      <li><a href="#package-management" id="markdown-toc-package-management">Package Management</a></li>
      <li><a href="#static-code-analysis" id="markdown-toc-static-code-analysis">Static Code Analysis</a></li>
    </ul>
  </li>
  <li><a href="#upgrade" id="markdown-toc-upgrade">Upgrade</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="what-is-new">What is New</h2>

<p>In this section, we are going to highlight the most important changes and features introduced in PlatformIO Core 5.2.
Please visit <a href="https://github.com/platformio/platformio-core/releases/tag/v5.2.0" target="_blank">PlatformIO 5.2.0 Release Notes</a> for more detailed information.</p>

<h3 id="debugging">Debugging</h3>

<p>In our ongoing effort to improve the debugging experience in PlatformIO, we‚Äôve managed to prepare several great new features and enhancements that will help developers debug their projects in a much faster and effective way.</p>

<h4 id="boosted-performance">Boosted Performance</h4>

<p>PlatformIO Core 5.2 brings significantly boosted debugging performance by migrating the codebase to the pure Python 3 Asynchronous I/O stack. This approach solves previous issues caused by the Twisted engine that depends on operating system libraries and 3rd-party Python packages. Thanks to these improvements, developers can get a blazingly fast and responsive debugging experience even in CLI mode!</p>

<!-- Youtube video -->
<p><a data-bigpicture="{&quot;ytSrc&quot;: &quot;NngpaA2klAY&quot;}" href="#">
  <img src="/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-debug-demo-cover.jpg" class="img-fluid" alt="PlatformIO Core 5.2 üöÄ" />
</a></p>

<h4 id="unit-tests-debugging">Unit Tests Debugging</h4>

<p>It‚Äôs an incredibly frustrating situation when a test fails for no obvious reason. Printing variables to the console while trying to find where your test is misbehaving can take a significant amount of time and patience. On the other hand, a full-featured debug session with the ability to step through the code of your unit tests can give all the necessary information to hunt down and isolate bugs in your codebase. PlatformIO Core 5.2 makes debugging tests incredibly easy simply by adding a <a href="https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-test">single line</a> your configuration file:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[env:debug_unit_tests]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">ststm32</span>
<span class="py">framework</span> <span class="p">=</span> <span class="s">arduino</span>
<span class="py">board</span> <span class="p">=</span> <span class="s">nucleo_f401re</span>
<span class="c">; Use a test file located in the test directory as the entry point
</span><span class="py">debug_test</span> <span class="p">=</span> <span class="s">*</span>
</code></pre></div></div>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-unit-tests.gif&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-13-platformio-core-5-2-released/debug-unit-tests.gif" />
</a></p>

<h4 id="debugger-for-native-platform">Debugger for Native Platform</h4>

<p>Even though PlatformIO was created to help develop embedded projects, it‚Äôs always handy to be able to run and debug projects locally without the need to upload the code to an embedded target. Starting with PlatformIO Core 5.2, embedded developers can debug their applications on host machines using the same usual workflow.</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-native.gif&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-13-platformio-core-5-2-released/debug-native.gif" />
</a></p>

<h4 id="debugging-in-cli-mode-on-windows">Debugging in CLI Mode on Windows</h4>

<p>Another commonly requested feature implemented in PlatformIO Core 5.2 is debugging projects on Windows OS via the command-line interface. Although the CLI might not be as user-friendly as a feature-rich IDE, it‚Äôs still a great instrument to quickly and efficiently find bugs in your codebase.</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-windows-cli.gif&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-13-platformio-core-5-2-released/debug-windows-cli.gif" />
</a></p>

<h3 id="build-system">Build System</h3>

<h4 id="scons-42">SCons 4.2</h4>

<p>The PlatformIO Core 5.2 build engine has been upgraded to the latest <a href="https://scons.org/" target="_blank">SCons 4.2 - a next-generation software construction tool</a>:</p>

<ul>
  <li><a href="https://docs.platformio.org/page/projectconf/advanced_scripting.html">Configuration files are Python scripts</a> ‚Äì use the power of a real programming language to solve build problems</li>
  <li>Built-in reliable and automatic dependency analysis</li>
</ul>

<h3 id="package-management">Package Management</h3>

<p>PlatformIO Core 5.2 introduces the updated package management system with a more error-proof and intuitive package publishing process. Now, any package manifest is validated on the client side and its metadata is shown in a readable format before publishing it to the PlatformIO Trusted Registry.</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2021-09-13-platformio-core-5-2-released/package-management-updates.gif&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2021-09-13-platformio-core-5-2-released/package-management-updates.gif" />
</a></p>

<p>Improved checks for conflicting names and duplicates will catch accidental errors and typos in package manifests and won‚Äôt allow developers to publish erroneous packages to the PlatformIO Trusted Registry.</p>

<p>Additionally, a new CLI option <code class="language-plaintext highlighter-rouge">--non-interactive</code> might come in handy for automated uploads directly from CI/CD services in your deployment pipeline.</p>

<h3 id="static-code-analysis">Static Code Analysis</h3>

<p>We‚Äôve updated backend static analysis tools to the latest available versions. Now developers can identify even more potential bugs, vulnerabilities and security threats.</p>

<ul>
  <li><a href="https://docs.platformio.org/page/plus/check-tools/clang-tidy.html">Clang-Tidy</a> v12.0.1 with new modules and extended checks list</li>
  <li><a href="https://docs.platformio.org/page/plus/check-tools/cppcheck.html">Cppcheck</a> v2.5.0 with improved code analysis and MISRA improvements</li>
  <li><a href="https://docs.platformio.org/page/plus/check-tools/pvs-studio.html">PVS-Studio</a> v7.14 with support for intermodular analysis, improved MISRA support and new diagnostics</li>
</ul>

<h2 id="upgrade">Upgrade</h2>

<ul>
  <li><strong>PlatformIO IDE</strong>: Left Sidebar &gt; PlatformIO (icon) &gt; Quick Access &gt; Upgrade PlatformIO Core</li>
  <li><strong>Terminal</strong>: Please run <code class="language-plaintext highlighter-rouge">pio upgrade</code> command in terminal.</li>
</ul>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><category term="featured" /><summary type="html"><![CDATA[PlatformIO Core 5.2 is out with boosted PlatformIO Debugging performance, support for SCons 4.2, and improved package management system]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-released.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-released.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>