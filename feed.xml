<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://piolabs.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://piolabs.com/" rel="alternate" type="text/html" /><updated>2023-04-17T13:28:19+03:00</updated><id>https://piolabs.com/feed.xml</id><title type="html">PlatformIO Labs</title><subtitle>A proven technology used by global innovators and by millions of embedded developers around the world.</subtitle><author><name>PlatformIO Labs</name><email>contact@piolabs.com</email></author><entry><title type="html">Getting Started with Code Coverage in PlatformIO: A Beginner’s Guide to Writing Effective Tests</title><link href="https://piolabs.com/blog/insights/test-coverage-on-unit-testing.html" rel="alternate" type="text/html" title="Getting Started with Code Coverage in PlatformIO: A Beginner’s Guide to Writing Effective Tests" /><published>2023-04-17T00:00:00+03:00</published><updated>2023-04-17T00:00:00+03:00</updated><id>https://piolabs.com/blog/insights/test-coverage-on-unit-testing</id><content type="html" xml:base="https://piolabs.com/blog/insights/test-coverage-on-unit-testing.html"><![CDATA[<p>In the world of software development, it’s essential to ensure that the code being written is not only functional but also maintainable and easily testable. One way to measure the effectiveness of testing is to analyze the code coverage to identify areas of the code that are not adequately tested. In this article, we’ll delve into the concept of source code coverage analysis, its importance, and some tools available for performing the analysis.</p>

<!-- more -->

<p>One of the crucial components of proper code coverage analysis is testing, and having a comprehensive test suite is essential to achieving high code coverage. Testing is well supported in PlatformIO and I only refer to the <a href="https://docs.platformio.org/en/latest/advanced/unit-testing/index.html">PlatformIO Unit Testing documentation</a> and to some getting started blog-posts <a href="/blog/insights/unit-testing-part-1.html">Unit Testing with PlatformIO: Part 1. The Basics</a>. If you have never done unit testing, get this working first, then come back for the code coverage.</p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#prerequisites" id="markdown-toc-prerequisites">Prerequisites</a></li>
  <li><a href="#what-is-code-coverage" id="markdown-toc-what-is-code-coverage">What is Code Coverage?</a></li>
  <li><a href="#preparing-demo-project" id="markdown-toc-preparing-demo-project">Preparing Demo Project</a></li>
  <li><a href="#preparing-code-coverage-data-files" id="markdown-toc-preparing-code-coverage-data-files">Preparing Code Coverage Data Files</a></li>
  <li><a href="#visualizing-results" id="markdown-toc-visualizing-results">Visualizing Results</a></li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>This article uses the following components:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">VSCode with installed PlatformIO IDE extension</a></li>
  <li><a href="https://registry.platformio.org/platforms/platformio/native">Native dev-platform</a></li>
</ul>

<div class="alert alert-secondary" role="alert">
  Note: PlatformIO does not automatically install any toolchains for the "native" dev-platform. Instead, it uses the toolchain native to your OS, preferably based on GCC. If you are using Windows, it is recommended that you install MinGW and make it available via the <b>PATH</b> variable. Additionally, the code coverage extension used in this article requires Gcov ≥ 9, so please ensure that your system has an updated toolchain.
</div>

<h2 id="what-is-code-coverage">What is Code Coverage?</h2>

<p>Code coverage analysis provides developers with valuable insights into how thoroughly their tests are exercising the code, highlighting areas that may need additional testing to increase the overall quality of your code.</p>

<p>There are various types of code coverage analysis, including statement coverage, branch coverage, and path coverage. Statement coverage measures how many statements in the code have been executed during testing, while branch coverage measures how many branches in the code have been executed. Path coverage is the most comprehensive form of code coverage analysis, measuring how many unique paths through the code have been executed during testing.</p>

<h2 id="preparing-demo-project">Preparing Demo Project</h2>

<p>For the demo, I am going to take a small and simple piece of code, so you won’t waste your time trying to understand the code. The complete project used in this article is available on Github <a href="https://github.com/Strooom/demoTestCoverage">Strooom/demoTestCoverage: How to do test coverage on PlatformIO</a>.
You can import it directly from the VSCode Welcome Page:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-04-17-test-coverage-on-unit-testing/image1.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-04-17-test-coverage-on-unit-testing/image1.png" />
</a></p>

<p>Let’s take a closer look at the <code class="language-plaintext highlighter-rouge">lib/key</code> module that we’ll be testing in this post:</p>

<p>The functionality of the module is described in the <code class="language-plaintext highlighter-rouge">key.h</code> header file:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma once
#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span>
<span class="k">class</span> <span class="nc">key</span> <span class="p">{</span>
  <span class="nl">public:</span>
    <span class="k">static</span> <span class="kt">uint8_t</span> <span class="n">toUpperCase</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="n">aCharacter</span><span class="p">);</span>            <span class="c1">// convert a character to upper case</span>
    <span class="k">static</span> <span class="kt">bool</span> <span class="n">isHexCharacter</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="n">aCharacter</span><span class="p">);</span>            <span class="c1">// check if a character is a valid hex character, ie. 0-9 or A-F - assuming upper case</span>
    <span class="k">static</span> <span class="kt">uint8_t</span> <span class="n">valueFromHexCharacter</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="n">aCharacter</span><span class="p">);</span>  <span class="c1">// convert a hex character to a value, ie. 'A' -&gt; 10</span>
    <span class="k">static</span> <span class="kt">uint8_t</span> <span class="n">hexCharacterFromValue</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="n">aValue</span><span class="p">);</span>      <span class="c1">// convert a value to a hex character, ie. 10 -&gt; 'A'</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The implementation is located in the accompanying <code class="language-plaintext highlighter-rouge">key.cpp</code>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"key.h"</span><span class="cp">
</span>
<span class="kt">uint8_t</span> <span class="n">key</span><span class="o">::</span><span class="n">toUpperCase</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="n">aCharacter</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">aCharacter</span> <span class="o">&gt;=</span> <span class="sc">'a'</span> <span class="o">&amp;&amp;</span> <span class="n">aCharacter</span> <span class="o">&lt;=</span> <span class="sc">'z'</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">aCharacter</span> <span class="o">=</span> <span class="n">aCharacter</span> <span class="o">-</span> <span class="sc">'a'</span> <span class="o">+</span> <span class="sc">'A'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">aCharacter</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">key</span><span class="o">::</span><span class="n">isHexCharacter</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="n">aCharacter</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">((</span><span class="n">aCharacter</span> <span class="o">&gt;=</span> <span class="sc">'A'</span> <span class="o">&amp;&amp;</span> <span class="n">aCharacter</span> <span class="o">&lt;=</span> <span class="sc">'F'</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">aCharacter</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">aCharacter</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">uint8_t</span> <span class="n">key</span><span class="o">::</span><span class="n">valueFromHexCharacter</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="n">aCharacter</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">aCharacter</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">aCharacter</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">aCharacter</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">aCharacter</span> <span class="o">&gt;=</span> <span class="sc">'A'</span> <span class="o">&amp;&amp;</span> <span class="n">aCharacter</span> <span class="o">&lt;=</span> <span class="sc">'F'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">aCharacter</span> <span class="o">-</span> <span class="sc">'A'</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>        <span class="c1">// in case the character is not a hex character, return 0 as value</span>
<span class="p">}</span>

<span class="kt">uint8_t</span> <span class="n">key</span><span class="o">::</span><span class="n">hexCharacterFromValue</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="n">aValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">aValue</span> <span class="o">&lt;=</span> <span class="mi">9</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">aValue</span> <span class="o">+</span> <span class="sc">'0'</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">aValue</span> <span class="o">&lt;=</span> <span class="mi">15</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">aValue</span> <span class="o">-</span> <span class="mi">10</span> <span class="o">+</span> <span class="sc">'A'</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span>
        <span class="k">return</span> <span class="sc">'?'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To test these 4 member functions, I have created a test application using Unity as the unit testing framework. You can find the test application at test/test_key/test.cpp.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;unity.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"key.h"</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">setUp</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{}</span>           <span class="c1">// before test</span>
<span class="kt">void</span> <span class="n">tearDown</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{}</span>        <span class="c1">// after test</span>

<span class="kt">void</span> <span class="n">test_toUpperCase</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'A'</span><span class="p">),</span> <span class="n">key</span><span class="o">::</span><span class="n">toUpperCase</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'a'</span><span class="p">)));</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'A'</span><span class="p">),</span> <span class="n">key</span><span class="o">::</span><span class="n">toUpperCase</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'A'</span><span class="p">)));</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'0'</span><span class="p">),</span> <span class="n">key</span><span class="o">::</span><span class="n">toUpperCase</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'0'</span><span class="p">)));</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">test_isHexCharacter</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">TEST_ASSERT_TRUE</span><span class="p">(</span><span class="n">key</span><span class="o">::</span><span class="n">isHexCharacter</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'0'</span><span class="p">)));</span>
    <span class="n">TEST_ASSERT_TRUE</span><span class="p">(</span><span class="n">key</span><span class="o">::</span><span class="n">isHexCharacter</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'9'</span><span class="p">)));</span>
    <span class="n">TEST_ASSERT_TRUE</span><span class="p">(</span><span class="n">key</span><span class="o">::</span><span class="n">isHexCharacter</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'A'</span><span class="p">)));</span>
    <span class="n">TEST_ASSERT_TRUE</span><span class="p">(</span><span class="n">key</span><span class="o">::</span><span class="n">isHexCharacter</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'F'</span><span class="p">)));</span>
    <span class="n">TEST_ASSERT_FALSE</span><span class="p">(</span><span class="n">key</span><span class="o">::</span><span class="n">isHexCharacter</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'-'</span><span class="p">)));</span>
    <span class="n">TEST_ASSERT_FALSE</span><span class="p">(</span><span class="n">key</span><span class="o">::</span><span class="n">isHexCharacter</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'O'</span><span class="p">)));</span>
    <span class="n">TEST_ASSERT_FALSE</span><span class="p">(</span><span class="n">key</span><span class="o">::</span><span class="n">isHexCharacter</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'a'</span><span class="p">)));</span>        <span class="c1">// we assume uppercase, so lowercase should fail...</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">test_valueFromHexCharacter</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="mi">0U</span><span class="p">,</span> <span class="n">key</span><span class="o">::</span><span class="n">valueFromHexCharacter</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'0'</span><span class="p">)));</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="mi">9U</span><span class="p">,</span> <span class="n">key</span><span class="o">::</span><span class="n">valueFromHexCharacter</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'9'</span><span class="p">)));</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="mi">10U</span><span class="p">,</span> <span class="n">key</span><span class="o">::</span><span class="n">valueFromHexCharacter</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'A'</span><span class="p">)));</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="mi">15U</span><span class="p">,</span> <span class="n">key</span><span class="o">::</span><span class="n">valueFromHexCharacter</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'F'</span><span class="p">)));</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">test_hexCharacterFromValue</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'0'</span><span class="p">),</span> <span class="n">key</span><span class="o">::</span><span class="n">hexCharacterFromValue</span><span class="p">(</span><span class="mi">0U</span><span class="p">));</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'9'</span><span class="p">),</span> <span class="n">key</span><span class="o">::</span><span class="n">hexCharacterFromValue</span><span class="p">(</span><span class="mi">9U</span><span class="p">));</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'A'</span><span class="p">),</span> <span class="n">key</span><span class="o">::</span><span class="n">hexCharacterFromValue</span><span class="p">(</span><span class="mi">10U</span><span class="p">));</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'F'</span><span class="p">),</span> <span class="n">key</span><span class="o">::</span><span class="n">hexCharacterFromValue</span><span class="p">(</span><span class="mi">15U</span><span class="p">));</span>
    <span class="n">TEST_ASSERT_EQUAL_UINT8</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="sc">'?'</span><span class="p">),</span> <span class="n">key</span><span class="o">::</span><span class="n">hexCharacterFromValue</span><span class="p">(</span><span class="mi">16U</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">UNITY_BEGIN</span><span class="p">();</span>
    <span class="n">RUN_TEST</span><span class="p">(</span><span class="n">test_toUpperCase</span><span class="p">);</span>
    <span class="n">RUN_TEST</span><span class="p">(</span><span class="n">test_isHexCharacter</span><span class="p">);</span>
    <span class="n">RUN_TEST</span><span class="p">(</span><span class="n">test_valueFromHexCharacter</span><span class="p">);</span>
    <span class="c1">// RUN_TEST(test_hexCharacterFromValue);</span>
    <span class="n">UNITY_END</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="alert alert-secondary" role="alert">
  Note that PlatformIO makes certain assumptions about the location of test files. For instance, it assumes that each test should be in a subdirectory with a name starting with the <b>"test_"</b> prefix.
</div>

<p>So now we can run the tests. There are two ways to do this: using the PlatformIO test icon in the bottom status bar or via the <strong>Test Explorer</strong> view:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-04-17-test-coverage-on-unit-testing/image2.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-04-17-test-coverage-on-unit-testing/image2.png" />
</a></p>

<p>After processing, we should see a detailed report about the successful testing results:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-04-17-test-coverage-on-unit-testing/image3.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-04-17-test-coverage-on-unit-testing/image3.png" />
</a></p>

<h2 id="preparing-code-coverage-data-files">Preparing Code Coverage Data Files</h2>

<p>Our tests are now running, and we can see which ones pass and which ones fail. Next, let’s take a closer look at the specific parts of the code being tested. To do so, we need to configure the compiler to generate some additional information. This allows us to track which statements are executed while running the code.</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[env:generic]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">native</span>
<span class="py">build_flags</span> <span class="p">=</span>
    <span class="err">-D</span> <span class="err">unitTesting</span>
    <span class="err">-lgcov</span>
    <span class="err">--coverage</span>
    <span class="err">-fprofile-abs-path</span>
</code></pre></div></div>

<p>Note the 3 extra build flags: <code class="language-plaintext highlighter-rouge">-lgcov, --coverage, -fprofile-abs-path</code>. With these flags, the compiler creates extra files (<code class="language-plaintext highlighter-rouge">.gcda</code>, <code class="language-plaintext highlighter-rouge">.gcdo</code>) to track code execution. You can find them in the <code class="language-plaintext highlighter-rouge">.pio/build/generic</code> folder:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-04-17-test-coverage-on-unit-testing/image4.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-04-17-test-coverage-on-unit-testing/image4.png" />
</a></p>

<p>These files will be used to visualize what parts of the code were executed.</p>

<h2 id="visualizing-results">Visualizing Results</h2>

<p>The only thing missing is a nice visualization of the results. Luckily, for this there is a good VSCode extension called <a href="https://marketplace.visualstudio.com/items?itemName=JacquesLucke.gcov-viewer">Gcov Viewer</a>.</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-04-17-test-coverage-on-unit-testing/image5.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-04-17-test-coverage-on-unit-testing/image5.png" />
</a></p>

<p>This extension is controlled via the Command Palette, which is a minor burden but you’ll get used to it quickly.
<code class="language-plaintext highlighter-rouge">ctrl/cmd-shift-p</code> and type “Gcov”, this will show you all the Gcov commands. The 3 most important are <strong>Show</strong>, <strong>Hide</strong> and <strong>Reset</strong> and they will settle themselves on top with your “recently used” commands:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-04-17-test-coverage-on-unit-testing/image6.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-04-17-test-coverage-on-unit-testing/image6.png" />
</a></p>

<p>Select <strong>“Gcov Show”</strong> and it will create an overlay on your source code files, showing which lines have been executed and which not.
If you want the non-executed lines to show in red, you need to activate a setting of the Gcov extension <em>“Highlight Missed Lines”</em>. I prefer this, as this way it is more obvious which lines are missed. Several lines of your source code do not translate to executable code and those lines just remain uncolored.</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-04-17-test-coverage-on-unit-testing/image7.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-04-17-test-coverage-on-unit-testing/image7.png" />
</a></p>

<p>Note how each line has a color and a number of how many times it has been executed. However, our test misses the edge case where valueFromHexCharacter receives an invalid input, so we need to fix that.</p>

<p>We saw that GCC creates a coverage file for each “.cpp” file in our project. This means that also our test application itself is tracked.
Look how one of the tests is not being run, because I commented it out in the test-runner main().</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-04-17-test-coverage-on-unit-testing/image8.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-04-17-test-coverage-on-unit-testing/image8.png" />
</a></p>

<p>When you improve your tests and rerun them, the results will continue to be added to the .gcno and .gcda files that are already present. However, at some point, you may want to reset your results and start over. To do so, you can use the “Gcov Reset” command.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Code coverage analysis is an essential aspect of software development that provides insight into the effectiveness of testing and identifies areas of the code that may need further attention. By using best practices in testing and code coverage analysis, software developers can produce high-quality code that is reliable, maintainable, and robust.</p>]]></content><author><name>Pascal Roobrouck</name></author><category term="blog" /><category term="insights" /><summary type="html"><![CDATA[An introduction to the concept of code coverage analysis in the PlatformIO ecosystem]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2023-04-17-test-coverage-on-unit-testing/image7.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2023-04-17-test-coverage-on-unit-testing/image7.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source March Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-march-2023-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source March Updates" /><published>2023-04-03T00:00:00+03:00</published><updated>2023-04-03T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-march-2023-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-march-2023-updates.html"><![CDATA[<p>Welcome to the March 2023 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-march-news.jpg" alt="PlatformIO Open Source March Updates" /></p>

<p>During March, we rolled out an updated version of PlatformIO IDE for Visual Studio Code, added support for the latest Arduino ESP32 core v2.0.7 and ESP-IDF, fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-ide-31-for-visual-studio-code" id="markdown-toc-platformio-ide-31-for-visual-studio-code">PlatformIO IDE 3.1 for Visual Studio Code</a></li>
  <li><a href="#espressif32-dev-platform-v61" id="markdown-toc-espressif32-dev-platform-v61">Espressif32 dev-platform v6.1</a></li>
  <li><a href="#espressif-8266-v42" id="markdown-toc-espressif-8266-v42">Espressif 8266 v4.2</a></li>
  <li><a href="#atmel-megaavr-dev-platform-v18" id="markdown-toc-atmel-megaavr-dev-platform-v18">Atmel megaAVR dev-platform v1.8</a></li>
  <li><a href="#arduino-core-for-mbed-enabled-devices-v40" id="markdown-toc-arduino-core-for-mbed-enabled-devices-v40">Arduino Core for mbed-enabled devices v4.0</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="platformio-ide-31-for-visual-studio-code">PlatformIO IDE 3.1 for Visual Studio Code</h2>

<p>We are pleased to announce a new stable release of PlatformIO IDE 3.1 for <a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">Visual Studio Code</a> that brings new functionality and several bugfixes:</p>

<ul>
  <li>Add support for the <code class="language-plaintext highlighter-rouge">${command:platformio-ide.activeEnvironment}</code> variable that can be used in a custom PlatformIO Toolbar and VSCode variable substitution (issue #3588)</li>
  <li>Added a new <code class="language-plaintext highlighter-rouge">platformio-ide.uploadAndMonitor</code> command which can be used with the custom PlatformIO Toolbar</li>
  <li>Restored support for macOS Touch Bar (issue #3659)</li>
  <li>Focus on the project configuration output tab only on error (issue #3535)</li>
  <li>Fixed an issue with a task runner on Windows 7 (issue #3481)</li>
  <li>Fixed “Select All”, “Undo”, and “Redo” operations on macOS for PIO Home (pull #3451)</li>
  <li>Fixed an issue when the “Upload &amp; Monitor” task selects the wrong environment (issue #2623)</li>
  <li>Fixed a regression bug that caused notifications about a task being “already active” when running the same “device monitor” (issue #3656)</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-vscode-ide/releases/tag/v3.1.0">Release Notes</a> for more detailed information.</p>

<h2 id="espressif32-dev-platform-v61">Espressif32 dev-platform v6.1</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/espressif32">Espressif 32</a> dev-platform brings support for the latest Arduino Core and ESP-IDF, new boards and dev-kits, several minor fixes and improvements:</p>

<ul>
  <li>Added new boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_feather_esp32s2_reversetft.html">Adafruit Feather ESP32-S2 Reverse TFT</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_feather_esp32s3_reversetft.html">Adafruit Feather ESP32-S3 Reverse TFT</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/dfrobot_firebeetle2_esp32e.html">DFRobot Firebeetle 2 ESP32-E</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/edgebox-esp-100.html">Seeed Studio Edgebox-ESP-100</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/heltec_wifi_kit_32_V3.html">Heltec WiFi Kit 32 (V3)</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/heltec_wifi_lora_32_V3.html">Heltec WiFi LoRa 32 (V3)</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/lilygo-t-display-s3.html">LilyGo T-Display-S3</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/m5stack-atoms3.html">M5Stack AtomS3</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/roboheart_hercules.html">RoboHeart Hercules</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/valtrack_v4_mfw_esp32_c3.html">Valetron Systems VALTRACK-V4MVF</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/valtrack_v4_vts_esp32_c3.html">Valetron Systems VALTRACK-V4VTS</a></li>
    </ul>
  </li>
  <li>Added support for Arduino v2.0.7 (<a href="https://github.com/espressif/arduino-esp32/releases/tag/2.0.7">release notes</a>)</li>
  <li>Updated ESP-IDF to v5.0.1 (<a href="https://github.com/espressif/esp-idf/releases/tag/v5.0.1">release notes</a>)</li>
  <li>Updated esptoolpy to v4.5.0 (<a href="https://github.com/espressif/esptool/releases/tag/v4.5">release notes</a>)</li>
  <li>OS variables in <code class="language-plaintext highlighter-rouge">build.esp-idf.sdkconfig_path</code> are now expanded (<a href="https://github.com/platformio/platform-espressif32/issues/995">#995</a>)</li>
  <li>Added new HWIDs for the <code class="language-plaintext highlighter-rouge">seeed_xiao_esp32c3</code> board
Minor fixes and improvements (<a href="https://github.com/platformio/platform-espressif32/issues/1025">#1025</a>, <a href="https://github.com/platformio/platform-espressif32/issues/1048">#1048</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-espressif32/releases/tag/v6.1.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="espressif-8266-v42">Espressif 8266 v4.2</h2>

<p>The latest revision of the <a href="https://registry.platformio.org/platforms/platformio/espressif8266">Espressif 8266</a> dev-platform brings support for the latest Arduino core and some minor improvements:</p>

<ul>
  <li>Updated Arduino Core to the latest <code class="language-plaintext highlighter-rouge">v3.1.2</code> (<a href="https://github.com/esp8266/Arduino/releases/tag/3.1.2">release notes</a>)</li>
  <li>Minor fixes and improvements (<a href="https://github.com/platformio/platform-espressif8266/issues/266">#266</a>, <a href="https://github.com/platformio/platform-espressif8266/issues/289">#289</a>)</li>
</ul>

<p><strong>Related resources for the Espressif 8266 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif8266.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif8266/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="atmel-megaavr-dev-platform-v18">Atmel megaAVR dev-platform v1.8</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/atmelmegaavr">Atmel megaAVR</a> v1.8.0 comes with updated DxCore and several improvements:</p>

<ul>
  <li>Updated DxCore to the latest <code class="language-plaintext highlighter-rouge">v1.5.6</code> (<a href="https://github.com/SpenceKonde/DxCore/releases/tag/1.5.6">release notes</a>)</li>
  <li>Initial support for bootloader programing using DxCore (<a href="https://github.com/platformio/platform-atmelmegaavr/issues/48">#48</a>)</li>
  <li>Fixed an issue with incorrect configuration of the AVRDude package (<a href="https://github.com/platformio/platform-atmelmegaavr/issues/56">#56</a>)</li>
</ul>

<p><strong>Related resources for the Atmel megaAVR dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arduino-core-for-mbed-enabled-devices-v40">Arduino Core for mbed-enabled devices v4.0</h2>

<p>The <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a>, <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> and <a href="https://registry.platformio.org/platforms/platformio/raspberrypi">Raspberry Pi RP2040</a> dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v4.0.2. According to the release notes, v4.0.2 brings new boards, a lot of bugfixes and improvements in core and accompanying libraries.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[Improved PlatformIO IDE for Microsoft VSCode, New boards and dev-kits, Support for the latest ESP-IDF v5.0.1, Updated Arduino Cores for Espressif dev-platforms, Microchip megaAVR and Mbed-enabled devices]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-march-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-march-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source February Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-february-2023-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source February Updates" /><published>2023-03-02T00:00:00+02:00</published><updated>2023-03-02T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-february-2023-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-february-2023-updates.html"><![CDATA[<p>Welcome to the February 2023 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.</p>

<p>This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-february-news.jpg" alt="PlatformIO Open Source February Updates" /></p>

<p>During February, we published a major release of PlatformIO IDE for VSCode, rolled out updates for the ST STM32 and Microchip AVR/megaAVR development platforms, resolved a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-ide-30-for-visual-studio-code" id="markdown-toc-platformio-ide-30-for-visual-studio-code">PlatformIO IDE 3.0 for Visual Studio Code</a></li>
  <li><a href="#st-stm32-v155" id="markdown-toc-st-stm32-v155">ST STM32 v15.5</a></li>
  <li><a href="#microchip-avr-dev-platform-v41" id="markdown-toc-microchip-avr-dev-platform-v41">Microchip AVR dev-platform v4.1</a></li>
  <li><a href="#microchip-megaavr-dev-platform-v17" id="markdown-toc-microchip-megaavr-dev-platform-v17">Microchip megaAVR dev-platform v1.7</a></li>
  <li><a href="#arduino-core-for-mbed-enabled-devices-v354" id="markdown-toc-arduino-core-for-mbed-enabled-devices-v354">Arduino Core for mbed-enabled devices v3.5.4</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="platformio-ide-30-for-visual-studio-code">PlatformIO IDE 3.0 for Visual Studio Code</h2>

<p>We are pleased to announce a stable release of PlatformIO IDE 3.0 for <a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">Visual Studio Code</a> with significant improvements to boost developer effectiveness. The major enhancements include the following:</p>

<ul>
  <li>New streamlined onboarding with comprehensive walkthroughs</li>
  <li>Renovated project management with intellisense for project configuration files</li>
  <li>Native integration of the PlatformIO Unit Testing solution and VSCode Testing UI.</li>
</ul>

<p>Take a look at <a href="https://community.platformio.org/t/platformio-ide-3-0-preview-for-vscode-we-want-your-feedback">the detailed overview</a> of the new features and improvements on the community forum.</p>

<h2 id="st-stm32-v155">ST STM32 v15.5</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a> v15.5.0 comes with new boards, updated Arduino cores and several minor improvements</p>

<ul>
  <li>New boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/opta.html">Arduino Opta</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/acsip_s76s.html">AcSIP S76S</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/agafia_sg0.html">Sigma IC AGAFIA SG0</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/btt_ebb42_v1_1.html">Big Tree Tech EBB42 V1.1</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_g070rb.html">Nucleo G070RB</a></li>
    </ul>
  </li>
  <li>Updated Arduino core to v2.4.0 (<a href="https://github.com/stm32duino/Arduino_Core_STM32/releases/tag/2.4.0">release notes</a>)</li>
  <li>Updated Arduino-mbed core to v3.5.4 (<a href="https://github.com/arduino/ArduinoCore-mbed/releases/tag/3.5.4">release notes</a>)</li>
  <li>Minor fixes and improvements</li>
</ul>

<h2 id="microchip-avr-dev-platform-v41">Microchip AVR dev-platform v4.1</h2>

<p>The latest release of the <a href="https://registry.platformio.org/platforms/platformio/atmelavr">Microchip AVR</a> v4.1.0 brings support for the ATmegaxx5/xx50 and ATmegaxx9/xx90 chip families and updates for highly customizable Arduino cores by MCUdude:</p>

<ul>
  <li>Add support for ATmegaxx5/xx50 and ATmegaxx9/xx90 chip families (#287):
<a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega165.html">ATmega165</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega165P.html">ATmega165P</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega169A.html">ATmega169A</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega169P.html">ATmega169P</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega325.html">ATmega325</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega3250.html">ATmega3250</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega3250P.html">ATmega3250P</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega325P.html">ATmega325P</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega329.html">ATmega329</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega3290.html">ATmega3290</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega3290P.html">ATmega3290P</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega329P.html">ATmega329P</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega645.html">ATmega645</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega6450.html">ATmega6450</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega6450P.html">ATmega6450P</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega649.html">ATmega649</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega645P.html">ATmega645P</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega649.html">ATmega649</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega6490.html">ATmega6490</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega6490P.html">ATmega6490P</a>, <a href="https://docs.platformio.org/en/latest/boards/atmelavr/ATmega649P.html">ATmega649P</a>,</li>
  <li>Updated MCUdude’s cores (#302):
    <ul>
      <li>MajorCore <code class="language-plaintext highlighter-rouge">v2.2.1</code> (<a href="https://github.com/MCUdude/MajorCore/releases/tag/v2.2.1">release notes</a>)</li>
      <li>MegaCore <code class="language-plaintext highlighter-rouge">v2.2.2</code> (<a href="https://github.com/MCUdude/MegaCore/releases/tag/v2.2.2">release notes</a>)</li>
      <li>MightyCore <code class="language-plaintext highlighter-rouge">v2.2.1</code> (<a href="https://github.com/MCUdude/MightyCore/releases/tag/v2.2.1">release notes</a>)</li>
      <li>MiniCore <code class="language-plaintext highlighter-rouge">v2.2.1</code> (<a href="https://github.com/MCUdude/MiniCore/releases/tag/v2.2.1">release notes</a>)</li>
    </ul>
  </li>
  <li>MCUdude cores switched to AVRDUDE v7.1</li>
</ul>

<p><strong>Related resources for the Microchip AVR dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/atmelavr.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-atmelavr/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="microchip-megaavr-dev-platform-v17">Microchip megaAVR dev-platform v1.7</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/atmelmegaavr">Microchip megaAVR</a> v1.7.0 comes with updated Arduino cores and several minor improvements:</p>

<ul>
  <li>Updated <code class="language-plaintext highlighter-rouge">MegaCoreX</code> to v2.6.5 (<a href="https://github.com/MCUdude/MegaCoreX/releases/tag/v1.1.1">release notes</a>)</li>
  <li>Updated <code class="language-plaintext highlighter-rouge">megatinycore</code> to v2.6.5 (<a href="https://github.com/SpenceKonde/megaTinyCore/releases/tag/2.6.5">release notes</a>)</li>
  <li>MegaCoreX and megatinycore switched to AVRDUDE v7.1</li>
  <li>Fixed incorrect programmer name for the <code class="language-plaintext highlighter-rouge">avr_iot_wg</code> and <code class="language-plaintext highlighter-rouge">curiosity_nano_4809</code> boards (#52)</li>
  <li>Minor fixes and improvements (#50)</li>
</ul>

<p><strong>Related resources for the Microchip megaAVR dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="arduino-core-for-mbed-enabled-devices-v354">Arduino Core for mbed-enabled devices v3.5.4</h2>

<p>The <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a>, <a href="https://registry.platformio.org/platforms/platformio/nordicnrf52">Nordic nRF52</a> and <a href="https://registry.platformio.org/platforms/platformio/raspberrypi">Raspberry Pi RP2040</a> dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v3.5.4. According to the release notes, v3.5.4 brings a lot of bugfixes and improvements in core and accompanying libraries.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[Major update of PlatformIO IDE, New boards & dev-kits, Updated Arduino cores for STMicroelectronics, Microchip AVR/megaAVR and mbed-enabled devices]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-february-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-february-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO IDE 3.0 for VSCode 🚀</title><link href="https://piolabs.com/blog/news/platformio-ide-3-0-for-vscode-released.html" rel="alternate" type="text/html" title="PlatformIO IDE 3.0 for VSCode 🚀" /><published>2023-02-06T00:00:00+02:00</published><updated>2023-02-06T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-ide-3-0-for-vscode-released</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-ide-3-0-for-vscode-released.html"><![CDATA[<p>PlatformIO Labs is dedicated to delivering the most advanced and innovative embedded development solutions on the market. With PlatformIO IDE, developers can take their embedded software development to the next level and achieve maximum productivity and efficiency.</p>

<!-- more -->

<p>We are excited to announce a new major release of <a href="https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide" target="_blank">PlatformIO IDE 3.0 for Microsoft Visual Studio Code (VSCode)</a> and provide embedded software developers with an advanced development environment that meets their evolving needs and demands. The new version of the IDE is built on the latest technology, delivering an enhanced user experience, improved performance and expanded functionality compared to previous versions.</p>

<p>There’s a lot going on with this release, so we’ve prepared this special post with lots of details about new features and enhancements that provide a powerful and unique functionality, opening up new opportunities for developers to build highly sophisticated embedded applications.</p>

<p><img class="figure-img img-fluid rounded" src="/assets/img/screenshots/desktop/platformio-ide-for-vscode.png" alt="PlatformIO IDE 3.0 for VSCode 🚀" /></p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#what-is-new" id="markdown-toc-what-is-new">What is New</a>    <ul>
      <li><a href="#onboarding-with-walkthroughs" id="markdown-toc-onboarding-with-walkthroughs">Onboarding with “Walkthroughs”</a></li>
      <li><a href="#project-management" id="markdown-toc-project-management">Project Management</a>        <ul>
          <li><a href="#intellisense-for-platformioini" id="markdown-toc-intellisense-for-platformioini">IntelliSense for “platformio.ini”</a></li>
          <li><a href="#unit-testing-ui" id="markdown-toc-unit-testing-ui">Unit Testing UI</a></li>
          <li><a href="#port-switcher" id="markdown-toc-port-switcher">Port Switcher</a></li>
          <li><a href="#custom-platformio-toolbar" id="markdown-toc-custom-platformio-toolbar">Custom PlatformIO Toolbar</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#upgrade" id="markdown-toc-upgrade">Upgrade</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="what-is-new">What is New</h2>

<p>PlatformIO IDE 3.0 for VSCode has something new for every developer. In this section, we are going to highlight the most important changes and
features introduced in the latest release. Please visit <a href="https://github.com/platformio/platformio-vscode-ide/releases/tag/v3.0.0" target="_blank">PlatformIO IDE for VSCode Release Notes</a> for more detailed information.</p>

<h3 id="onboarding-with-walkthroughs">Onboarding with “Walkthroughs”</h3>

<p>First impressions are crucial. That’s why we prepared an informative <strong>Walkthroughs</strong> page to help newcomers understand the PlatformIO ecosystem and features of the PlatformIO IDE extension via a comprehensive multi-step checklist. We hope that this improvement will significantly simplify the onboarding process when developers install PlatformIO IDE 3.0 for the first time.</p>

<p><strong>Demo</strong></p>

<p>If PlatformIO IDE for VSCode is already installed, please open <strong>Walkthroughs</strong> via <code class="language-plaintext highlighter-rouge">Menu: Help &gt; Get Started &gt; Walkthroughs &gt; More...</code></p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-02-06-platformio-ide-3-0-for-vscode-released/onboarding-and-walkthrough.jpeg&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-02-06-platformio-ide-3-0-for-vscode-released/onboarding-and-walkthrough.jpeg" />
</a></p>

<h3 id="project-management">Project Management</h3>

<h4 id="intellisense-for-platformioini">IntelliSense for “platformio.ini”</h4>

<p>Each PlatformIO project contains a highly customizable configuration file that provides tens of handy options that sometimes can be hard to remember. Even though developers can always consult PlatformIO documentation, it would be much more productive if all necessary information and hints were available without leaving the development environment. That’s why PlatformIO IDE 3.0 for VSCode finally brings the long-awaited IntelliSense support for the <a href="https://docs.platformio.org/en/latest/projectconf/index.html">platformio.ini</a> configuration file with the following features:</p>

<ul>
  <li>Auto-completion for configuration options</li>
  <li>Auto-completion for choice-based option values</li>
  <li>Hover over an option and get a quick documentation</li>
  <li>Realtime serial port auto-completion for port-related options</li>
  <li>Quickly jump to a development platform or library located in the <a href="https://registry.platformio.org/">PlatformIO Registry</a>.</li>
</ul>

<p><strong>Demo</strong></p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-02-06-platformio-ide-3-0-for-vscode-released/platformio-ini-intellisense.gif&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-02-06-platformio-ide-3-0-for-vscode-released/platformio-ini-intellisense.gif" />
</a></p>

<h4 id="unit-testing-ui">Unit Testing UI</h4>

<p><a href="https://docs.platformio.org/en/latest/advanced/unit-testing/index.html">PlatformIO Unit Testing</a> allows developers to separate independent parts of the firmware/program and test that individual parts in isolation to make sure they are working correctly. The new PlatformIO IDE 3.0 brings a seamless integration of the PlatformIO Unit Testing solution and VSCode Testing UI so that developers now have a single unified view of their testing results.</p>

<p>Once you add tests to your project, a test beaker icon will be displayed on the VS Code Activity bar. The beaker icon is for the <strong>Test Explorer</strong> view. When you open the Test Explorer, you will see a list of test suites where you can manage project tests:</p>

<ul>
  <li>Filter test suites</li>
  <li>Run selected test suites</li>
  <li>Jump to a failed test case.</li>
</ul>

<p><strong>Demo</strong></p>

<p>Here is a demonstration of a simple <a href="https://github.com/platformio/platformio-examples/tree/develop/unit-testing/calculator">calculator example</a> based on the <a href="https://docs.platformio.org/en/latest/advanced/unit-testing/frameworks/unity.html">Unity Testing Framework</a>:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-02-06-platformio-ide-3-0-for-vscode-released/unit-testing-ui.jpeg&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-02-06-platformio-ide-3-0-for-vscode-released/unit-testing-ui.jpeg" />
</a></p>

<h4 id="port-switcher">Port Switcher</h4>

<p><strong>Project Port Switcher</strong> was one of the most requested feature by our community. We love to implement slight improvements to simplify lives of our users and bring better developer experience. Now it is possible to override the “upload”, “monitor” or “test” ports without any changes to the <a href="https://docs.platformio.org/en/latest/projectconf/index.html">platformio.ini</a> configuration file. You can also pass your custom value to the port such as IP address for OTA, media disk, or even leverage <a href="https://docs.platformio.org/en/latest/projectconf/sections/env/options/upload/upload_port.html">wildcard patterns</a>.</p>

<p>Note that the overridden port changed via the new switcher has higher priority over the ports configured in the <a href="https://docs.platformio.org/en/latest/projectconf/index.html">platformio.ini</a> configuration file.</p>

<p><strong>Demo</strong></p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-02-06-platformio-ide-3-0-for-vscode-released/port-switcher.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-02-06-platformio-ide-3-0-for-vscode-released/port-switcher.png" />
</a></p>

<h4 id="custom-platformio-toolbar">Custom PlatformIO Toolbar</h4>

<p>One of our priorities is to make PlatformIO IDE more personalized and flexible so that developers can customize their development environment and hence significantly increase their programming productivity. PlatformIO IDE 3.0 for VSCode allows developers to configure their own toolbar using a new <code class="language-plaintext highlighter-rouge">platformio-ide.toolbar</code> configuration option. Now they can declare their own buttons and attach arbitrary commands to them. They can use <a href="https://code.visualstudio.com/api/references/commands">Built-in VSCode Commands</a> or commands from any of their favorite 3rd party extensions.</p>

<p>The button can be text, an icon, or even a mix of them. The list of supported icons is documented in the <a href="https://code.visualstudio.com/api/references/icons-in-labels#icon-listing">VSCode Icon Listing</a>.</p>

<p>Developers can also have different toolbars per workspace thanks to the <a href="https://code.visualstudio.com/docs/getstarted/settings">User and Workspace Settings</a>.</p>

<p><strong>Demo</strong></p>

<p>Below is the overridden toolbar with custom buttons:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2023-02-06-platformio-ide-3-0-for-vscode-released/custom-platformio-toolbar.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2023-02-06-platformio-ide-3-0-for-vscode-released/custom-platformio-toolbar.png" />
</a></p>

<h2 id="upgrade">Upgrade</h2>

<p><strong>Requires VSCode 1.65 or above</strong></p>

<p>Please navigate to “VSCode &gt; View &gt; Extensions” and click “Update”.</p>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><category term="featured" /><summary type="html"><![CDATA[PlatformIO IDE 3.0 for VSCode is out with long-awaited IntelliSense support for the "platformio.ini", seamless integration of the PlatformIO Unit Testing solution and VSCode Testing UI, custom PlatformIO Toolbar]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/img/screenshots/desktop/platformio-ide-for-vscode.png" /><media:content medium="image" url="https://piolabs.com/assets/img/screenshots/desktop/platformio-ide-for-vscode.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source January Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-january-2023-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source January Updates" /><published>2023-02-01T00:00:00+02:00</published><updated>2023-02-01T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-january-2023-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-january-2023-updates.html"><![CDATA[<p>Welcome to the January 2023 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.</p>

<p>We hope you enjoyed your holidays and had some quality time with your family and friends. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-january-news.jpg" alt="PlatformIO Open Source January Updates" /></p>

<p>During January, we released a bugfix release for PlatformIO Core, added support for the latest ESP-IDF v5.0 and Arduino ESP8266 core v3.1, fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-core-616" id="markdown-toc-platformio-core-616">PlatformIO Core 6.1.6</a></li>
  <li><a href="#esp-idf-v50" id="markdown-toc-esp-idf-v50">ESP-IDF v5.0</a></li>
  <li><a href="#espressif32-dev-platform-v60" id="markdown-toc-espressif32-dev-platform-v60">Espressif32 dev-platform v6.0</a></li>
  <li><a href="#espressif8266-dev-platform-v41" id="markdown-toc-espressif8266-dev-platform-v41">Espressif8266 dev-platform v4.1</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="platformio-core-616">PlatformIO Core 6.1.6</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v6.1.6 release with lots of great improvements and bugfixes:</p>

<ul>
  <li>Added support for Python 3.11</li>
  <li>Added a new <a href="https://docs.platformio.org/en/latest/projectconf/sections/platformio/options/generic/name.html">name</a> configuration option to customize a project name (<a href="https://github.com/platformio/platformio-core/pull/4498">pull #4498</a>)</li>
  <li>Made assets (templates, <code class="language-plaintext highlighter-rouge">99-platformio-udev.rules</code>) part of Python’s module (<a href="https://github.com/platformio/platformio-core/issues/4458">issue #4458</a>)</li>
  <li>Updated <a href="https://docs.platformio.org/en/latest/plus/check-tools/clang-tidy.html">Clang-Tidy</a> check tool to v15.0.5 with new diagnostics and bugfixes</li>
  <li>Removed dependency on the “zeroconf” package and install it only when a user lists mDNS devices (issue with zeroconf’s LGPL license)</li>
  <li>Show the real error message instead of “Can not remove temporary directory” when <a href="https://docs.platformio.org/en/latest/projectconf.html">“platformio.ini”</a> configuration file is broken (<a href="https://github.com/platformio/platformio-core/issues/4480">issue #4480</a>)</li>
  <li>Fixed an issue with an incorrect test summary when a testcase name includes a colon (<a href="https://github.com/platformio/platformio-core/issues/4508">issue #4508</a>)</li>
  <li>Fixed an issue when <a href="https://docs.platformio.org/en/latest/projectconf/sections/env/options/advanced/extends.html">extends</a> did not override options in the right order (<a href="https://github.com/platformio/platformio-core/issues/4462">issue #4462</a>)</li>
  <li>Fixed an issue when <a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_list.html">pio pkg list</a> and <a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_uninstall.html">pio pkg uninstall</a> commands fail if there are circular dependencies in the <a href="https://docs.platformio.org/en/latest/manifests/library-json/index.html">library.json</a> manifests (<a href="https://github.com/platformio/platformio-core/issues/4475">issue #4475</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-core/releases/tag/v6.1.6">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="esp-idf-v50">ESP-IDF v5.0</h2>

<p>We’re happy to announce updated support for the latest patch update of <strong>ESP-IDF v4.3</strong> - the official development framework for the ESP32, ESP32-S and ESP32-C Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.</p>

<p><strong>Major enhancements in v5.0.0:</strong></p>

<ul>
  <li>More robust security2 scheme (based on SRP6a+AES-GCM) in the WiFi provisioning component</li>
  <li>Integration of mbedTLS-3.x (3.2.1) stack</li>
  <li>Included FreeRTOS SMP Kernel (upstream AWS version)
    <ul>
      <li>More Wi-Fi features:</li>
      <li>802.11r (Fast BSS Transition)</li>
      <li>PMF support for softAP</li>
      <li>WPS registrar support in softAP</li>
      <li>WPA3 OWE support for station</li>
      <li>WPA3 SAE H2E support for station</li>
    </ul>
  </li>
</ul>

<p>More information on project configuration for ESP-IDF can be found <a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration">here</a>.</p>

<p><strong>Related resources for ESP-IDF</strong>:</p>

<ul>
  <li><a href="https://github.com/espressif/esp-idf/releases/tag/v5.0.0">Release notes for v5.0.0</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html">Documentation for ESP-IDF</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#boards">Supported boards</a></li>
</ul>

<h2 id="espressif32-dev-platform-v60">Espressif32 dev-platform v6.0</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/espressif32">Espressif 32</a> dev-platform comes with ESP-IDF v5.0, updated toolchain packages and several minor fixes and improvements:</p>

<ul>
  <li>Added support for IDF v5.0 (<a href="https://github.com/espressif/esp-idf/releases/tag/v5.0">release notes</a>) with GCC v11.2.0+2022r1</li>
  <li>Updated default partition tables for Adafruit Feather S3 based boards (<a href="https://github.com/platformio/platform-espressif32/pull/996">#996</a>, <a href="https://github.com/platformio/platform-espressif32/pull/997">#997</a>)</li>
  <li>Minor fixes and improvements (<a href="https://github.com/platformio/platform-espressif32/pull/950">#950</a>, <a href="https://github.com/platformio/platform-espressif32/pull/983">#983</a>, <a href="https://github.com/platformio/platform-espressif32/pull/993">#993</a>, <a href="https://github.com/platformio/platform-espressif32/pull/995">#995</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-espressif32/releases/tag/v3.5.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="espressif8266-dev-platform-v41">Espressif8266 dev-platform v4.1</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/espressif8266">Espressif8266</a> dev-platform brings support for a new development board, the latest Arduino core v3.1 and updated toolchain packages:</p>

<ul>
  <li>New board <a href="http://docs.platformio.org/en/latest/boards/espressif8266/d1_wroom_02.html">WeMos D1 ESP-WROOM-02</a></li>
  <li>Updated Arduino Core to the latest v3.1 (release notes <a href="https://github.com/esp8266/Arduino/releases/tag/3.1.0">v3.1.0</a>, release notes <a href="https://github.com/esp8266/Arduino/releases/tag/3.1.1">v3.1.1</a>)</li>
  <li>Updated toolchain packages to the latest v10.3-e5f9fec</li>
  <li>Minor fixes and improvements</li>
</ul>

<p><strong>Related resources for the Espressif8266 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif8266.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif8266/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[PlatformIO Core bugfix release, Support for the latest ESP-IDF v5.0, Updated Arduino core v3.1 for Espressif8266]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-january-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source December Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-december-2022-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source December Updates" /><published>2023-01-03T00:00:00+02:00</published><updated>2023-01-03T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-december-2022-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-december-2022-updates.html"><![CDATA[<p>Welcome to the December 2022 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-december-news.jpg" alt="PlatformIO Open Source December Updates" /></p>

<p>During December, we released a pre-relase version of PlatformIO IDE 3.0 for Visual Studio Code, bugfix release for PlatformIO Core, added support for the latest Arduino ESP32 core v2.0.6, fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-ide-30-preview-for-visual-studio-code" id="markdown-toc-platformio-ide-30-preview-for-visual-studio-code">PlatformIO IDE 3.0 Preview for Visual Studio Code</a></li>
  <li><a href="#platformio-core-615" id="markdown-toc-platformio-core-615">PlatformIO Core 6.1.5</a></li>
  <li><a href="#espressif32-dev-platform-v53" id="markdown-toc-espressif32-dev-platform-v53">Espressif32 dev-platform v5.3</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="platformio-ide-30-preview-for-visual-studio-code">PlatformIO IDE 3.0 Preview for Visual Studio Code</h2>

<p><a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html"><img class="figure-img img-fluid" src="/assets/posts/oss-updates/platformio-ide-for-vscode-laptop.png" alt="PlatformIO IDE for VSCode" /></a></p>

<p>We are pleased to announce a pre-release of PlatformIO IDE 3.0 for <a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">Visual Studio Code</a> with significant improvements to boost developer effectiveness. The major enhancements include the following:</p>

<ul>
  <li>New streamlined onboarding with comprehensive walkthroughs</li>
  <li>Renovated project management with intellisense for project configuration files</li>
  <li>Native integration of the PlatformIO Unit Testing solution and VSCode Testing UI.</li>
</ul>

<p>Take a look at <a href="https://community.platformio.org/t/platformio-ide-3-0-preview-for-vscode-we-want-your-feedback">the detailed overview</a> of the new features and improvements on the community forum.</p>

<h2 id="platformio-core-615">PlatformIO Core 6.1.5</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v6.1.5 release with lots of great improvements and bugfixes:</p>

<ul>
  <li>Added a new <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_settings.html">enable_proxy_strict_ssl</a> setting to disable the proxy server certificate verification (<a href="https://github.com/platformio/platformio-core/issues/4432">issue #4432</a>)</li>
  <li>Documented <a href="https://docs.platformio.org/en/latest/core/installation/proxy-configuration.html">PlatformIO Core Proxy Configuration</a></li>
  <li>Speeded up device port finder by avoiding loading board HWIDs from development platforms</li>
  <li>Improved caching of build metadata in debug mode</li>
  <li>Fixed an issue when <a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_install.html">pio pkg install --storage-dir</a> command requires PlatformIO project (<a href="https://github.com/platformio/platformio-core/issues/4410">issue #4410</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-core/releases/tag/v6.1.5">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="espressif32-dev-platform-v53">Espressif32 dev-platform v5.3</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/espressif32">Espressif 32</a> dev-platform brings support for the latest Arduino Core, new boards and dev-kits, several minor fixes and improvements:</p>

<ul>
  <li>Added new boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/esp32-c3-m1i-kit.html">Ai-Thinker ESP-C3-M1-I-Kit</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/bpi_leaf_s3.html">BPI-Leaf-S3</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/cytron_maker_feather_aiot_s3.html">Cytron Maker Feather AIoT S3</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/deneyapkart1Av2.html">Deneyap Kart 1A v2</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/deneyapminiv2.html">Deneyap Mini v2</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/redpill_esp32s3.html">RedPill ESP32-S3</a></li>
    </ul>
  </li>
  <li>Added support for Arduino v2.0.6 (<a href="https://github.com/espressif/arduino-esp32/releases/tag/2.0.6">release notes</a>)</li>
  <li>Updated toolchains to v8.4.0r2-patch5</li>
  <li>Updated ULP toolchain to v2.35</li>
  <li>Updated esptoolpy to v4.4.0 (<a href="https://github.com/espressif/esptool/releases/tag/v4.4.0">release notes</a>)</li>
  <li>Updated ESP-IDF to v4.4.3 (<a href="https://github.com/espressif/esp-idf/releases/tag/v4.4.3">release notes</a>)</li>
  <li>Fixed HWID values the for the <code class="language-plaintext highlighter-rouge">um_pros3</code> and <code class="language-plaintext highlighter-rouge">deneyapmini</code> boards (<a href="https://github.com/platformio/platform-espressif32/issues/964">#964</a>)</li>
  <li>Minor fixes and improvements (<a href="https://github.com/platformio/platform-espressif32/issues/960">#960</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-espressif32/releases/tag/v5.3.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[PlatformIO IDE 3.0 Preview for Visual Studio Code, PlatformIO Core bugfix release, Updated Arduino core v2.0.6 for Espressif32]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-december-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-december-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source September Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-september-2022-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source September Updates" /><published>2022-10-03T00:00:00+03:00</published><updated>2022-10-03T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-september-2022-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-september-2022-updates.html"><![CDATA[<p>Welcome to the September 2022 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-september-news.jpg" alt="PlatformIO Open Source September Updates" /></p>

<p>During September, we released a new version of PlatformIO IDE for Visual Studio Code and bugfix release for PlatformIO Core, added support for the latest ESP-IDF v4.4.2, Arduino ESP32 core v2.0.5 and fixed a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-core-614" id="markdown-toc-platformio-core-614">PlatformIO Core 6.1.4</a></li>
  <li><a href="#platformio-ide-for-visual-studio-code-v254" id="markdown-toc-platformio-ide-for-visual-studio-code-v254">PlatformIO IDE for Visual Studio Code v2.5.4</a></li>
  <li><a href="#esp-idf-v442" id="markdown-toc-esp-idf-v442">ESP-IDF v4.4.2</a></li>
  <li><a href="#espressif32-dev-platform-v52" id="markdown-toc-espressif32-dev-platform-v52">Espressif32 dev-platform v5.2</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="platformio-core-614">PlatformIO Core 6.1.4</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v6.1.4 release with lots of great improvements and bugfixes:</p>

<ul>
  <li>Added support for accepting the original FileNode environment in a “callback” function when using <a href="https://docs.platformio.org/en/latest/scripting/middlewares.html">Build Middlewares</a> (<a href="https://github.com/platformio/platformio-core/pull/4380">pull #4380</a>)</li>
  <li>Improved device port finder when using dual channel UART converter (<a href="https://github.com/platformio/platformio-core/issues/4367">issue #4367</a>)</li>
  <li>Improved project dependency resolving when using the <a href="https://docs.platformio.org/en/latest/core/userguide/project/cmd_init.html">pio project init --ide</a> command</li>
  <li>Upgraded build engine to the SCons 4.4.0 (<a href="https://github.com/SCons/scons/releases/tag/4.4.0">release notes</a>)</li>
  <li>Keep custom “unwantedRecommendations” when generating projects for VSCode (<a href="https://github.com/platformio/platformio-core/issues/4383">issue #4383</a>)</li>
  <li>Do not resolve project dependencies for the <code class="language-plaintext highlighter-rouge">cleanall</code> target (<a href="https://github.com/platformio/platformio-core/issues/4344">issue #4344</a>)</li>
  <li>Warn about calling “env.BuildSources” in a POST-type script (<a href="https://github.com/platformio/platformio-core/issues/4385">issue #4385</a>)</li>
  <li>Fixed an issue when escaping macros/defines for IDE integration (<a href="https://github.com/platformio/platformio-core/issues/4360">issue #4360</a>)</li>
  <li>Fixed an issue when the “cleanall” target removes dependencies from all working environments (<a href="https://github.com/platformio/platformio-core/issues/4386">issue #4386</a>)</li>
  <li>Fixed a regression bug when opening device monitor without any filters (<a href="https://github.com/platformio/platformio-core/issues/4363">issue #4363</a>)</li>
  <li>Export a <code class="language-plaintext highlighter-rouge">PIO_UNIT_TESTING</code> macro to the project source files and dependent libraries in the <a href="https://docs.platformio.org/en/latest/advanced/unit-testing/index.html">Unit Testing</a> mode</li>
  <li>Improved detection of Windows architecture (<a href="https://github.com/platformio/platformio-core/issues/4353">issue #4353</a>)</li>
  <li>Warn about unknown <a href="https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html#filters">device monitor filters</a> (<a href="https://github.com/platformio/platformio-core/issues/4362">issue #4362</a>)</li>
  <li>Fixed a regression bug when <a href="https://docs.platformio.org/en/latest/manifests/library-json/fields/build/libarchive.html">libArchive</a> option declared in the <a href="https://docs.platformio.org/en/latest/manifests/library-json/index.html">library.json</a> manifest was ignored (<a href="https://github.com/platformio/platformio-core/issues/4351">issue #4351</a>)</li>
  <li>Fixed an issue when the <a href="https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_publish.html">pio pkg publish</a> command didn’t work with Python 3.6 (<a href="https://github.com/platformio/platformio-core/issues/4352">issue #4352</a>)</li>
  <li>Added new <code class="language-plaintext highlighter-rouge">monitor_encoding</code> project configuration option to configure <a href="https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html">Device Monitor</a> (<a href="https://github.com/platformio/platformio-core/issues/4350">issue #4350</a>)</li>
  <li>Allowed specifying project environments for <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_ci.html">pio ci</a> command (<a href="https://github.com/platformio/platformio-core/issues/4347">issue #4347</a>)</li>
  <li>Show “TimeoutError” only in the verbose mode when can not find a serial port</li>
  <li>Fixed an issue when a serial port was not automatically detected if the board has predefined HWIDs</li>
  <li>Fixed an issue with endless scanning of project dependencies (<a href="https://github.com/platformio/platformio-core/issues/4349">issue #4349</a>)</li>
  <li>Fixed an issue with <a href="https://docs.platformio.org/en/latest/librarymanager/ldf.html">LDF</a> when incompatible libraries were used for the working project environment with the missed framework (<a href="https://github.com/platformio/platformio-core/pull/4346">pull #4346</a>)</li>
</ul>

<p>See <a href="https://github.com/platformio/platformio-core/releases/tag/v6.1.4">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="platformio-ide-for-visual-studio-code-v254">PlatformIO IDE for Visual Studio Code v2.5.4</h2>

<p><a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html"><img class="figure-img img-fluid" src="/assets/posts/oss-updates/platformio-ide-for-vscode-laptop.png" alt="PlatformIO IDE for VSCode" /></a></p>

<p>We are pleased to announce a new release <code class="language-plaintext highlighter-rouge">v2.5.4</code> of PlatformIO IDE for <a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">Visual Studio Code</a>. Here is a cumulative list of fixes and improvements that have been made available:</p>

<ul>
  <li>Keep using legacy API for calling VSCode tasks</li>
  <li>Fixed an issue when Project Tasks are disabled in the VSCode v1.71 (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/3299">#3299</a>)</li>
  <li>Fixed an issue when project tasks with a title didn’t work (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/3274">#3274</a>)</li>
  <li>Prevented users from using wrong Build/Debug buttons (issue <a href="https://github.com/platformio/platformio-vscode-ide/issues/3239">#3239</a>)</li>
</ul>

<h2 id="esp-idf-v442">ESP-IDF v4.4.2</h2>

<p>We’re happy to announce updated support for the latest stable <strong>ESP-IDF v4.4.2</strong> - the official development framework for the ESP32, ESP32-S and ESP32-C Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.</p>

<p><strong>Major enhancements in the latest release:</strong></p>

<ul>
  <li>Added support for ESP32-C3 ECO4</li>
  <li>Freemodbus: Add support of freemodbus component on ESP32-S2, ESP32-S3 and ESP32-C3</li>
  <li>Added critical protection for the operations on interrupt status of VHCI environment variables to avoid miss interrupt events.</li>
  <li>Added HT40 support for espnow &amp; 80211_tx</li>
</ul>

<p>More information on project configuration for ESP-IDF can be found <a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration">here</a>.</p>

<p><strong>Related resources for ESP-IDF</strong>:</p>

<ul>
  <li><a href="https://github.com/espressif/esp-idf/releases/tag/v4.4.2">Release notes for v4.4.2</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html">Documentation for ESP-IDF</a></li>
  <li><a href="https://docs.platformio.org/en/latest/frameworks/espidf.html#boards">Supported boards</a></li>
</ul>

<h2 id="espressif32-dev-platform-v52">Espressif32 dev-platform v5.2</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/espressif32">Espressif 32</a> dev-platform brings support for the latest Arduino Core and ESP-IDF, new boards, dev-kits and several minor fixes and improvements:</p>

<ul>
  <li>Added new boards: <a href="https://docs.platformio.org/en/latest/boards/espressif32/nodemcu-32s2.html">Ai-Thinker NodeMCU-32S2</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_itsybitsy_esp32.html">Adafruit ItsyBitsy ESP32</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/wifiduino32c3.html">Blinker WiFiduinoV2</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/wifiduino32s3.html">Blinker WiFiduino32S3</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/deneyapkartg.html">Deneyap Kart G</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/minimain_esp32s2.html">Deparment of Alchemy MiniMain ESP32-S2</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/bee_motion.html">Smart Bee Motion</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/bee_motion_mini.html">Smart Bee Motion Mini</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/bee_motion_s3.html">Smart Bee Motion S3</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/bee_s3.html">Smart Bee S3</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/sparkfun_esp32_iot_redboard.html">SparkFun ESP32 IoT RedBoard</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/sparkfun_esp32s2_thing_plus_c.html">SparkFun ESP32 Thing Plus C</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/m5stack-station.html">M5Stack Station</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/tamc_termod_s3.html">TAMC Termod S3</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/unphone7.html">unphone7</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/unphone8.html">unphone8</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/unphone9.html">unphone9</a>, <a href="https://docs.platformio.org/en/latest/boards/espressif32/lolin_s3.html">WEMOS LOLIN S3</a></li>
  <li>Added support for Arduino v2.0.5 (<a href="https://github.com/espressif/arduino-esp32/releases/tag/2.0.5">release notes</a>)</li>
  <li>Added support for ESP-IDF v4.4.2 (<a href="https://github.com/espressif/esp-idf/releases/tag/v4.4.2">release notes</a>)</li>
  <li>Updated esptoolpy to v4.2.1 (<a href="https://github.com/espressif/esptool/releases/tag/v4.2.1">release notes</a>)</li>
  <li>Synchronized default flash mode for several boards with the latest Arduino core</li>
  <li>Better handling of bootloader configuration <a href="https://github.com/platformio/platform-espressif32/issues/880">#880</a></li>
  <li>The <code class="language-plaintext highlighter-rouge">memory_type</code> option is now used to properly select boot mode (<a href="https://github.com/platformio/platform-espressif32/issues/913">#913</a>, <a href="https://github.com/platformio/platform-espressif32/issues/837">#837</a>)</li>
  <li>Changed OpenOCD option <code class="language-plaintext highlighter-rouge">adapter_khz</code> to <code class="language-plaintext highlighter-rouge">adapter speed</code> <a href="https://github.com/platformio/platform-espressif32/issues/917">#917</a></li>
  <li>Fixed default flash mode for <code class="language-plaintext highlighter-rouge">OPI</code> memory <a href="https://github.com/platformio/platform-espressif32/issues/904">#904</a></li>
  <li>Fixed board configuration for <code class="language-plaintext highlighter-rouge">esp32s3box</code> <a href="https://github.com/platformio/platform-espressif32/issues/914">#914</a></li>
  <li>Fixed flash size for Adafruit QT Py ESP32-S3 without PSRAM <a href="https://github.com/platformio/platform-espressif32/issues/886">#886</a></li>
  <li>Minor fixes and improvements</li>
</ul>

<p>See <a href="https://github.com/platformio/platform-espressif32/releases/tag/v5.2.0">Release Notes</a> for more detailed information.</p>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[PlatformIO Core and PlatformIO IDE for Microsoft VSCode bugfix releases, Support for the latest ESP-IDF 4.4.2, Updated Arduino core for Espressif32]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-september-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-september-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Debugging with PlatformIO: Part 4. Using Semihosting on ARM Targets</title><link href="https://piolabs.com/blog/insights/debugging-semihosting.html" rel="alternate" type="text/html" title="Debugging with PlatformIO: Part 4. Using Semihosting on ARM Targets" /><published>2022-09-19T00:00:00+03:00</published><updated>2022-09-19T00:00:00+03:00</updated><id>https://piolabs.com/blog/insights/debugging-semihosting</id><content type="html" xml:base="https://piolabs.com/blog/insights/debugging-semihosting.html"><![CDATA[<p>When developing embedded software, it’s essential to have not only a full-featured debug probe that significantly improves the overall debugging experience but also a convenient way of sending status messages to a debug console on a host machine. This possibility can greatly help to less invasively monitor the behavior of an embedded application without stopping the whole program flow. Just imagine how useful it might be to use the “printf” function on a target device and see the output directly in the debug console on your machine without any additional hardware except a debug probe. It comes especially handy in the early development stages when there are no final I/O facilities available.</p>

<!-- more -->

<p>Nowadays, one of the most commonly used techniques for such tasks is called “Semihosting”. It’s a powerful debug mechanism designed to simplify the tunneling of I/O requests from a target device to a host machine. In the <a href="/blog/insights/debugging-cli.html">previous post</a>, we reviewed the debugging capabilities of the PlatformIO ecosystem in the CLI mode. In this article, we will try to take a deeper look at the semihosting capabilities and configure a simple PlatformIO project to use the I/O facilities of a computer running the PlatformIO IDE.</p>

<p>Throughout this post, we will be using a low-cost ARM-based board <a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_f401re.html" target="_blank">ST Nucleo-F401RE</a> and <a href="https://docs.platformio.org/en/latest/frameworks/stm32cube.html" target="_blank">STM32Cube</a> as the development framework.</p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#prerequisites" id="markdown-toc-prerequisites">Prerequisites</a></li>
  <li><a href="#what-is-semihosting" id="markdown-toc-what-is-semihosting">What is Semihosting?</a></li>
  <li><a href="#getting-started" id="markdown-toc-getting-started">Getting Started</a></li>
  <li><a href="#enabling-semihosting" id="markdown-toc-enabling-semihosting">Enabling Semihosting</a></li>
  <li><a href="#adding-support-for-floating-point-numbers" id="markdown-toc-adding-support-for-floating-point-numbers">Adding Support for Floating-point Numbers</a></li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>This article uses the following components:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/integration/ide/vscode.html">VSCode with installed PlatformIO IDE extension</a></li>
  <li><a href="https://docs.platformio.org/en/latest/boards/ststm32/nucleo_f401re.html">ST Nucleo-F401RE</a></li>
</ul>

<h2 id="what-is-semihosting">What is Semihosting?</h2>

<p>In the Arm documentation, the term <code class="language-plaintext highlighter-rouge">semihosting</code> is defined as a mechanism for communicating I/O requests from application code to a host computer running a debugger. To put it simply, it means that we can delegate some parts of application functionality (e.g. working with a keyboard, printing on a display, file I/O, etc.) to a host machine. A typical semihosting setup can be visualized as the following:</p>

<figure class="figure mb-7">
  <img class="figure-img img-fluid rounded lift lift-lg" src="/assets/posts/2022-09-19-debugging-semihosting/semihosting-schematic-overview.png" alt="Compilation and linking process" />
  <figcaption class="figure-caption text-center">
    Semihosting schematic overview
  </figcaption>
</figure>

<p>The implementation of the semihosting mechanism depends on the target architecture. In this article, we use ST Nucleo-F401RE with a Cortex-M4 MCU on-board. In our case, the semihosting implementation utilizes a special <code class="language-plaintext highlighter-rouge">BKPT (0xAB)</code> instruction which forces the CPU to enter the debug state. In this state, the control is transferred to a debugger so it can investigate whether that breakpoint should trigger a semihosting operation. Given that semihosting supports many different operations (<code class="language-plaintext highlighter-rouge">SYS_OPEN</code>, <code class="language-plaintext highlighter-rouge">SYS_SEEK</code>, <code class="language-plaintext highlighter-rouge">SYS_WRITE</code>, etc.), the processor has to specify what operation is requested and what parameters should be passed to the host machine. It’s done via the <code class="language-plaintext highlighter-rouge">R0</code> and <code class="language-plaintext highlighter-rouge">R1</code> registers. The processor stores the semihosting operation type in <code class="language-plaintext highlighter-rouge">R0</code> and prepares other parameters in a memory block pointed by <code class="language-plaintext highlighter-rouge">R1</code>. Once the processor executes the BKPT instruction and enters its debug state, the debugger checks the values in the <code class="language-plaintext highlighter-rouge">R0</code> and <code class="language-plaintext highlighter-rouge">R1</code> registers, executes the requested semihosting operation accordingly, returns the result value in <code class="language-plaintext highlighter-rouge">R0</code>, and skips the BKPT instruction to let the target continue the execution.</p>

<p>It’s also worth mentioning that the semihosting technique cannot offer high-speed I/O operations. Each time a semihosting operation is executed, the processor is simply stopped while the data is being transferred. The required time depends on many aspects including the type of a debug probe, target CPU speed, and even the performance of the host machine, all of that can affect the speed of semihosting operations.</p>

<p>Now that we know how semihosting works behind the scenes, we need to instruct the internal system calls to utilize the mechanism described above. Fortunately, the GNU Arm Embedded toolchain offers a special semihosted version of the syscalls implemented in the library called <code class="language-plaintext highlighter-rouge">rdimon</code>, we just need to properly configure the linker command with several special flags. The following project will show all the steps required to enable semihosting support.</p>

<h2 id="getting-started">Getting Started</h2>

<p>For a quick start, let’s create s basic example that should print the “Hello, World!” string to the debug console. For the sake of brevity, I will assume you already have the <a href="https://registry.platformio.org/platforms/platformio/ststm32">ST STM32</a> platform installed in your system.</p>

<p>First of all, let’s create a new project using PlatformIO Home Page:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2022-09-19-debugging-semihosting/semihosting-new-project-1.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2022-09-19-debugging-semihosting/semihosting-new-project-1.png" />
</a></p>

<p>As discussed above, we need to select “ST Nucleo-F401RE” as the board and “STM32Cube” as the framework and press the “Finish” button:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2022-09-19-debugging-semihosting/semihosting-new-project-2.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2022-09-19-debugging-semihosting/semihosting-new-project-2.png" />
</a></p>

<p>Now, let’s add some actual code that should print the “Hello world!” string. Create a new file <code class="language-plaintext highlighter-rouge">main.c</code> in the <code class="language-plaintext highlighter-rouge">src</code> folder with the following content:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stm32f4xx_hal.h&gt;</span><span class="cp">
</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">HAL_Init</span><span class="p">();</span>

    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Messages are buffered, so "\n" is required</span>
        <span class="c1">// to flush the internal buffer immediately</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Hello world!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">HAL_Delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">SysTick_Handler</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">HAL_IncTick</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If we start a new debug session after this step, then the “Hello world!” string won’t be printed in the debug console. That’s expected behavior because by default STM32Cube-based projects are linked with the <code class="language-plaintext highlighter-rouge">nosys</code> library. This library implements system calls as simple stubs which don’t provide any semihosting support. That’s why we need to slightly modify our project to link appropriate libraries.</p>

<h2 id="enabling-semihosting">Enabling Semihosting</h2>

<p>Let’s go through the steps required to enable semihosting support. First of all, we need to disable the default system calls implementation using the <a href="https://docs.platformio.org/en/latest/projectconf/section_env_build.html#build-unflags">build_unflags</a> option:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[env:nucleo_f401re]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">ststm32</span>
<span class="py">framework</span> <span class="p">=</span> <span class="s">stm32cube</span>
<span class="py">board</span> <span class="p">=</span> <span class="s">nucleo_f401re</span>

<span class="c">; Remove stub implementations
</span><span class="py">build_unflags</span> <span class="p">=</span>
    <span class="err">-lnosys</span>
    <span class="py">--specs</span><span class="p">=</span><span class="s">nosys.specs</span>
</code></pre></div></div>

<p>In the next step, we need to instruct the linker to use the above-mentioned <code class="language-plaintext highlighter-rouge">rdimon</code> implementations. The easiest way is to create an extra script in the root of the project (for example <code class="language-plaintext highlighter-rouge">enable_semihosting.py</code>) and add the semihosting flags directly to the default build environment:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Import</span> <span class="p">(</span><span class="s">"env"</span><span class="p">)</span>

<span class="n">env</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span>
    <span class="n">LINKFLAGS</span><span class="o">=</span><span class="p">[</span><span class="s">"--specs=rdimon.specs"</span><span class="p">],</span>
    <span class="n">LIBS</span><span class="o">=</span><span class="p">[</span><span class="s">"rdimon"</span><span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<p>In order to run that script we need to specify it in our <code class="language-plaintext highlighter-rouge">platformio.ini</code> file using the <a href="https://docs.platformio.org/en/latest/projectconf/section_env_advanced.html#extra-scripts">extra-scripts</a> option:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[env:nucleo_f401re]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">ststm32</span>
<span class="py">framework</span> <span class="p">=</span> <span class="s">stm32cube</span>
<span class="py">board</span> <span class="p">=</span> <span class="s">nucleo_f401re</span>

<span class="c">; Remove stub implementations
</span><span class="py">build_unflags</span> <span class="p">=</span>
    <span class="err">-lnosys</span>
    <span class="py">--specs</span><span class="p">=</span><span class="s">nosys.specs</span>

<span class="c">; Add semihosting flags
</span><span class="py">extra_scripts</span> <span class="p">=</span>
    <span class="err">enable_semihosting.py</span>
</code></pre></div></div>

<p>In the third step, we need to configure the debug server so it will redirect the semihosting output to the debug console. It can be done in the <code class="language-plaintext highlighter-rouge">platformio.ini</code> file using the <a href="https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-extra-cmds">debug_extra_cmds</a> option and two special commands:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">monitor arm semihosting enable</code> enables semihosting support</li>
  <li><code class="language-plaintext highlighter-rouge">monitor arm semihosting_fileio</code> redirects the semihosting I/O to the debug console</li>
</ul>

<p>After all those steps, the final <code class="language-plaintext highlighter-rouge">platformio.ini</code> file should look like this:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[env:nucleo_f401re]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">ststm32</span>
<span class="py">framework</span> <span class="p">=</span> <span class="s">stm32cube</span>
<span class="py">board</span> <span class="p">=</span> <span class="s">nucleo_f401re</span>

<span class="c">; Remove stub implementations
</span><span class="py">build_unflags</span> <span class="p">=</span>
    <span class="err">-lnosys</span>
    <span class="py">--specs</span><span class="p">=</span><span class="s">nosys.specs</span>

<span class="c">; Add semihosting flags
</span><span class="py">extra_scripts</span> <span class="p">=</span>
    <span class="err">enable_semihosting.py</span>

<span class="c">; Enable semihosting
</span><span class="py">debug_extra_cmds</span> <span class="p">=</span>
    <span class="err">monitor</span> <span class="err">arm</span> <span class="err">semihosting</span> <span class="err">enable</span>
    <span class="err">monitor</span> <span class="err">arm</span> <span class="err">semihosting_fileio</span> <span class="err">enable</span>
</code></pre></div></div>

<p>Finally, we need to declare and call a special function <code class="language-plaintext highlighter-rouge">initialise_monitor_handles</code> at the very beginning of the <code class="language-plaintext highlighter-rouge">main</code> function:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stm32f4xx_hal.h&gt;</span><span class="cp">
</span>
<span class="k">extern</span> <span class="kt">void</span> <span class="nf">initialise_monitor_handles</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>

    <span class="n">initialise_monitor_handles</span><span class="p">();</span>

    <span class="n">HAL_Init</span><span class="p">();</span>

    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Hello world!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">HAL_Delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">SysTick_Handler</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">HAL_IncTick</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we can start a new debug session (<code class="language-plaintext highlighter-rouge">F5</code>) and see the output in the debug console:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2022-09-19-debugging-semihosting/semihosting-initial-example.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2022-09-19-debugging-semihosting/semihosting-initial-example.png" />
</a></p>

<p>In order to better understand how it works, let’s take a closer look at the assembly listing of an internal system call when the “Hello World!” string is passed to the <code class="language-plaintext highlighter-rouge">printf</code> function:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2022-09-19-debugging-semihosting/semihosting-assembly-listing.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2022-09-19-debugging-semihosting/semihosting-assembly-listing.png" />
</a></p>

<p>The listing shows that before executing the BKPT (<code class="language-plaintext highlighter-rouge">0x00ab</code>) instruction, the register <code class="language-plaintext highlighter-rouge">R0</code> is loaded (via <code class="language-plaintext highlighter-rouge">R4</code>) with the value <code class="language-plaintext highlighter-rouge">5</code> which stands for <code class="language-plaintext highlighter-rouge">SYS_WRITE</code>. The register <code class="language-plaintext highlighter-rouge">R1</code> is loaded with a memory address from <code class="language-plaintext highlighter-rouge">R5</code> which was previously populated with the value of the Stack Pointer increased by four. The value in <code class="language-plaintext highlighter-rouge">R1</code> points to a three-word data block that contains the following items:</p>

<ul>
  <li>Handle to a previously opened stream or file</li>
  <li>Memory address with the data to write</li>
  <li>Size in bytes of the data to write</li>
</ul>

<p>In our case, the value in <code class="language-plaintext highlighter-rouge">R1</code> points to the address <code class="language-plaintext highlighter-rouge">0x20017fc7</code>, so let’s take a closer look at the real example of the data block located at that address:</p>

<p><a data-bigpicture="{&quot;imgSrc&quot;: &quot;/assets/posts/2022-09-19-debugging-semihosting/semihosting-memory-view.png&quot;}" href="#">
  <img class="img-fluid screenshot mw-md-100" src="/assets/posts/2022-09-19-debugging-semihosting/semihosting-memory-view.png" />
</a></p>

<p>By default, the ARM processors use the little-endian order, so all values should be read backward. The first block contains the value <code class="language-plaintext highlighter-rouge">0x01</code> which is the default value for the <code class="language-plaintext highlighter-rouge">STDOUT</code> stream, the second block contains a pointer to the address <code class="language-plaintext highlighter-rouge">0x20000310</code> and if we read the memory at that address we will see our <code class="language-plaintext highlighter-rouge">Hello World!</code> string. The final block contains the value <code class="language-plaintext highlighter-rouge">0x0D</code> which is equal to 13 bytes of the data.</p>

<h2 id="adding-support-for-floating-point-numbers">Adding Support for Floating-point Numbers</h2>

<p>By default, the STM32Cube framework is linked against a special variant of standard libraries called <code class="language-plaintext highlighter-rouge">newlib-nano</code>. It’s an optimized version of the <code class="language-plaintext highlighter-rouge">newlib</code> libraries with simplified logic and without unnecessary features. Additionally, rarely used functionality is declared using the weak symbol technique which greatly helps reduce the memory footprint. The formatted I/O operations with floating-point support are one of those features that are implemented as weak symbols. Fortunately, the process of enabling comes down to adding two flags to the linker command.</p>

<p>The support for floating-point I/O operations can be enabled in the same <code class="language-plaintext highlighter-rouge">enable_semihosting.py</code> file from the “Getting Started” section. Simply add two new flags <code class="language-plaintext highlighter-rouge">-Wl,-u,_printf_float</code> and <code class="language-plaintext highlighter-rouge">-Wl,-u,_printf_scanf</code> which will force the linker to pull those symbols to the final binary:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Import</span> <span class="p">(</span><span class="s">"env"</span><span class="p">)</span>

<span class="n">env</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span>
    <span class="n">LINKFLAGS</span><span class="o">=</span><span class="p">[</span>
        <span class="s">"--specs=rdimon.specs"</span><span class="p">,</span>
        <span class="s">"-Wl,-u,_printf_float"</span><span class="p">,</span>
        <span class="s">"-Wl,-u,_scanf_float"</span>
    <span class="p">],</span>
    <span class="n">LIBS</span><span class="o">=</span><span class="p">[</span><span class="s">"rdimon"</span><span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Semihosting is an extremely useful feature for testing and debugging purposes. Having it in your toolbox can greatly help you out when there are no other communication channels available. But developers should be aware of the several limitations that semihosting may bring:</p>

<ul>
  <li>Due to implementation trade-offs semihosting may significantly impact the performance of an application that can result in unexpected side effects in hard real-time system applications</li>
  <li>Semihosting only works during a debug session which means that applications compiled for semihosted development environment won’t run correctly when the target is detached from a debugger</li>
  <li>Memory-constrained devices may not have enough resources to handle semihosting calls (especially when <code class="language-plaintext highlighter-rouge">printf</code> with floats is used)</li>
</ul>

<p>It’s also worth mentioning that there are alternatives like retargeting the <code class="language-plaintext highlighter-rouge">printf</code> output via ITM channels or even solutions from commercial companies like <strong>Segger Real-Time Transfer</strong>.</p>

<p>This is the final post in the “Debugging with PlatformIO” series. If you are new to the series, you may find <a href="/blog/insights/debugging-introduction.html">Debugging with PlatformIO: Part 1. Back to the Basics</a> a useful starting point.</p>

<p>If you liked this series, you are sure to enjoy our posts on other topics:</p>

<ul>
  <li><a href="/blog/insights/memory-analysis-part-1.html">Analyze your firmware footprint with PlatformIO</a></li>
  <li><a href="/blog/insights/unit-testing-part-1.html">Unit Testing with PlatformIO</a></li>
</ul>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html"><![CDATA[In this article we will try to take a deeper look at the semihosting capabilities and configure a simple PlatformIO project to use the I/O facilities of a computer running the PlatformIO IDE.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2022-09-19-debugging-semihosting/semihosting-schematic-overview.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2022-09-19-debugging-semihosting/semihosting-schematic-overview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source July Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-july-2022-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source July Updates" /><published>2022-08-01T00:00:00+03:00</published><updated>2022-08-01T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-july-2022-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-july-2022-updates.html"><![CDATA[<p>Welcome to the July 2022 updates of <a href="https://platformio.org/">PlatformIO Open Source</a> professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/oss-updates/platformio-oss-july-news.jpg" alt="PlatformIO Open Source July Updates" /></p>

<p>During July, we have released a new version of PlatformIO Core, rolled out updates for the Espressif32 and Teensy platforms, resolved a lot of issues. Some of the key highlights include:</p>

<ul id="markdown-toc">
  <li><a href="#platformio-core-61" id="markdown-toc-platformio-core-61">PlatformIO Core 6.1</a></li>
  <li><a href="#espressif32-v51" id="markdown-toc-espressif32-v51">Espressif32 v5.1</a></li>
  <li><a href="#teensy-dev-platform-v417" id="markdown-toc-teensy-dev-platform-v417">Teensy dev-platform v4.17</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="platformio-core-61">PlatformIO Core 6.1</h2>

<p><a href="https://docs.platformio.org/en/latest/core/index.html">PlatformIO Core</a> is the heart of the whole PlatformIO ecosystem and we are excited to announce the next minor v6.1 release. This milestone we received helpful feedback from our community, which let us identify and tackle many issues and prepare a lot of great improvements. Major enhancements include the following:</p>

<ul>
  <li><strong>Renovated Device Monitor</strong>. PlatformIO Core v6.1 brings the improved <a href="https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html">Device Monitor</a>
packed with a lot of new features. The new Device Monitor comes with support for multiple data sources (including the RFC 2217 remote serial ports and raw sockets), automatic reconnection and ANSI escape codes.</li>
  <li><strong>Build System API Upgrades</strong>. New helper functions and significant improvements to the <a href="https://docs.platformio.org/en/latest/scripting/actions.html">Pre &amp; Post Actions</a> will greatly simplify the lives of library developers by allowing them to control their build environment even more precisely.</li>
</ul>

<p>See the full <a href="https://github.com/platformio/platformio-core/releases/tag/v6.1.0">Release Notes</a> for more detailed information and use <a href="https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html">pio upgrade</a> command to update to the latest version.</p>

<h2 id="espressif32-v51">Espressif32 v5.1</h2>

<p>The latest release of the <a href="https://registry.platformio.org/platforms/platformio/espressif32">Espressif 32</a> dev-platform comes with a bunch of new boards and dev-kits, the latest stable Arduino core v2.0.4 and a lot of fixes and improvements:</p>

<ul>
  <li>Added new boards:
    <ul>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_feather_esp32s3_tft.html">Adafruit Feather ESP32-S3 TFT</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/adafruit_feather_esp32s3_nopsram.html">Adafruit Feather ESP32-S3 No PSRAM</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/cnrs_aw2eth.html">CNRS AW2ETH</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/connaxio_espoir.html">Connaxio’s Espoir</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/dfrobot_beetle_esp32c3.html">DFRobot Beetle ESP32-C3</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/dfrobot_firebeetle2_esp32s3.html">DFRobot Firebeetle 2 ESP32-S3</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/seeed_xiao_esp32c3.html">Seeed Studio XIAO ESP32C3</a></li>
      <li><a href="https://docs.platformio.org/en/latest/boards/espressif32/wemos_d1_uno32.html">WEMOS D1 R32</a></li>
    </ul>
  </li>
  <li>Added support for Arduino v2.0.4 (<a href="https://github.com/espressif/arduino-esp32/releases/tag/2.0.4">release notes</a>)</li>
  <li>Updated OpenOCD package to v0.11.0-esp32-20220706 (<a href="https://github.com/espressif/openocd-esp32/releases/tag/v0.11.0-esp32-20220706">release notes</a>)</li>
  <li>Arduino build flags now propagated to the global scope for mixed IDF/Arduino projects <a href="https://github.com/platformio/platform-espressif32/issues/848">#848</a></li>
  <li>Fixed flash memory size for <code class="language-plaintext highlighter-rouge">adafruit_feather_esp32s3</code> <a href="https://github.com/platformio/platform-espressif32/issues/836">#836</a></li>
  <li>Minor fixes and improvements (<a href="https://github.com/platformio/platform-espressif32/issues/829">#829</a>, <a href="https://github.com/platformio/platform-espressif32/issues/853">#853</a>, <a href="https://github.com/platformio/platform-espressif32/issues/863">#863</a>)</li>
</ul>

<p><strong>Related resources for the Espressif32 dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-espressif32/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="teensy-dev-platform-v417">Teensy dev-platform v4.17</h2>

<p>The new release of the <a href="https://registry.platformio.org/platforms/platformio/teensy">Teensy</a> dev-platform brings support for the latest Teensyduino v1.57:</p>

<ul>
  <li>Updated Teensyduino to <code class="language-plaintext highlighter-rouge">v1.57</code> (<a href="https://github.com/PaulStoffregen/cores/releases/tag/1.57">release notes</a>)</li>
  <li>Added HWIDs for Teensy 4</li>
  <li>Added missing <code class="language-plaintext highlighter-rouge">USB_MTPDISK_SERIAL</code> USB macro (#91)</li>
</ul>

<p><strong>Related resources for the Teensy dev-platform</strong>:</p>

<ul>
  <li><a href="https://docs.platformio.org/en/latest/platforms/teensy.html">Documentation</a></li>
  <li><a href="https://github.com/platformio/platform-teensy/tree/develop/examples">Project Examples</a></li>
</ul>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[PlatformIO Core 6.1, New boards & dev-kits, Support for the latest Arduino ESP32 core v2.0.4 and Teensyduino v1.57]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-july-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-july-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Core 6.1 🚀</title><link href="https://piolabs.com/blog/news/platformio-core-6-1-released.html" rel="alternate" type="text/html" title="PlatformIO Core 6.1 🚀" /><published>2022-07-14T00:00:00+03:00</published><updated>2022-07-14T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-core-6-1-released</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-core-6-1-released.html"><![CDATA[<p>We are happy to announce the next release of PlatformIO Core with refactored Device Monitor,
Pre &amp; Post Actions for library authors, Stringification helpers,
and an improved PlatformIO Unit Testing solution for test-driven embedded development.</p>

<!-- more -->

<p><img class="figure-img img-fluid rounded" src="/assets/posts/2022-07-14-platformio-core-6-1-released/platformio-core-6-1-released.png" alt="PlatformIO Core 6.1 🚀" /></p>

<h3>Table of Contents</h3>

<ul id="markdown-toc">
  <li><a href="#what-is-new" id="markdown-toc-what-is-new">What is new</a>    <ul>
      <li><a href="#device-monitor" id="markdown-toc-device-monitor">Device Monitor</a>        <ul>
          <li><a href="#automatic-reconnection" id="markdown-toc-automatic-reconnection">Automatic reconnection</a></li>
          <li><a href="#ansi-escape-codes" id="markdown-toc-ansi-escape-codes">ANSI escape codes</a></li>
        </ul>
      </li>
      <li><a href="#build-system" id="markdown-toc-build-system">Build System</a>        <ul>
          <li><a href="#pre--post-actions" id="markdown-toc-pre--post-actions">Pre &amp; Post Actions</a></li>
          <li><a href="#stringification" id="markdown-toc-stringification">Stringification</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#upgrade" id="markdown-toc-upgrade">Upgrade</a></li>
  <li><a href="#stay-in-touch-with-us" id="markdown-toc-stay-in-touch-with-us">Stay in touch with us</a></li>
</ul>

<h2 id="what-is-new">What is new</h2>

<p>In this section, we are going to highlight the most important changes and
features introduced in PlatformIO Core 6.1. Please visit
<a href="https://docs.platformio.org/en/latest/core/history.html">PlatformIO Core 6.1 Release Notes</a>
for more detailed information.</p>

<h3 id="device-monitor">Device Monitor</h3>

<p>Today, it is difficult to imagine modern embedded development without a proper serial port monitor.
PlatformIO Core comes with an advanced <a href="https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html">Device Monitor</a>
packed with rich features and supports multiple data sources, including the RFC 2217 remote serial ports and raw sockets.</p>

<p>It is noteworthy that as distinct from the classic serial port monitors, PlatformIO’s Device Monitor
allows developers to apply custom filters to the INPUT/OUTPUT streams.
The most popular use cases using Device Monitor’s filters are logging data to the physical file,
adding timestamps with milliseconds for each new line, showing data in the hexadecimal representation, and decoding crash exceptions.
See the list with <a href="https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html#filters">built-in filters</a>.</p>

<h4 id="automatic-reconnection">Automatic reconnection</h4>

<p>Automatic device reconnection was the most requested feature by the PlatformIO Community. PlatformIO Core 6.1 comes
with automatic reconnection of the Device Monitor if a connection fails. This feature can be disabled with the
<a href="https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html#cmdoption-pio-device-monitor-no-reconnect">pio device monitor --no-reconnect</a> option.</p>

<p>The screencast below demonstrates the usage of the <code class="language-plaintext highlighter-rouge">time</code> filter and automatic reconnection:</p>

<p><img class="img-fluid screenshot mw-md-100" src="/assets/posts/2022-07-14-platformio-core-6-1-released/device-monitor-reconnecting.gif" /></p>

<h4 id="ansi-escape-codes">ANSI escape codes</h4>

<p>Another addition to the Device Monitor is the ability to disable encodings and transformations of device output
using the <a href="https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html#cmdoption-pio-device-monitor-raw">--raw</a> option.
In this mode, the Device Monitor does not apply any filters and outputs data in the raw format.</p>

<p>A good use case for the <code class="language-plaintext highlighter-rouge">raw</code> option is controlling a terminal (cursor location, color, font styling, etc.) using ANSI escape sequences.
The example below uses the <code class="language-plaintext highlighter-rouge">raw</code> mode and the <a href="https://registry.platformio.org/libraries/robtillaart/ANSI">robtillaart/ANSI</a> library
to send ANSI escape sequences from the embedded device.</p>

<p><img class="img-fluid screenshot mw-md-100" src="/assets/posts/2022-07-14-platformio-core-6-1-released/device-monitor-ansi-demo.gif" /></p>

<h3 id="build-system">Build System</h3>

<h4 id="pre--post-actions">Pre &amp; Post Actions</h4>

<p>PlatformIO Core 6.1 received significantly improved support for <a href="https://docs.platformio.org/en/latest/scripting/actions.html">Pre &amp; Post Actions</a>.
They can now be used in <a href="https://docs.platformio.org/en/latest/scripting/launch_types.html">PRE-type scripts</a>
for the targets even if they are not available at the declaration time.</p>

<p>Library authors also can benefit from this new feature. The Pre &amp; Post Actions are now allowed in
the <a href="https://docs.platformio.org/en/latest/manifests/library-json/fields/build/extrascript.html">extraScript</a>
when using the <a href="https://docs.platformio.org/en/latest/manifests/library-json/index.html">library.json</a> manifest.</p>

<p><strong>library.json</strong>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Foo</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1.0.0</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">build</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">extraScript</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">sign-firmware.py</span><span class="dl">"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>sign-firmware.py</strong>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">post_program_action</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">env</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Firmware has been built!"</span><span class="p">)</span>
    <span class="n">program_path</span> <span class="o">=</span> <span class="n">target</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">get_abspath</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Program path"</span><span class="p">,</span> <span class="n">program_path</span><span class="p">)</span>
    <span class="c1"># Use case: sign a firmware, do any manipulations with ELF, etc.
</span>    <span class="n">env</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="sa">f</span><span class="s">"sign --elf </span><span class="si">{</span><span class="n">program_path</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">global_env</span> <span class="o">=</span> <span class="n">DefaultEnvironment</span><span class="p">()</span>
<span class="n">global_env</span><span class="p">.</span><span class="n">AddPostAction</span><span class="p">(</span><span class="s">"$PROGPATH"</span><span class="p">,</span> <span class="n">post_program_action</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="stringification">Stringification</h4>

<p>Passing a macro flag (<code class="language-plaintext highlighter-rouge">-D</code>) with a string value to the compiler command has always been a pain.
This process requires special escaping of the shell symbols and macro-expansion to the valid C String constant
(<a href="https://docs.platformio.org/en/latest/projectconf/section_env_build.html#stringification">Stringification</a>) in the source code.</p>

<p>PlatformIO Core 6.1 extends the Build System API with a new <code class="language-plaintext highlighter-rouge">env.StringifyMacro(value)</code> helper function that
automatically escapes macro arguments. It is very useful for passing dynamic data such as program version,
Wi-Fi credentials, or user data (<a href="https://docs.platformio.org/en/latest/scripting/examples/asking_for_input.html">Asking for input (prompts)</a>).</p>

<p>The example below demonstrates how to read a username and pass it as a string using the <code class="language-plaintext highlighter-rouge">USER_NAME</code> macro:</p>

<p><strong>platformio.ini</strong>:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[env:my_env]</span>
<span class="py">platform</span> <span class="p">=</span> <span class="s">...</span>
<span class="py">extra_scripts</span> <span class="p">=</span> <span class="s">pre:prompt-user-data.py</span>
</code></pre></div></div>

<p><strong>prompt-user-data.py</strong>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Import</span><span class="p">(</span><span class="s">"env"</span><span class="p">)</span>

<span class="c1"># Ask user name
</span><span class="k">print</span><span class="p">(</span><span class="s">"Enter your name:"</span><span class="p">)</span>
<span class="n">user_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
<span class="n">env</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span>
    <span class="n">CPPDEFINES</span><span class="o">=</span><span class="p">[(</span><span class="s">"USER_NAME"</span><span class="p">,</span> <span class="n">env</span><span class="p">.</span><span class="n">StringifyMacro</span><span class="p">(</span><span class="n">user_name</span><span class="p">))],</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="upgrade">Upgrade</h2>

<ul>
  <li><strong>PlatformIO IDE</strong>: Left Sidebar &gt; PlatformIO (icon) &gt; Quick Access &gt; Upgrade PlatformIO Core</li>
  <li><strong>Terminal</strong>: Please run <code class="language-plaintext highlighter-rouge">pio upgrade</code> command in terminal.</li>
</ul>

<h2 id="stay-in-touch-with-us">Stay in touch with us</h2>

<p>Stay tuned to this blog or follow us on <a href="https://www.linkedin.com/company/platformio" target="_blank">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org" target="_blank">@PlatformIO_Org</a> to keep up to date with the latest news, articles and tips!</p>]]></content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><summary type="html"><![CDATA[PlatformIO Core 6.1 is out with refactored Device Monitor, Pre & Post Actions for library authors, Stringification helpers, and improved PlatformIO Unit Testing solution for test-driven embedded development]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2022-07-14-platformio-core-6-1-released/platformio-core-6-1-released.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2022-07-14-platformio-core-6-1-released/platformio-core-6-1-released.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>