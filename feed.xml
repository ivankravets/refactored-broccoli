<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://piolabs.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://piolabs.com/" rel="alternate" type="text/html" /><updated>2021-11-01T17:10:06+02:00</updated><id>https://piolabs.com/feed.xml</id><title type="html">PlatformIO Labs</title><subtitle>A proven technology used by global innovators and by over a million embedded developers around the world.</subtitle><author><name>PlatformIO Labs</name><email>contact@piolabs.com</email></author><entry><title type="html">PlatformIO Open Source October Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-october-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source October Updates" /><published>2021-11-01T00:00:00+02:00</published><updated>2021-11-01T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-october-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-october-2021-updates.html">&lt;p&gt;Welcome to the October 2021 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-october-news.jpg&quot; alt=&quot;PlatformIO Open Source October Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During October, we have released a new version of PlatformIO Core, added support for Zephyr v2.7.0, rolled out updates for the STMicroelectronics STM32, Nordic nRF52, Teensy and several other development platforms, resolved a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-core-52&quot; id=&quot;markdown-toc-platformio-core-52&quot;&gt;PlatformIO Core 5.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#zephyr-rtos-version-270-lts2&quot; id=&quot;markdown-toc-zephyr-rtos-version-270-lts2&quot;&gt;Zephyr RTOS version 2.7.0 (LTS2)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#st-stm32-dev-platform-v150&quot; id=&quot;markdown-toc-st-stm32-dev-platform-v150&quot;&gt;ST STM32 dev-platform v15.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nordic-nrf52-dev-platform-v90&quot; id=&quot;markdown-toc-nordic-nrf52-dev-platform-v90&quot;&gt;Nordic nRF52 dev-platform v9.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v70&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v70&quot;&gt;Atmel SAM dev-platform v7.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#teensy-dev-platform-v414&quot; id=&quot;markdown-toc-teensy-dev-platform-v414&quot;&gt;Teensy dev-platform v4.14&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino-core-for-mbed-enabled-devices-v252&quot; id=&quot;markdown-toc-arduino-core-for-mbed-enabled-devices-v252&quot;&gt;Arduino Core for mbed-enabled devices v2.5.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-core-52&quot;&gt;PlatformIO Core 5.2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/core/index.html&quot;&gt;PlatformIO Core&lt;/a&gt; is the heart of the whole PlatformIO ecosystem and we are excited to announce the next v5.2 release. This milestone we again received helpful feedback from our community, which let us identify and tackle many issues and prepare a lot of great improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Boosted Debugging Performance&lt;/strong&gt;. The Unified Debugger codebase has been migrated to the pure Python 3 Asynchronous I/O stack which allowed us to significantly improve the overall debugging experience even in CLI mode!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unit Tests Debugging&lt;/strong&gt;. Debugging tests is now as easy as adding a single line to your configuration file.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Debugger for Native Platform&lt;/strong&gt;. Embedded developers can now debug their applications on host machines using the same usual workflow.&lt;/li&gt;
  &lt;li&gt;The PlatformIO build engine has been upgraded to the latest SCons 4.2.&lt;/li&gt;
  &lt;li&gt;Updated package management system with a more error-proof and intuitive package publishing process.&lt;/li&gt;
  &lt;li&gt;Updated static analysis tools to the latest available versions. Now developers can identify even more potential bugs, vulnerabilities, and security threats.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.2.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information and use &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html&quot;&gt;pio upgrade&lt;/a&gt; command to update to the latest version.&lt;/p&gt;

&lt;h2 id=&quot;zephyr-rtos-version-270-lts2&quot;&gt;Zephyr RTOS version 2.7.0 (LTS2)&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for a new release v2.7.0 of Zephyr Project - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in v2.7.0:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bluetooth Audio, Direction Finding, and Mesh improvements&lt;/li&gt;
  &lt;li&gt;New Action-based Power Management API&lt;/li&gt;
  &lt;li&gt;Improved thread safety&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Zephyr framework&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0&quot;&gt;Release notes for v2.7.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html&quot;&gt;Documentation for Zephyr framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms&quot;&gt;Supported development platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;st-stm32-dev-platform-v150&quot;&gt;ST STM32 dev-platform v15.0&lt;/h2&gt;

&lt;p&gt;The latest release of the &lt;a href=&quot;https://platformio.org/platforms/ststm32&quot;&gt;ST STM32&lt;/a&gt; platform comes with several new boards and dev-kits, support for the latest Zephyr v2.7.0, updated Arduino cores and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/bw_swan_r5.html&quot;&gt;BluesWireless Swan R5&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/disco_b_u585i_iot02a.html&quot;&gt;ST B-U585I-IOT02A Discovery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/disco_h735ig.html&quot;&gt;STM32H735G-DK Discovery kit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/nucleo_g0b1re.html&quot;&gt;ST Nucleo G0B1RE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/nucleo_l010rb.html&quot;&gt;ST Nucleo L010RB&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/nucleo_u575zi_q.html&quot;&gt;ST Nucleo U575ZI-Q&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/storm32_v1_31_rc.html&quot;&gt;STorM32 BGC v1.31 RC&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.7.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated STM32 Arduino Core to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.1.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/stm32duino/Arduino_Core_STM32/releases/tag/2.1.0&quot;&gt;relase notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.5.2&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.5.2&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated the OpenOCD package to the latest v0.11&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements (#569, #570, #574)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the ST STM32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nordic-nrf52-dev-platform-v90&quot;&gt;Nordic nRF52 dev-platform v9.0&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/nordicnrf52&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platform brings support for Zephyr 2.7.0, updated Arduino cores and several minor bufixes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/adafruit_ledglasses_nrf52840.html&quot;&gt;Adafruit LED Glasses Driver nRF52840&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/nicla_sense_me.html&quot;&gt;Arduino Nicla Sense ME&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.7.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.5.2&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.5.2&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Adafruit core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.1.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/1.1.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated the OpenOCD package to the latest v0.11&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements (#128)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Nordic nRF52 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-nordicnrf52/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v70&quot;&gt;Atmel SAM dev-platform v7.0&lt;/h2&gt;

&lt;p&gt;The latest &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; v3.3.1 is mostly a maintenance release that brings several important bugfixes and improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.7.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.7.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Adafruit core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.7.5&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/ArduinoCore-samd/releases/tag/1.7.5&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated the OpenOCD package to the latest v0.11&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the atmelsam dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelsam.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelsam/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;teensy-dev-platform-v414&quot;&gt;Teensy dev-platform v4.14&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/teensy&quot;&gt;Teensy&lt;/a&gt; dev-platform comes with support for the latest Teensyduino:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Teensyduino to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.55&lt;/code&gt; (&lt;a href=&quot;https://github.com/PaulStoffregen/cores/releases/tag/1.55&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Teensy dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/teensy.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-teensy/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;arduino-core-for-mbed-enabled-devices-v252&quot;&gt;Arduino Core for mbed-enabled devices v2.5.2&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;ST STM32&lt;/a&gt;, &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Nordic nRF52&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/raspberrypi.html&quot;&gt;Raspberry Pi RP2040&lt;/a&gt; dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.5.2. According to the &lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.5.2&quot;&gt;release notes&lt;/a&gt;, v2.5.2 brings a lot of bugfixes and improvements in core and bundled libraries.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the October 2021 updates of PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-october-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-october-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Debugging with PlatformIO: Part 1. Back to the Basics</title><link href="https://piolabs.com/blog/insights/debugging-introduction.html" rel="alternate" type="text/html" title="Debugging with PlatformIO: Part 1. Back to the Basics" /><published>2021-09-20T00:00:00+03:00</published><updated>2021-09-20T00:00:00+03:00</updated><id>https://piolabs.com/blog/insights/debugging-introduction</id><content type="html" xml:base="https://piolabs.com/blog/insights/debugging-introduction.html">&lt;p&gt;Debugging is an inseparable part of the development process. People make mistakes, so our code doesn’t do what we expect once in a while. Often such problems happen at the worst possible time. That’s why it’s a good idea to master debugging techniques and skills to more precisely isolate the source code of a problem and fix it in a timely manner.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the &lt;strong&gt;Debugging with PlatformIO&lt;/strong&gt; series, we will be exploring the debugging capabilities of the PlatformIO ecosystem. This series will walk you through the core concepts of the debug workflow implemented in &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debugging.html&quot;&gt;PlatformIO Unified Debugger&lt;/a&gt;. In each part, we will explore new features and techniques which can greatly help us out when we bump into a thorny problem in a real project.&lt;/p&gt;

&lt;p&gt;This series will cover a broad range of topics, starting from the basics like debugging a simple application running on your machine up to advanced topics like debugging a suite of unit tests on a remote embedded target. In each following post, we will use a new combination of debug probes and targets to show how easy it’s to switch between hardware simply by changing several lines in the PlatformIO configuration file.&lt;/p&gt;

&lt;p&gt;Although throughout this series we will be using the PlatformIO IDE for VScode, PlatformIO Unified Debugger supports many other Desktop and Cloud development environments, including &lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/eclipse.html&quot;&gt;Eclipse&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/clion.html&quot;&gt;JetBrains CLion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first part provides a brief introduction to the debugging concept and gives a basic overview of debugging process used in the PlatformIO IDE for VSCode without any reference to the embedded software development. Setting breakpoints, adding watch expressions, and other essential features of the debugger are covered in this part.&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot; id=&quot;markdown-toc-prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#basic-principles&quot; id=&quot;markdown-toc-basic-principles&quot;&gt;Basic Principles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-unified-debugger&quot; id=&quot;markdown-toc-platformio-unified-debugger&quot;&gt;PlatformIO Unified Debugger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot; id=&quot;markdown-toc-getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#working-with-debugger&quot; id=&quot;markdown-toc-working-with-debugger&quot;&gt;Working with Debugger&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#debug-view&quot; id=&quot;markdown-toc-debug-view&quot;&gt;Debug View&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;This article uses the following components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html&quot;&gt;VSCode with installed PlatformIO IDE extension&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://platformio.org/platforms/native&quot;&gt;Native Development Platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;basic-principles&quot;&gt;Basic Principles&lt;/h2&gt;

&lt;p&gt;Modern software may be extremely complex, and sooner or later, we’ll find ourselves in a situation when some part of the code doesn’t work as expected. It’s not always clear what causes our code to behave incorrectly or even crash, so we need to get involved and figure out why and where an error occurs in our program. That process of finding and fixing such errors (so-called “bugs”) is called &lt;em&gt;Debugging&lt;/em&gt;. Even though debugging is mostly a unique experience, a few general debugging principles can be picked out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reproduce the problem reliably&lt;/li&gt;
  &lt;li&gt;Locate the source of the problem&lt;/li&gt;
  &lt;li&gt;Understand the root cause of the problem&lt;/li&gt;
  &lt;li&gt;Find a solution for the problem&lt;/li&gt;
  &lt;li&gt;Apply the solution and test the fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While in simple projects we can make do with printing messages directly to the debug console as the code executes (commonly known as “Print Debugging”), it’s definitely a waste of time when it comes to reasonably complex projects. In such cases, we need more advanced and comprehensive instruments to better understand what actually is happening inside our code. Such tools are called &lt;em&gt;debuggers&lt;/em&gt;. In general, debuggers allow working with the code interactively, controlling the execution line-by-line, examining CPU registers, inspecting variables, etc.&lt;/p&gt;

&lt;p&gt;It’s also worth mentioning that to make use of a debugger we need to compile our code with debugging information (e.g. function locations). In general, such information is inserted by a compiler through the use of debugging symbols. An executable with debugging symbols can be executed as a regular binary, but it may be a slightly bigger size and run a bit slower due to disabled optimizations.&lt;/p&gt;

&lt;h2 id=&quot;platformio-unified-debugger&quot;&gt;PlatformIO Unified Debugger&lt;/h2&gt;

&lt;p&gt;Bringing up a debug configuration might be a daunting task. Developers need to get through complex UI windows just to configure a debugger before a debug session can be launched.&lt;/p&gt;

&lt;p&gt;PlatformIO Unified Debugger is a user-friendly and extensible unified debugging environment with a set of advanced instruments, providing modern and powerful features to speed up, yet simplify, the creation and delivery of modern applications. A zero debugging configuration with support for the most popular debugging probes and compatibility between IDEs/OSes allowed to simplify the debugging process.&lt;/p&gt;

&lt;p&gt;Developers can finally forget about complex UI windows which they need to pre-configure before a simple “Hello World!” debug session. No need to know any aspects about the debugging server or how to configure it because PlatformIO Unified Debugger does all the heavy lifting behind the scenes.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;First, we need to install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;native&lt;/code&gt; development platform. PlatformIO doesn’t install any toolchains automatically for the native dev-platform and uses the toolchain (preferably based on GCC) native for your OS (on Windows it’s recommended to install MinGW and make it available via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable). Let’s install the native dev-platform via PlatformIO Home:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-1.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-1.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the sake of simplicity, let’s write a simple application that sorts an array of integers using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Quicksort&quot;&gt;Quicksort&lt;/a&gt; algorithm. Instead of creating our project from scratch, we can import a “Hello World” example using the PlatformIO Home page:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-2.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-2.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then simply replace the default code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.c&lt;/code&gt; with the following code:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Getting started with PlatformIO Unified Debugger!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;86&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we try to build the imported project, we should see the successful result:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note that the goal of this post is to focus on the debug workflow, so don’t rely on the code presented above in real projects.&lt;/p&gt;

&lt;h2 id=&quot;working-with-debugger&quot;&gt;Working with Debugger&lt;/h2&gt;

&lt;p&gt;Now we are ready to start debugging! To launch a new debug session we can use the following options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Debug: Start debugging from the top menu&lt;/li&gt;
  &lt;li&gt;Start Debugging option from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quick Access&lt;/code&gt; menu&lt;/li&gt;
  &lt;li&gt;Hotkey button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F5&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our program will start executing and then stop at the first breakpoint. Keep in mind that, by default, PlatformIO instructs the debugger to stop at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function. Let’s take a closer look at our project using the debugger and its features.&lt;/p&gt;

&lt;h3 id=&quot;debug-view&quot;&gt;Debug View&lt;/h3&gt;

&lt;p&gt;When we start a debug session, the IDE switches to the “Debug View” with several panes which provide easy access to the debugger’s functionality:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-5.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-5.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s look around and examine the most important elements.&lt;/p&gt;

&lt;h4 id=&quot;controlling-the-program-execution&quot;&gt;Controlling the program execution&lt;/h4&gt;

&lt;p&gt;The Debugger View provides complete control of the debugging process. You can access most of the essential control actions such as:&lt;/p&gt;

&lt;figure class=&quot;figure mb-4&quot; align=&quot;center&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-6.png&quot; alt=&quot;Debug Control Actions&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Control Actions
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continue/Pause (F5)&lt;/code&gt; runs the program until it locates a breakpoint and then stops.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Step Over (F10)&lt;/code&gt; executes the current statement and all functions that the statement calls and doesn’t suspend the execution until functions return.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Step Into (F11)&lt;/code&gt; advances the execution to the next statement. If the current statement is a function call, then the debugger steps into that function.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Step Out (Shift+F11)&lt;/code&gt; moves the execution out of the current function and back to the statement where the function was called.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Restart (Ctrl+Shift+F5)&lt;/code&gt; is a convenient shortcut for two operations: stopping the debug session and restarting the debugger.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stop (Shift+F5)&lt;/code&gt; stops the debug session and terminates the program.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;managing-breakpoints&quot;&gt;Managing Breakpoints&lt;/h4&gt;

&lt;p&gt;Breakpoints are one of the most important features of the debugging process. A breakpoint is a mechanism to suspend the execution of an application to inspect the state of variables with the ability to modify them to figure out why a problem is occurring. Usually, breakpoints are shown as red-filled circles in the editor margin.&lt;/p&gt;

&lt;figure class=&quot;figure mb-4&quot; align=&quot;center&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-7.png&quot; alt=&quot;Breakpoints Window&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Breakpoints Window
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We can toggle breakpoints directly in the editor pane by clicking on the left margin next to the current line or using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F9&lt;/code&gt; hotkey. A more precise configuration like group enabling, disabling, or setting breakpoint conditions can be done in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Breakpoints&lt;/code&gt; section. In the next posts in this series, we will take a deeper look at more advanced breakpoint configuration, including conditional and data breakpoints.&lt;/p&gt;

&lt;h4 id=&quot;call-stack&quot;&gt;Call Stack&lt;/h4&gt;

&lt;p&gt;Each time when the debugger pauses the execution (due to a breakpoint or during stepping), the sequence of function calls is displayed in the “Call Stack” window:&lt;/p&gt;

&lt;figure class=&quot;figure mb-4&quot; align=&quot;center&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-8.png&quot; alt=&quot;Call Stack Window&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Call Stack Window
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The “Call Stack” window is useful when we need to examine the actual execution flow of an application. It shows the name of each called function, its address in memory, the file name and the line number where the function is defined. We can jump between stack frames and the debugger will automatically update the variables and registers. A green line will show where the execution pointer is currently located according to the selected stack frame.&lt;/p&gt;

&lt;h4 id=&quot;working-with-variables&quot;&gt;Working with Variables&lt;/h4&gt;

&lt;p&gt;The examination of variables is one of the essential steps for understanding why an application operates incorrectly. When the debugger is suspended, the “Variables” window allows us to inspect and modify the variables available in the context where an application is paused:&lt;/p&gt;

&lt;figure class=&quot;figure mb-4&quot; align=&quot;center&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-9.png&quot; alt=&quot;Variables Window&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Variables Window
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If we double-click the value for a variable, we can edit its value. It may be useful when there is a need to verify how an application would work in a certain condition at runtime.&lt;/p&gt;

&lt;h4 id=&quot;watch-expressions&quot;&gt;Watch Expressions&lt;/h4&gt;

&lt;p&gt;The Watch window allows us to specify a variable (or an expression) that will be reevaluated and displayed every time the debugger stops:&lt;/p&gt;

&lt;figure class=&quot;figure mb-4&quot; align=&quot;center&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-09-20-debugging-introduction/debugging-introduction-10.png&quot; alt=&quot;Watch Window&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Watch Window
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To add a new watch expression click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; button in the top right corner of the panel, type the expression into the text field, and press Enter to save it. The expression will be evaluated each time when the code hits a breakpoint or when we step through the code. Unlike the frame-specific “Variables” window, the “Watch” window always shows the variables that we’ve added.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;All developers make mistakes, and as a result, bugs show up. Learning how to debug effectively takes time, but in the long run, it can make the development process less stressful when an unexpected side effect happens. A debugger in any programming language is an essential instrument for tracking down problems in code, especially in a large and complex codebase.&lt;/p&gt;

&lt;p&gt;In this post, we only scratched the surface of capabilities available in PlatformIO Unified Debugger. There is a lot of useful functionality we didn’t cover in this post which can greatly help us in real projects. The next post will be more embedded-specific, we’ll look at some more advanced features, such as peripheral and disassembly views, advanced breakpoints, and much more!&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><category term="featured" /><summary type="html">Debugging is an inseparable part of the development process. People make mistakes, so our code doesn’t do what we expect once in a while. Often such problems happen at the worst possible time. That’s why it’s a good idea to master debugging techniques and skills to more precisely isolate the source code of a problem and fix it in a timely manner.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-09-20-debugging-introduction/title.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-09-20-debugging-introduction/title.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Core 5.2 🚀</title><link href="https://piolabs.com/blog/news/platformio-core-5-2-released.html" rel="alternate" type="text/html" title="PlatformIO Core 5.2 🚀" /><published>2021-09-13T00:00:00+03:00</published><updated>2021-09-13T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-core-5-2-released</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-core-5-2-released.html">&lt;p&gt;We are happy to announce the next release of PlatformIO Core with the boosted PlatformIO Debugging performance, support for the latest SCons 4.2, improved package management system, and many other minor fixes and improvements.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-released.png&quot; alt=&quot;PlatformIO Core 5.2 🚀&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-new&quot; id=&quot;markdown-toc-what-is-new&quot;&gt;What is New&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#debugging&quot; id=&quot;markdown-toc-debugging&quot;&gt;Debugging&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build-system&quot; id=&quot;markdown-toc-build-system&quot;&gt;Build System&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#package-management&quot; id=&quot;markdown-toc-package-management&quot;&gt;Package Management&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#static-code-analysis&quot; id=&quot;markdown-toc-static-code-analysis&quot;&gt;Static Code Analysis&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#upgrade&quot; id=&quot;markdown-toc-upgrade&quot;&gt;Upgrade&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-new&quot;&gt;What is New&lt;/h2&gt;

&lt;p&gt;In this section, we are going to highlight the most important changes and features introduced in PlatformIO Core 5.2.
Please visit &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.2.0&quot; target=&quot;_blank&quot;&gt;PlatformIO 5.2.0 Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h3 id=&quot;debugging&quot;&gt;Debugging&lt;/h3&gt;

&lt;p&gt;In our ongoing effort to improve the debugging experience in PlatformIO, we’ve managed to prepare several great new features and enhancements that will help developers debug their projects in a much faster and effective way.&lt;/p&gt;

&lt;h4 id=&quot;boosted-performance&quot;&gt;Boosted Performance&lt;/h4&gt;

&lt;p&gt;PlatformIO Core 5.2 brings significantly boosted debugging performance by migrating the codebase to the pure Python 3 Asynchronous I/O stack. This approach solves previous issues caused by the Twisted engine that depends on operating system libraries and 3rd-party Python packages. Thanks to these improvements, developers can get a blazingly fast and responsive debugging experience even in CLI mode!&lt;/p&gt;

&lt;!-- Youtube video --&gt;
&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;ytSrc&amp;quot;: &amp;quot;NngpaA2klAY&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img src=&quot;/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-debug-demo-cover.jpg&quot; class=&quot;img-fluid&quot; alt=&quot;PlatformIO Core 5.2 🚀&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;unit-tests-debugging&quot;&gt;Unit Tests Debugging&lt;/h4&gt;

&lt;p&gt;It’s an incredibly frustrating situation when a test fails for no obvious reason. Printing variables to the console while trying to find where your test is misbehaving can take a significant amount of time and patience. On the other hand, a full-featured debug session with the ability to step through the code of your unit tests can give all the necessary information to hunt down and isolate bugs in your codebase. PlatformIO Core 5.2 makes debugging tests incredibly easy simply by adding a &lt;a href=&quot;https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-test&quot;&gt;single line&lt;/a&gt; your configuration file:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:debug_unit_tests]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ststm32&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arduino&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nucleo_f401re&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Use a test file located in the test directory as the entry point
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;debug_test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-unit-tests.gif&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-unit-tests.gif&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;debugger-for-native-platform&quot;&gt;Debugger for Native Platform&lt;/h4&gt;

&lt;p&gt;Even though PlatformIO was created to help develop embedded projects, it’s always handy to be able to run and debug projects locally without the need to upload the code to an embedded target. Starting with PlatformIO Core 5.2, embedded developers can debug their applications on host machines using the same usual workflow.&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-native.gif&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-native.gif&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;debugging-in-cli-mode-on-windows&quot;&gt;Debugging in CLI Mode on Windows&lt;/h4&gt;

&lt;p&gt;Another commonly requested feature implemented in PlatformIO Core 5.2 is debugging projects on Windows OS via the command-line interface. Although the CLI might not be as user-friendly as a feature-rich IDE, it’s still a great instrument to quickly and efficiently find bugs in your codebase.&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-windows-cli.gif&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-09-13-platformio-core-5-2-released/debug-windows-cli.gif&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;build-system&quot;&gt;Build System&lt;/h3&gt;

&lt;h4 id=&quot;scons-42&quot;&gt;SCons 4.2&lt;/h4&gt;

&lt;p&gt;The PlatformIO Core 5.2 build engine has been upgraded to the latest &lt;a href=&quot;https://scons.org/&quot; target=&quot;_blank&quot;&gt;SCons 4.2 - a next-generation software construction tool&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/projectconf/advanced_scripting.html&quot;&gt;Configuration files are Python scripts&lt;/a&gt; – use the power of a real programming language to solve build problems&lt;/li&gt;
  &lt;li&gt;Built-in reliable and automatic dependency analysis&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;package-management&quot;&gt;Package Management&lt;/h3&gt;

&lt;p&gt;PlatformIO Core 5.2 introduces the updated package management system with a more error-proof and intuitive package publishing process. Now, any package manifest is validated on the client side and its metadata is shown in a readable format before publishing it to the PlatformIO Trusted Registry.&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-09-13-platformio-core-5-2-released/package-management-updates.gif&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-09-13-platformio-core-5-2-released/package-management-updates.gif&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Improved checks for conflicting names and duplicates will catch accidental errors and typos in package manifests and won’t allow developers to publish erroneous packages to the PlatformIO Trusted Registry.&lt;/p&gt;

&lt;p&gt;Additionally, a new CLI option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--non-interactive&lt;/code&gt; might come in handy for automated uploads directly from CI/CD services in your deployment pipeline.&lt;/p&gt;

&lt;h3 id=&quot;static-code-analysis&quot;&gt;Static Code Analysis&lt;/h3&gt;

&lt;p&gt;We’ve updated backend static analysis tools to the latest available versions. Now developers can identify even more potential bugs, vulnerabilities and security threats.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/plus/check-tools/clang-tidy.html&quot;&gt;Clang-Tidy&lt;/a&gt; v12.0.1 with new modules and extended checks list&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/plus/check-tools/cppcheck.html&quot;&gt;Cppcheck&lt;/a&gt; v2.5.0 with improved code analysis and MISRA improvements&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/plus/check-tools/pvs-studio.html&quot;&gt;PVS-Studio&lt;/a&gt; v7.14 with support for intermodular analysis, improved MISRA support and new diagnostics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upgrade&quot;&gt;Upgrade&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PlatformIO IDE&lt;/strong&gt;: Left Sidebar &amp;gt; PlatformIO (icon) &amp;gt; Quick Access &amp;gt; Upgrade PlatformIO Core&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Terminal&lt;/strong&gt;: Please run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio upgrade&lt;/code&gt; command in terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><category term="featured" /><summary type="html">We are happy to announce the next release of PlatformIO Core with the boosted PlatformIO Debugging performance, support for the latest SCons 4.2, improved package management system, and many other minor fixes and improvements.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-released.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-09-13-platformio-core-5-2-released/platformio-core-5-2-released.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Microsoft leverages PlatformIO for its course “IoT for Beginners”</title><link href="https://piolabs.com/blog/news/microsoft-leverages-platformio.html" rel="alternate" type="text/html" title="Microsoft leverages PlatformIO for its course “IoT for Beginners”" /><published>2021-09-06T00:00:00+03:00</published><updated>2021-09-06T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/microsoft-leverages-platformio</id><content type="html" xml:base="https://piolabs.com/blog/news/microsoft-leverages-platformio.html">&lt;p&gt;IoT — the Internet of Things — is one of the biggest growth areas in technology, and one that, to me, is very exciting. You start with a device like a microcontroller, sprinkle some sensors, dust with code, mix in some cloud services and poof! You have smart cities, self-driving cars, automated farming, robotic supermarkets, or devices that can clean your toilet after you shout at Alexa for the third time.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-1.png&quot; alt=&quot;PlatformIO lowers the barriers to entry the IoT market as much as possible&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my day job at Microsoft, I often get asked how to get started with IoT. Not just “how do I connect my device to the cloud”, but really get started with understanding devices, sensors, actuators, and writing those all-important first lines of code.&lt;/p&gt;

&lt;p&gt;This is why a few of us spent a number of months putting together &lt;a href=&quot;https://github.com/microsoft/IoT-For-Beginners&quot; target=&quot;_blank&quot;&gt;IoT for beginners&lt;/a&gt;, a 24-lesson curriculum designed for teachers, students and learners of all types who want to learn IoT. This curriculum uses project-guided learning, built around the journey of food from farm to table, covering digital agriculture, logistics, manufacturing, retail, and consumer products.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-logo.png&quot; alt=&quot;PlatformIO featured in Microsoft course IoT for Beginners&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We wanted to make sure we covered a range of hardware choices – Arduino for those interested in microcontrollers, and Raspberry Pis for those interested in single-board computers. When using this hardware, we also wanted to lower the barriers to entry as much as possible. We needed to pick an ecosystem for components to reduce the need to solder and understand electronics, and we needed to ensure the software we recommended worked to support the learner, not be another hurdle to overcome.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-2.png&quot; alt=&quot;PlatformIO is the preferred tool for Microsoft IoT curriculum&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was an easy decision to pick PlatformIO as our development tool of choice for microcontroller development. Although other tools are available, such as Arduino’s own IDE, PlatformIO is our preferred tool for this curriculum for several reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Visual Studio Code integration&lt;/strong&gt; – VS Code is an incredibly powerful developer text editor, with an extension model that supports many different languages and tools. Using PlatformIO meant learners can use the same tool to not only program their microcontrollers, but also to build the cloud services that make up modern IoT applications. One tool for C++ on the device, Python in cloud-based serverless functions, and JavaScript and HTML for data visualization web sites.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Integration with the Microsoft C/C++ language tooling&lt;/strong&gt; – The language tooling for C/C++ in VS Code is incredibly powerful, providing the intellisense, code completion, navigation, and other features that modern developers expect from their tools. All this comes for free when developing Arduino applications in C/C++.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Library management&lt;/strong&gt; – Arduino library management can be confusing, especially for beginners. Knowing which libraries to add to your project, setting up additional library paths, and managing library versions are all complexities that beginners don’t want to handle, they just want the code to work. Being able to manage these from a single project configuration file removes these complexities, and allows developers to just grab some code, compile it and go, rather than have to know what libraries are needed and manually work to install them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;All in one tooling&lt;/strong&gt; – Developing for embedded devices can mean a headache of installing different tools, sometimes breaking your existing tooling for other platforms. PlatformIO takes this headache away by installing everything you need in an isolated way. We knew we could instruct learners to install PlatformIO and pick their board, and it wouldn’t break anything they already have installed, and wouldn’t limit what they could do in the future with different hardware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Multi-platform support&lt;/strong&gt; – PlatformIO and VS Code can run on Windows, macOS, Linux and even on Raspberry Pi OS, meaning most developers can get started using it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Preparing learners for the future&lt;/strong&gt; – Although our IoT for beginners course only focuses on Arduino for microcontroller development with the Wio Terminal, we wanted to ensure the skills they learned transfer to other boards and frameworks. By using PlatformIO they would be able to continue their IoT journey using the same tools, and not have to start their learning again outside of their comfort zone.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Grab your microcontroller and some &lt;a href=&quot;https://www.seeedstudio.com/IoT-for-beginners-with-Seeed-and-Microsoft-Wio-Terminal-Starter-Kit-p-5006.html&quot; target=&quot;_blank&quot;&gt;sensors from our friends at Seeed Studio&lt;/a&gt;, fire up VS Code, install PlatformIO and get learning.&lt;/p&gt;

&lt;p&gt;Without further ado, please meet &lt;a href=&quot;https://github.com/microsoft/IoT-For-Beginners&quot; target=&quot;_blank&quot;&gt;IoT For Beginners: A Curriculum&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-roadmap.jpg&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-roadmap.jpg&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;about-microsoft&quot;&gt;About Microsoft&lt;/h2&gt;

&lt;p&gt;Microsoft Corporation was founded in 1975 and is a leading global vendor of computer software and hardware that develops, licenses and supports a wide range of products, services, devices, and solutions, with a mission to empower every person and every organization on the planet to achieve more.&lt;/p&gt;

&lt;h2 id=&quot;about-platformio-labs&quot;&gt;About PlatformIO Labs&lt;/h2&gt;

&lt;p&gt;PlatformIO Labs is the corporate sponsor behind the PlatformIO open-source project. PlatformIO is a next-generation, professional collaborative platform for embedded development that enables customers to save resources and time by vastly reducing the expenses and labor associated with creating and maintaining product software. Its modern architecture is unmatched in the embedded tools market, and the result benefits developers everywhere by simplifying complexity and increasing productivity. PlatformIO Labs is a privately-held company headquartered in Tallinn, Estonia and with an R&amp;amp;D branch in Ukraine. To learn more, follow them on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt;, Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt;, or visit &lt;a href=&quot;https://piolabs.com/&quot;&gt;piolabs.com&lt;/a&gt;.&lt;/p&gt;</content><author><name>Jim Bennett</name></author><category term="blog" /><category term="news" /><summary type="html">IoT — the Internet of Things — is one of the biggest growth areas in technology, and one that, to me, is very exciting. You start with a device like a microcontroller, sprinkle some sensors, dust with code, mix in some cloud services and poof! You have smart cities, self-driving cars, automated farming, robotic supermarkets, or devices that can clean your toilet after you shout at Alexa for the third time.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-logo.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-09-06-microsoft-leverages-platformio/iot-for-beginners-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source August Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-august-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source August Updates" /><published>2021-09-01T00:00:00+03:00</published><updated>2021-09-01T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-august-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-august-2021-updates.html">&lt;p&gt;Welcome to the August 2021 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-august-news.jpg&quot; alt=&quot;PlatformIO Open Source August Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During August, we updated support for the latest STM32Cube versions, rolled out updates for the Atmel AVR/megaAVR, Espressif32/8266 and Nordic nRF52 development platforms, resolved a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#st-stm32-dev-platform-v142&quot; id=&quot;markdown-toc-st-stm32-dev-platform-v142&quot;&gt;ST STM32 dev-platform v14.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nordic-nrf52-dev-platform-v83&quot; id=&quot;markdown-toc-nordic-nrf52-dev-platform-v83&quot;&gt;Nordic nRF52 dev-platform v8.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-avr-dev-platform-v34&quot; id=&quot;markdown-toc-atmel-avr-dev-platform-v34&quot;&gt;Atmel AVR dev-platform v3.4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-megaavr-dev-platform-v15&quot; id=&quot;markdown-toc-atmel-megaavr-dev-platform-v15&quot;&gt;Atmel megaAVR dev-platform v1.5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif-8266-v32&quot; id=&quot;markdown-toc-espressif-8266-v32&quot;&gt;Espressif 8266 v3.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif-32-dev-platform-v332&quot; id=&quot;markdown-toc-espressif-32-dev-platform-v332&quot;&gt;Espressif 32 dev-platform v3.3.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino-core-for-mbed-enabled-devices-v241&quot; id=&quot;markdown-toc-arduino-core-for-mbed-enabled-devices-v241&quot;&gt;Arduino Core for mbed-enabled devices v2.4.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;st-stm32-dev-platform-v142&quot;&gt;ST STM32 dev-platform v14.2&lt;/h2&gt;

&lt;p&gt;The latest release of the &lt;a href=&quot;https://platformio.org/platforms/ststm32&quot;&gt;ST STM32&lt;/a&gt; platform comes with updated STM32Cube packages and Arduino-mbed core v2.4.1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated STM32Cube packages:
    &lt;ul&gt;
      &lt;li&gt;STM32CubeF0 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.11.3&lt;/code&gt;, STM32CubeF1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.4&lt;/code&gt;, STM32CubeF2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.9.3&lt;/code&gt;, STM32CubeF3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.11.3&lt;/code&gt;, STM32CubeF4 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.26.2&lt;/code&gt;, STM32CubeF7 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.16.1&lt;/code&gt;, STM32CubeG0 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.5.0&lt;/code&gt;, STM32CubeG4 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.4.0&lt;/code&gt;, STM32CubeH7 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.9.0&lt;/code&gt;, STM32CubeL0 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.12.1&lt;/code&gt;, STM32CubeL1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.10.3&lt;/code&gt;, STM32CubeL4 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.17.0&lt;/code&gt;, STM32CubeL5 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.4.0&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.4.1&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.4.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the ST STM32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nordic-nrf52-dev-platform-v83&quot;&gt;Nordic nRF52 dev-platform v8.3&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/nordicnrf52&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platform brings support for two new boards, the latest stable Adafruit Arduino core v1.0 and Arduino-mbed core v2.4.1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/laird_bl653_dvk.html&quot;&gt;Laird Connectivity BL653 Development Kit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/nordicnrf52/ublox_bmd345eval_nrf52840.html&quot;&gt;u-blox BMD-345-EVAL&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Arduino Adafruit Сore to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.0.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/0.24.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.4.1&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.4.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Nordic nRF52 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-nordicnrf52/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-avr-dev-platform-v34&quot;&gt;Atmel AVR dev-platform v3.4&lt;/h2&gt;

&lt;p&gt;The latest release of the &lt;a href=&quot;https://platformio.org/platforms/atmelavr&quot;&gt;Atmel AVR&lt;/a&gt; v3.4.0 brings updates for highly customizable Arduino cores by MCUdude, the latest “simavr” packages and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated MCUdude’s cores:
    &lt;ul&gt;
      &lt;li&gt;MajorCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.1.3&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MajorCore/releases/tag/v2.1.3&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;MegaCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.1.3&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MegaCore/releases/tag/v2.1.3&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;MightyCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.1.3&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MightyCore/releases/tag/v2.1.3&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;MiniCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.1.3&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MiniCore/releases/tag/v2.1.3&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;MicroCore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.1.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MicroCore/releases/tag/v2.1.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated simavr packages to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.7.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Fixed default clock source for several boards from ATTinyCore&lt;/li&gt;
  &lt;li&gt;Fixed memory sizes for SparkFun ATmega128RFA1 Dev Board&lt;/li&gt;
  &lt;li&gt;Minor fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Atmel AVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-megaavr-dev-platform-v15&quot;&gt;Atmel megaAVR dev-platform v1.5&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelmegaavr&quot;&gt;Atmel megaAVR&lt;/a&gt; v1.5.0 comes with updated Arduino cores and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated MegaTinyCore to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.4.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/SpenceKonde/megaTinyCore/releases/tag/2.4.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated MegaCoreX to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.0.9&lt;/code&gt; (&lt;a href=&quot;https://github.com/MCUdude/MegaCoreX/releases/tag/v1.0.9&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Atmel megaAVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif-8266-v32&quot;&gt;Espressif 8266 v3.2&lt;/h2&gt;

&lt;p&gt;The latest revision of the &lt;a href=&quot;https://platformio.org/platforms/espressif8266&quot;&gt;Espressif 8266&lt;/a&gt; dev-platform brings support for the latest Arduino core v3.0.2 together with the latest GCC toolchain v10.3.0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Arduino Core to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.0.2&lt;/code&gt; (&lt;a href=&quot;https://github.com/esp8266/Arduino/releases/tag/3.0.2&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated toolchain packages to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v10.3.0-1757bed&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Espressif 8266 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/espressif8266.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-espressif8266/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif-32-dev-platform-v332&quot;&gt;Espressif 32 dev-platform v3.3.2&lt;/h2&gt;

&lt;p&gt;The latest &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif32&lt;/a&gt; v3.3.2 is mostly a maintenance release that brings several important bugfixes and improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better handling of custom ESP-IDF packages&lt;/li&gt;
  &lt;li&gt;Fixed RAM size for M5Stack Core2 and M5Stack FIRE&lt;/li&gt;
  &lt;li&gt;Fixed an issue with whitespace characters in file names specified as binary data&lt;/li&gt;
  &lt;li&gt;Fixed flash mode for the TinyPICO board&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Espressif32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/espressif32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-espressif32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;arduino-core-for-mbed-enabled-devices-v241&quot;&gt;Arduino Core for mbed-enabled devices v2.4.1&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;ST STM32&lt;/a&gt;, &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Nordic nRF52&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/raspberrypi.html&quot;&gt;Raspberry Pi RP2040&lt;/a&gt; dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.4.1. According to the &lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.4.1&quot;&gt;release notes&lt;/a&gt;, v2.4.1 brings updated variants rebuilt on mbed v6.13, improvements in core and bundled libraries.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the August 2021 updates of PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-august-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-august-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source July Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-july-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source July Updates" /><published>2021-08-02T00:00:00+03:00</published><updated>2021-08-02T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-july-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-july-2021-updates.html">&lt;p&gt;Welcome to the July 2021 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-july-news.jpg&quot; alt=&quot;PlatformIO Open Source July Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During July, we added support for Zephyr v2.6.0, rolled out updates for the STMicroelectronics STM32, Nordic nRF52, Teensy and Espressif32 development platforms, resolved a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#zephyr-v260-new-dev-kits-refactored-logging-subsystem-and-improved-power-management&quot; id=&quot;markdown-toc-zephyr-v260-new-dev-kits-refactored-logging-subsystem-and-improved-power-management&quot;&gt;Zephyr v2.6.0: New dev-kits, refactored logging subsystem and improved power management&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#st-stm32-dev-platform-v141&quot; id=&quot;markdown-toc-st-stm32-dev-platform-v141&quot;&gt;ST STM32 dev-platform v14.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nordic-nrf52-dev-platform-v82&quot; id=&quot;markdown-toc-nordic-nrf52-dev-platform-v82&quot;&gt;Nordic nRF52 dev-platform v8.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#teensy-dev-platform-v413&quot; id=&quot;markdown-toc-teensy-dev-platform-v413&quot;&gt;Teensy dev-platform v4.13&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif32-dev-platform-v331&quot; id=&quot;markdown-toc-espressif32-dev-platform-v331&quot;&gt;Espressif32 dev-platform v3.3.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino-core-for-mbed-enabled-devices-v23&quot; id=&quot;markdown-toc-arduino-core-for-mbed-enabled-devices-v23&quot;&gt;Arduino Core for mbed-enabled devices v2.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;zephyr-v260-new-dev-kits-refactored-logging-subsystem-and-improved-power-management&quot;&gt;Zephyr v2.6.0: New dev-kits, refactored logging subsystem and improved power management&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for a new release v2.6.0 of Zephyr Project - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in v2.6.0:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Overhauled Logging subsystem&lt;/li&gt;
  &lt;li&gt;Overhauled Tracing subsystem including expansion for tracing points&lt;/li&gt;
  &lt;li&gt;Improvements to device runtime power management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Zephyr framework&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.6.0&quot;&gt;Release notes for v2.6.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html&quot;&gt;Documentation for Zephyr framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms&quot;&gt;Supported development platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;st-stm32-dev-platform-v141&quot;&gt;ST STM32 dev-platform v14.1&lt;/h2&gt;

&lt;p&gt;The latest release of the &lt;a href=&quot;https://platformio.org/platforms/ststm32&quot;&gt;ST STM32&lt;/a&gt; platform comes with several new boards and dev-kits, support for the latest Zephyr v2.6.0 and Arduino-mbed core v2.3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/disco_g071rb.html&quot;&gt;ST STM32G071B Discovery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/nucleo_h753zi.html&quot;&gt;ST Nucleo H753ZI&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/nucleo_wl55jc.html&quot;&gt;ST Nucleo WL55JC&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.6.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.6.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.3.1&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.3.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the ST STM32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nordic-nrf52-dev-platform-v82&quot;&gt;Nordic nRF52 dev-platform v8.2&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/nordicnrf52&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platform brings support for Zephyr 2.6.0, updated Arduino cores and several minor bugfixes and improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.6.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.6.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.3.1&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.3.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Adafruit core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.24.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/0.24.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Switched to a standalone &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adafruit-nrfutil&lt;/code&gt; package from PlatformIO Registry&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Nordic nRF52 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-nordicnrf52/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;teensy-dev-platform-v413&quot;&gt;Teensy dev-platform v4.13&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/teensy&quot;&gt;Teensy&lt;/a&gt; dev-platform comes with support for the latest Teensyduino v1.54 with a new development board:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New board &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/teensy/teensymm.html&quot;&gt;SparkFun MicroMod Teensy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Updated Teensyduino to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.54&lt;/code&gt; (&lt;a href=&quot;https://github.com/PaulStoffregen/cores/releases/tag/1.54&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Teensy dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/teensy.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-teensy/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif32-dev-platform-v331&quot;&gt;Espressif32 dev-platform v3.3.1&lt;/h2&gt;

&lt;p&gt;The latest &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif32&lt;/a&gt; v3.3.1 is mostly a maintenance release that brings several important bugfixes and improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated the OpenOCD package to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.10.0-esp32-20210721&lt;/code&gt; (&lt;a href=&quot;https://github.com/espressif/openocd-esp32/releases/tag/v0.10.0-esp32-20210721&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Esp32ExceptionDecoder&lt;/code&gt; now supports uppercase hex addresses in backtraces (#582)&lt;/li&gt;
  &lt;li&gt;Better handling of ESP-IDF configuration files (#588)&lt;/li&gt;
  &lt;li&gt;Removed dynamic reconfiguration of SPI Flash mode for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptoolpy&lt;/code&gt; (#584)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Espressif32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/espressif32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-espressif32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;arduino-core-for-mbed-enabled-devices-v23&quot;&gt;Arduino Core for mbed-enabled devices v2.3&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;ST STM32&lt;/a&gt;, &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Nordic nRF52&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/raspberrypi.html&quot;&gt;Raspberry Pi RP2040&lt;/a&gt; dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.3. According to the &lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.3.1&quot;&gt;release notes&lt;/a&gt;, v2.3 brings a lot of bugfixes and improvements in core and bundled libraries.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the July 2021 updates of PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-july-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-july-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source June Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-june-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source June Updates" /><published>2021-07-01T00:00:00+03:00</published><updated>2021-07-01T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-june-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-june-2021-updates.html">&lt;p&gt;Welcome to the June 2021 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-june-news.jpg&quot; alt=&quot;PlatformIO Open Source June Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During June, we have released a new version of the Espressif32 dev-platform with support for the latest ESP-IDF v4.3 and the ESP32-C3 SoC, rolled out updates for the Espressif8266, Microchip SAM and ST STM32 platform, fixed a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#esp-idf-v43&quot; id=&quot;markdown-toc-esp-idf-v43&quot;&gt;ESP-IDF v4.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif32-dev-platform-v33&quot; id=&quot;markdown-toc-espressif32-dev-platform-v33&quot;&gt;Espressif32 dev-platform v3.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif8266-dev-platform-v31&quot; id=&quot;markdown-toc-espressif8266-dev-platform-v31&quot;&gt;Espressif8266 dev-platform v3.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v62&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v62&quot;&gt;Atmel SAM dev-platform v6.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#st-stm32-dev-platform-v1401&quot; id=&quot;markdown-toc-st-stm32-dev-platform-v1401&quot;&gt;ST STM32 dev-platform v14.0.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;esp-idf-v43&quot;&gt;ESP-IDF v4.3&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for the latest stable &lt;strong&gt;ESP-IDF v4.3&lt;/strong&gt; - the official development framework for the ESP32, ESP32-S and ESP32-C Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in the latest release:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP32-C3&lt;/code&gt; SoC&lt;/li&gt;
  &lt;li&gt;Updated FreeRTOS, based on upstream version v10.2.0&lt;/li&gt;
  &lt;li&gt;Improved heap algorith based on TLSF&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on project configuration for ESP-IDF can be found &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#configuration&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for ESP-IDF&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/espressif/esp-idf/releases/tag/v4.3&quot;&gt;Release notes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4.3&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html&quot;&gt;Documentation for ESP-IDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif32-dev-platform-v33&quot;&gt;Espressif32 dev-platform v3.3&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif 32&lt;/a&gt; dev-platform comes with support for the latest ESP-IDF v4.3 and the new ESP32-C3 SoC, updated packages and several minor fixes and improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new board: &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/espressif32/esp32-c3-devkitm-1.html&quot;&gt;Espressif ESP32-C3-DevKitM-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP-IDF&lt;/code&gt; to the latest stable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Updated OpenOCD to the latest v0.10.0-20210401 (&lt;a href=&quot;https://github.com/espressif/openocd-esp32/releases/tag/v0.10.0-esp32-20210401&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdkconfig&lt;/code&gt; files are now generated for each environment separately (#539)&lt;/li&gt;
  &lt;li&gt;The global &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IDF_TOOLS_PATH&lt;/code&gt; variable is now disabled within the isolated PlatformIO environment (#555)&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-espressif32/releases/tag/v3.3.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;espressif8266-dev-platform-v31&quot;&gt;Espressif8266 dev-platform v3.1&lt;/h2&gt;

&lt;p&gt;The latest revision of the &lt;a href=&quot;https://platformio.org/platforms/espressif8266&quot;&gt;Espressif 8266&lt;/a&gt; dev-platform brings support for the latest Arduino core v3.0.1 together with the latest GCC toolchain v10.2.0 and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mklittlefs&lt;/code&gt; tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Arduino Core to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.0.1&lt;/code&gt; (&lt;a href=&quot;https://github.com/esp8266/Arduino/releases/tag/3.0.1&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated toolchain packages to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v10.3.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mklittlefs&lt;/code&gt; tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-espressif8266/releases/tag/v3.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v62&quot;&gt;Atmel SAM dev-platform v6.2&lt;/h2&gt;

&lt;p&gt;The new &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; v6.2 comes with a new SparkFun board, updated Arduino cores and minor fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New board &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelsam/sparkfun_samd51_micromod.html&quot;&gt;SparkFun SAMD51 MicroMod&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Update Sparkfun SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Updated LowPowerLab Moteino SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.6.3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Updated SODAQ SAMD &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.6&lt;/code&gt; (&lt;a href=&quot;https://github.com/SodaqMoja/SodaqCore-samd/releases/tag/v1.8.6-sodaq&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;st-stm32-dev-platform-v1401&quot;&gt;ST STM32 dev-platform v14.0.1&lt;/h2&gt;

&lt;p&gt;The latest &lt;a href=&quot;https://platformio.org/platforms/ststm32&quot;&gt;ST STM32&lt;/a&gt; v14.0.1 is mostly a maintenance release that brings several important bugfixes and improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated build script for the &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/libopencm3.html&quot;&gt;libOpenCM3&lt;/a&gt; framework&lt;/li&gt;
  &lt;li&gt;Fixed an issue with incorrect size of the RAM memory for Arduino-enabled L4-based boards&lt;/li&gt;
  &lt;li&gt;Fixed OpenOCD target for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vccgnd_f407zg_mini&lt;/code&gt; board&lt;/li&gt;
  &lt;li&gt;Fixed default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LINKFLAGS&lt;/code&gt; for SPL for lower memory footprint&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-ststm32/releases/tag/v14.0.1&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the June 2021 updates of PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so there are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-june-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-june-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unit Testing with PlatformIO: Part 3. Continuous Integration and Remote Testing</title><link href="https://piolabs.com/blog/insights/unit-testing-part-3.html" rel="alternate" type="text/html" title="Unit Testing with PlatformIO: Part 3. Continuous Integration and Remote Testing" /><published>2021-06-09T00:00:00+03:00</published><updated>2021-06-09T00:00:00+03:00</updated><id>https://piolabs.com/blog/insights/unit-testing-part-3</id><content type="html" xml:base="https://piolabs.com/blog/insights/unit-testing-part-3.html">&lt;p&gt;In recent years &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot; target=&quot;_blank&quot;&gt;Continuous Integration&lt;/a&gt; (CI) has become a standard for software development and embedded projects are no exception. Continuous integration allows developers to build an application and run tests in an automated way. Whenever new changes are committed to the repository, the CI system executes predefined tasks to make sure that the project works as expected and no regression was introduced. Besides compiling and running tests, we also can perform additional actions like static code analysis, applying code formatting, etc.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the previous posts (&lt;a href=&quot;/blog/insights/unit-testing-part-1.html&quot; target=&quot;_blank&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/blog/insights/unit-testing-part-2.html&quot; target=&quot;_blank&quot;&gt;Part 2&lt;/a&gt;) we’ve covered the basics of unit testing and put together a practical development environment for writing and running tests on both sides: the host machine and an embedded device. This article will show how to set up a simple CI workflow based on the &lt;a href=&quot;https://github.com/features/actions&quot; target=&quot;_blank&quot;&gt;GitHub Actions&lt;/a&gt; service and then configure the CI server to run the tests on a remote device using &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/pio-remote.html&quot; target=&quot;_blank&quot;&gt;PlatformIO Remote Development Solution&lt;/a&gt;.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot; id=&quot;markdown-toc-prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-github-actions&quot; id=&quot;markdown-toc-setting-up-github-actions&quot;&gt;Setting Up GitHub Actions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-tests-on-a-remote-target&quot; id=&quot;markdown-toc-running-tests-on-a-remote-target&quot;&gt;Running Tests on a Remote Target&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final-words&quot; id=&quot;markdown-toc-final-words&quot;&gt;Final Words&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Besides the prerequisites from the previous posts, today we will also need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PlatformIO account&lt;/li&gt;
  &lt;li&gt;GitHub account&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setting-up-github-actions&quot;&gt;Setting Up GitHub Actions&lt;/h2&gt;

&lt;p&gt;GitHub Actions is an automation feature that allows you to automate, customize, and execute software development workflows right in your GitHub repository. Registering on GitHub, creating a new repository, and pushing the code are out of the scope of this article. If you’re new to GitHub, check out the official &lt;a href=&quot;https://guides.github.com/activities/hello-world/&quot; target=&quot;_blank&quot;&gt;Getting Started guide&lt;/a&gt; from the GitHub team. Let’s suppose we already have a working repository with the code and tests from the previous posts.&lt;/p&gt;

&lt;p&gt;We will start straight from defining our workflows in a GitHub Actions configuration file. First, let’s create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflow/native.yml&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;!--  --&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ matrix.os }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;macos-latest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windows-latest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up Python&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-python@v1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install PlatformIO&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;python -m pip install --upgrade pip&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;pip install platformio&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run tests on the native platform&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;platformio test -e native&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!--  --&gt;

&lt;p&gt;The contents of the configuration file is pretty straightforward. First, we specify GitHub events that trigger the workflow, then we create a matrix to run the workflow on three popular operating systems. The most interesting part is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steps&lt;/code&gt; section that describes each step required to run our workflow. If we push this file to the repository we will see that all our tests passed successfully:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-2.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-2.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-tests-on-a-remote-target&quot;&gt;Running Tests on a Remote Target&lt;/h2&gt;

&lt;p&gt;PlatformIO offers a unique tool called &lt;strong&gt;PlatformIO Remote&lt;/strong&gt; that allows users to run tests on a remote machine or remote target device without extra software, SSH, VPN or opening network ports. First of all, to enable this feature we need to generate a special token on the machine which the target board is connected to. It can be done in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Account Page&lt;/code&gt; or via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio account token&lt;/code&gt; CLI command:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, the token must be added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Secrets&lt;/code&gt; page in the settings of the repository:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, we can add a new step to the workflow that runs the tests on the remote board:&lt;/p&gt;

&lt;!--  --&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up Python&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-python@v1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install PlatformIO&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;python -m pip install --upgrade pip&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;pip install platformio&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run tests on the embedded target&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;PLATFORMIO_AUTH_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.PLATFORMIO_AUTH_TOKEN }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;platformio remote test -e hifive1-revb -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!--  --&gt;

&lt;p&gt;The configuration slightly differs from the previous one. This time, we use one OS instead of a matrix with OSes and invoke the remote counterpart for test command.&lt;/p&gt;

&lt;p&gt;Before committing the latest changes, we need to start PlatformIO Remote agent that handled all the heavy lifting starting from establishing a secure connection up to collecting test results and sending them to the CI service. Just type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio remote agent start&lt;/code&gt; on the remote machine and we are ready to go.&lt;/p&gt;

&lt;p&gt;Finally, we are ready to push the updated configuration file. When the CI system detects a new commit it will automatically run the tests on the remote board:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-5.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-5.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Adopting CI practices in embedded projects might be sophisticated, but it’s definitely worth the effort. Leveraging modern CI services helps ensure that code coming from other developers doesn’t break the project. Another benefit of CI is that it greatly reduces the chances of failures by detecting errors early in the development process. Using the PlatformIO Remote feature considerably simplifies the process of executing tests on a remote target. With only a few commands we can run tests and safely transfer results directly to the CI service while real hardware is physically connected to a local machine.&lt;/p&gt;

&lt;h2 id=&quot;final-words&quot;&gt;Final Words&lt;/h2&gt;

&lt;p&gt;Writing good and comprehensive tests is a complex task, and we’ve barely scratched the surface. The overall goal of this three-part series was to create a convenient and automated development environment that allows developers to concentrate on writing code instead of wrestling with boring, complicated tools and configurations.&lt;/p&gt;

&lt;p&gt;If you liked this series, you are sure to enjoy our series on other topics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/insights/memory-analysis-part-1.html&quot;&gt;Analyze your firmware footprint with PlatformIO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html">In recent years Continuous Integration (CI) has become a standard for software development and embedded projects are no exception. Continuous integration allows developers to build an application and run tests in an automated way. Whenever new changes are committed to the repository, the CI system executes predefined tasks to make sure that the project works as expected and no regression was introduced. Besides compiling and running tests, we also can perform additional actions like static code analysis, applying code formatting, etc.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-1.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2021-06-09-unit-testing-part-3/unit-testing-part-3-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source May Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-may-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source May Updates" /><published>2021-06-03T00:00:00+03:00</published><updated>2021-06-03T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-may-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-may-2021-updates.html">&lt;p&gt;Welcome to the May 2021 updates of the &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so let’s go through the updates pushed in this month.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-may-news.jpg&quot; alt=&quot;PlatformIO Open Source May Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During May, we have mostly focused on our thriving Arduino community. Besides updating support for the latest stable ESP-IDF v4.2.1, we updated Arduino cores for ESP8266, ST STM32, Adafruit, and mbed-enabled devices. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#espressif-8266-dev-platform-v30&quot; id=&quot;markdown-toc-espressif-8266-dev-platform-v30&quot;&gt;Espressif 8266 dev-platform v3.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stmicroelectronics-stm32-dev-platform-v140&quot; id=&quot;markdown-toc-stmicroelectronics-stm32-dev-platform-v140&quot;&gt;STMicroelectronics STM32 dev-platform v14.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#microchip-atmelsam-dev-platform-v61&quot; id=&quot;markdown-toc-microchip-atmelsam-dev-platform-v61&quot;&gt;Microchip AtmelSAM dev-platform v6.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#esp-idf-v421&quot; id=&quot;markdown-toc-esp-idf-v421&quot;&gt;ESP-IDF v4.2.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino-core-for-mbed-enabled-devices-v21&quot; id=&quot;markdown-toc-arduino-core-for-mbed-enabled-devices-v21&quot;&gt;Arduino Core for mbed-enabled devices v2.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;espressif-8266-dev-platform-v30&quot;&gt;Espressif 8266 dev-platform v3.0&lt;/h2&gt;

&lt;p&gt;The latest revision of the &lt;a href=&quot;https://platformio.org/platforms/espressif8266&quot;&gt;Espressif 8266&lt;/a&gt; dev-platform brings support for the latest Arduino core v3.0.0 together with the latest GCC toolchain v10.2 and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New board &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/espressif8266/agruminolemon.html&quot;&gt;Lifely Agrumino Lemon v4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Updated Arduino Core to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.0.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/esp8266/Arduino/releases/tag/3.0.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated toolchain packages to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v10.2.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Minor improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h4&gt;

&lt;p&gt;The latest Arduino Core &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.0.0&lt;/code&gt; is a major release that brings several breaking changes including removed and significantly changed APIs. Many popular libraries are not synchronized with these changes which may lead to non-obvious compilation and linker errors. Please thoroughly examine the summary of the changes in the &lt;a href=&quot;https://github.com/esp8266/Arduino/releases/tag/3.0.0&quot;&gt;release notes&lt;/a&gt; before updating the platform. In case your projects are not compilable after the update, you can always roll back to the previous version of the platform, for example:&lt;/p&gt;
&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:espresso_lite_v2]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;espressif8266@^2&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arduino&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;espresso_lite_v2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;mmu-configuration&quot;&gt;MMU configuration&lt;/h4&gt;

&lt;p&gt;This release introduces new configuration defines that allow adjusting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ICACHE&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IRAM&lt;/code&gt; ratio, for example:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:espresso_lite_v2]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;espressif8266&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arduino&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;espresso_lite_v2&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;build_flags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;; 16KB Cache + 48KB IRAM and 2nd Heap (shared)
&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;-DPIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48_SECHEAP_SHARED&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the Espressif 8266 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/espressif8266.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-espressif8266/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stmicroelectronics-stm32-dev-platform-v140&quot;&gt;STMicroelectronics STM32 dev-platform v14.0&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/ststm32&quot;&gt;ST STM32&lt;/a&gt; platform comes with a bunch of new boards and dev-kits, support for the latest major release of Arduino core v2.0 and updated SVD files for better debugging experience:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/disco_b_g431b_esc1.html&quot;&gt;ST B-G431B-ESC1 Discovery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/disco_l4s5i_iot01a.html&quot;&gt;ST STM32L4+ Discovery kit IoT Node&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/elektor_f072c8.html&quot;&gt;Elektor LoRa Node Core F072C8 (64 kB)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/elektor_f072cb.html&quot;&gt;Elektor LoRa Node Core F072C8 (128 kB)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/nucleo_g031k8.html&quot;&gt;ST Nucleo G031K8&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/nucleo_l552ze_q.html&quot;&gt;ST Nucleo L552ZE-Q&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/olimexino_stm32f3.html&quot;&gt;Olimex OLIMEXINO-STM32F3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/ststm32/vccgnd_f407zg_mini.html&quot;&gt;VCCGND F407ZGT6 Mini&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated STM32 Arduino Core to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/stm32duino/Arduino_Core_STM32/releases/tag/2.0.0&quot;&gt;relase notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.1.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/2.1.0&quot;&gt;relase notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated OpenOCD to the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.11.0&lt;/code&gt; (&lt;a href=&quot;http://openocd.org/2021/03/openocd-0-11-0-released/&quot;&gt;relase notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated SVD files&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;note&quot;&gt;Note&lt;/h4&gt;

&lt;p&gt;The latest STM32 Arduino Core &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.0&lt;/code&gt; is a major release with refactored variant structure. These changes may break custom board manifests which used previous variant names. In case your projects are not compilable after the update, you can always roll back to the previous version of the platform, for example:&lt;/p&gt;
&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:nucleo_f072rb]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ststm32@^13.0.0&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arduino&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nucleo_f072rb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the ST STM32 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm32/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;microchip-atmelsam-dev-platform-v61&quot;&gt;Microchip AtmelSAM dev-platform v6.1&lt;/h2&gt;

&lt;p&gt;The latest release of the &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; v6.1.0 brings support for new boards, updated Arduino Adafruit core and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_neokeytrinkey_m0.html&quot;&gt;Adafruit NeoKey Trinkey&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_neotrinkey_m0.html&quot;&gt;Adafruit NeoPixel Trinkey&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_proxlighttrinkey_m0.html&quot;&gt;Adafruit ProxLight Trinkey&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_rotarytrinkey_m0.html&quot;&gt;Adafruit Rotary Trinkey&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/boards/atmelsam/adafruit_slidetrinkey_m0.html&quot;&gt;Adafruit Slide Trinkey&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Adafruit Arduino Core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.7.2&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/ArduinoCore-samd/releases/tag/1.7.2&quot;&gt;relase notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;esp-idf-v421&quot;&gt;ESP-IDF v4.2.1&lt;/h2&gt;

&lt;p&gt;The latest version of the &lt;a href=&quot;https://platformio.org/platforms/espressif32&quot;&gt;Espressif32&lt;/a&gt; platform now supports the latest stable &lt;strong&gt;ESP-IDF v4.2.1&lt;/strong&gt; - the official development framework for the ESP32 and ESP32-S Series SoCs. It provides a self-sufficient SDK for any generic application development on these platforms, using programming languages such as C and C++. ESP-IDF currently powers millions of devices in the field, and enables building a variety of network-connected products, ranging from simple light bulbs and toys to big appliances and industrial devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in the latest release:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improvements to the Bluetooth Controller (reduced IRAM consumption, support for BLE Authorization)&lt;/li&gt;
  &lt;li&gt;Minor optimizations to the Wi-Fi stack&lt;/li&gt;
  &lt;li&gt;Many fixes and improvements to the Peripheral Drivers, Core and Power Management systems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for ESP-IDF&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/espressif/esp-idf/releases/tag/v4.2.1&quot;&gt;Release notes for v4.2.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html&quot;&gt;Documentation for ESP-IDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/espidf.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;arduino-core-for-mbed-enabled-devices-v21&quot;&gt;Arduino Core for mbed-enabled devices v2.1&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;ST STM32&lt;/a&gt;, &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Nordic nRF52&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/raspberrypi.html&quot;&gt;Raspberry Pi RP2040&lt;/a&gt; dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.1. According to the release notes, v2.1 brings a lot of bugfixes and improvements in core and accompanying libraries.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the May 2021 updates of the PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so let’s go through the updates pushed in this month.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-may-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-may-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source April Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-april-2021-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source April Updates" /><published>2021-05-06T00:00:00+03:00</published><updated>2021-05-06T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-oss-april-2021-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-april-2021-updates.html">&lt;p&gt;Welcome to the April 2021 updates of the &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development.
This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so let’s go through the updates pushed in this month.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-april-news.jpg&quot; alt=&quot;PlatformIO Open Source April Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In April, we have released a new dev-platform for Raspberry Pi RP2040, updated Arduino core for mbed-enabled devices to the latest v2.0, rolled out a major update for the ST STM8 dev-platform with debugging support, integrated the OVPSim and Renode simulators into the OpenHW dev-platform. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#raspberry-pi-rp2040-dev-platform&quot; id=&quot;markdown-toc-raspberry-pi-rp2040-dev-platform&quot;&gt;Raspberry Pi RP2040 dev-platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stmicroelectronics-stm8-dev-platform-v20&quot; id=&quot;markdown-toc-stmicroelectronics-stm8-dev-platform-v20&quot;&gt;STMicroelectronics STM8 dev-platform v2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#openhw-dev-platform-v02&quot; id=&quot;markdown-toc-openhw-dev-platform-v02&quot;&gt;OpenHW dev-platform v0.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino-core-for-mbed-enabled-devices-v20&quot; id=&quot;markdown-toc-arduino-core-for-mbed-enabled-devices-v20&quot;&gt;Arduino Core for mbed-enabled devices v2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;raspberry-pi-rp2040-dev-platform&quot;&gt;Raspberry Pi RP2040 dev-platform&lt;/h2&gt;

&lt;p&gt;During the last few months, we have received a lot of private and public inquiries from the Raspberry Pi community about the integration of the recently announced RP2040 MCU into the PlatformIO ecosystem. We value your opinion and welcome your feedback, so we’re happy to announce the initial support for Raspberry Pi RP2040 MCU - a low-cost, high-performance device with a large on-chip memory, a dual-core Arm Cortex-M0+ processor, and a rich peripheral set augmented with a unique Programmable I/O (PIO) subsystem.&lt;/p&gt;

&lt;p&gt;As a company with a strong commitment to the open-source community, we welcome any valuable contribution to further develop the Raspberry Pi ecosystem with modern and flexible open-source development tools.&lt;/p&gt;

&lt;p&gt;The first release of the Raspberry Pi dev-platform brings initial support for the &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/raspberrypi/pico.html&quot;&gt;Raspberry Pi Pico&lt;/a&gt; and &lt;a href=&quot;http://docs.platformio.org/en/latest/boards/raspberrypi/nanorp2040connect.html&quot;&gt;Arduino Nano RP2040 Connect&lt;/a&gt; boards. Only the Arduino framework is supported at the moment. See &lt;a href=&quot;https://github.com/platformio/platform-raspberrypi/releases/tag/v1.0.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Raspberry Pi RP2040 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/raspberrypi.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-raspberrypi/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stmicroelectronics-stm8-dev-platform-v20&quot;&gt;STMicroelectronics STM8 dev-platform v2.0&lt;/h2&gt;

&lt;p&gt;Thanks to our great community represented by &lt;a href=&quot;https://github.com/maxgerhardt&quot;&gt;Maximilian Gerhardt&lt;/a&gt; and &lt;a href=&quot;https://github.com/cocus&quot;&gt;Santiago Hormazabal&lt;/a&gt;, the new release of the &lt;a href=&quot;https://platformio.org/platforms/ststm8&quot;&gt;STMicroelectronics STM8&lt;/a&gt; brings initial support for debugging feature:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2021-05-06-oss-april-updates/stm8-debug.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2021-05-06-oss-april-updates/stm8-debug.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now developers are able to quickly and easily debug their bare-metal applications thanks to preconfigured &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debugging.html&quot;&gt;PlatformIO Unified Debugger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The latest release also includes severals new boards, updated toolchains and the latest Sduino core:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm8/nucleo_8s207k8.html&quot;&gt;ST NUCLEO-8S207K8&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm8/nucleo_8s208rb.html&quot;&gt;ST NUCLEO-8S208RB&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm8/stm8s003f3.html&quot;&gt;ST STM8S003F3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Added initial support for debugging feature&lt;/li&gt;
  &lt;li&gt;Updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDuino&lt;/code&gt; to the latest v0.5 (&lt;a href=&quot;https://github.com/tenbaht/sduino/releases/tag/v0.5&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDCC&lt;/code&gt; toolchain to the latest v4.1.0&lt;/li&gt;
  &lt;li&gt;Updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stm8gal&lt;/code&gt; uploader to the latest v1.5.0&lt;/li&gt;
  &lt;li&gt;Added &lt;a href=&quot;https://github.com/platformio/platform-ststm8/tree/develop/examples/native-blink&quot;&gt;a new example&lt;/a&gt; based on &lt;a href=&quot;https://github.com/gicking/STM8_headers&quot;&gt;Open-Sources device headers for STM8 MCUs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for the STMicroelectronics STM8 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm8.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-ststm8/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openhw-dev-platform-v02&quot;&gt;OpenHW dev-platform v0.2&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/openhw&quot;&gt;OpenHW&lt;/a&gt; dev-platform brings initial support for the popular &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debug-tools/ovpsim.html&quot;&gt;Imperas OVPSim&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debug-tools/renode.html&quot;&gt;Antmicro Renode&lt;/a&gt; simulators, several minor bugfixes and improvements. Simulators are very valuable in the early stages of project development when there is no real hardware available for the developers to experiment with. Combined with the &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debugging.html&quot;&gt;PlatformIO Unified Debugger&lt;/a&gt;, simulators are great instruments to develop, debug and test embedded applications on your host machine or in a CI environment.&lt;/p&gt;

&lt;h2 id=&quot;arduino-core-for-mbed-enabled-devices-v20&quot;&gt;Arduino Core for mbed-enabled devices v2.0&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/ststm32.html&quot;&gt;ST STM32&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platforms have been updated to support the latest Arduino Core for mbed-enabled devices v2.0. According to the release notes, v2.0 brings a lot of bugfixes and improvements in core and accompanying libraries.&lt;/p&gt;

&lt;h2 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h2&gt;

&lt;p&gt;Stay tuned to this blog or follow us on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; and Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt; to keep up to date with the latest news, articles and tips!&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the April 2021 updates of the PlatformIO Open Source professional collaborative platform for embedded development. This month we received a lot of helpful feedback from our community, which let us identify the most important parts of our OSS ecosystem that required our attention, so let’s go through the updates pushed in this month.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-april-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-april-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>