<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://piolabs.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://piolabs.com/" rel="alternate" type="text/html" /><updated>2020-12-26T19:29:34+02:00</updated><id>https://piolabs.com/feed.xml</id><title type="html">PlatformIO Labs</title><subtitle>A proven technology used by global innovators and by over a million embedded developers around the world.</subtitle><author><name>PlatformIO Labs</name><email>contact@piolabs.com</email></author><entry><title type="html">Analyze your firmware footprint with PlatformIO: Part 2. Project Inspector</title><link href="https://piolabs.com/blog/insights/memory-analysis-part-2.html" rel="alternate" type="text/html" title="Analyze your firmware footprint with PlatformIO: Part 2. Project Inspector" /><published>2020-12-14T00:00:00+02:00</published><updated>2020-12-14T00:00:00+02:00</updated><id>https://piolabs.com/blog/insights/memory-analysis-part-2</id><content type="html" xml:base="https://piolabs.com/blog/insights/memory-analysis-part-2.html">&lt;p&gt;Have you ever wondered how the linker is assigning physical memory, where your code is placed in Flash, or how much RAM is used by an OS or peripheral drivers?&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the &lt;a href=&quot;/blog/insights/memory-analysis-part-1.html&quot;&gt;previous post&lt;/a&gt;, we briefly looked into general aspects of the memory layout of executable files. In this post, we will go deeper into the ELF file structure and memory analysis using a very useful PlatformIO tool called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Inspector&lt;/code&gt; which allows analyzing application memory usage or to answer specific questions about which memory section a variable or function is placed in or what file this symbol is located in.&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#running-analysis&quot; id=&quot;markdown-toc-running-analysis&quot;&gt;Running Analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#inspecting-results&quot; id=&quot;markdown-toc-inspecting-results&quot;&gt;Inspecting Results&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#project-statistics&quot; id=&quot;markdown-toc-project-statistics&quot;&gt;Project Statistics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#project-explorer&quot; id=&quot;markdown-toc-project-explorer&quot;&gt;Project Explorer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#symbol-table&quot; id=&quot;markdown-toc-symbol-table&quot;&gt;Symbol Table&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#memory-sections&quot; id=&quot;markdown-toc-memory-sections&quot;&gt;Memory Sections&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;running-analysis&quot;&gt;Running Analysis&lt;/h2&gt;

&lt;p&gt;We already installed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ststm32&lt;/code&gt; platform and imported a basic example in the previous blog post. Let’s analyze the same project, but this time via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Inspector&lt;/code&gt;. On the PlatformIO Home page, navigate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; tab, select your project and environment, press the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-2.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-2.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;inspecting-results&quot;&gt;Inspecting Results&lt;/h2&gt;

&lt;h3 id=&quot;project-statistics&quot;&gt;Project Statistics&lt;/h3&gt;

&lt;p&gt;Once the analysis is done, PlatformIO will show a detailed report on memory usage. The first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Statistics&lt;/code&gt; tab displays general information about used hardware, a graphical representation of the percentage of used memory, Top-5 files with the most significant contribution to the memory footprint, along with Top-5 largest symbols defined in the firmware:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, in our case, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stm32f4xx_hal_gpio.c&lt;/code&gt; file has the highest memory consumption of 428 bytes.&lt;/p&gt;

&lt;p&gt;As we can see, the report from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Inspector&lt;/code&gt; a bit differs from the regular information reported after each build step. In this case, the differences can be explained by a different calculation method of memory consumption. Project Inspector also takes into account the memory section which was allocated for the stack and heap. Usually, it’s done in the project linker script and used to ensure that there is enough free memory left for the stack and heap to fit into the RAM. In code  such verification may look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_Min_Heap_Size = 0x200;      /* required amount of heap  */
_Min_Stack_Size = 0x400;     /* required amount of stack */
...
._user_heap_stack :
{
    . = ALIGN(4);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(4);
} &amp;gt;RAM
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;._user_heap_stack&lt;/code&gt; (or similar name) is exactly the section that declares the memory area that could be allocated at runtime.&lt;/p&gt;

&lt;h3 id=&quot;project-explorer&quot;&gt;Project Explorer&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Explorer&lt;/code&gt; tab provides a convenient way for navigating through project source files while displaying used RAM and Flash memory for each file. By clicking on any particular file we can see a detailed report on symbols defined in this file and their size:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;symbol-table&quot;&gt;Symbol Table&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Symbols&lt;/code&gt; page lists the most memory-consuming symbols in the entire project. Besides the information about size, address, and the memory segment where that symbols are located, there are also two additional columns that provide extra information:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-5.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-5.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt; column describes the specific type of each symbol. The most interesting for us are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STT_OBJECT&lt;/code&gt; - This symbol is associated with a data object, such as a variable, an array, and so on.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STT_FUNC&lt;/code&gt; - This symbol indicates that this symbol represents a function or other executable code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bind&lt;/code&gt; column shows symbol binding type. For most applications, symbol types fall into the following three categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STB_LOCAL&lt;/code&gt; - Local symbols that are not visible outside the object file containing their definition. Local symbols with the same name may exist in multiple files without interfering with each other.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STB_GLOBAL&lt;/code&gt; - Global symbols. These symbols are visible to all object files being combined.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STB_WEAK&lt;/code&gt; - Weak symbols resemble global symbols, but their definitions have lower precedence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can also click on the magnifier icon on the right to the symbol name to open the corresponding source file and highlight the line where that symbol was defined.&lt;/p&gt;

&lt;h3 id=&quot;memory-sections&quot;&gt;Memory Sections&lt;/h3&gt;

&lt;p&gt;The last tab &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sections&lt;/code&gt; is similar to the memory report after the verbose build, but shows extra information like section types and attributes:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-6.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-6.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt; column categorizes the section contents and semantics. A short description of the possible values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_PROGBITS&lt;/code&gt; - The section holds information defined by the program, includes executable code and data&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_NOBITS&lt;/code&gt; - A section of this type occupies no space in the file but otherwise resembles &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_PROGBITS&lt;/code&gt; (for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; section)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_STRTAB&lt;/code&gt; - The section holds the string table&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHT_SYMTAB&lt;/code&gt; - The section holds the symbol table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flags&lt;/code&gt; column describes miscellaneous section attributes The most interesting for us are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W (SHF_WRITE)&lt;/code&gt; - The section contains data that should be writable during process execution.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A (SHF_ALLOC)&lt;/code&gt; - The section occupies memory during process execution (used to attribute control sections that don’t reside in the memory image of an object file).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X (SHF_EXECINSTR)&lt;/code&gt; - The section contains executable machine instructions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested in more detailed information about the structure of ELF files, here is a great &lt;a href=&quot;https://man7.org/linux/man-pages/man5/elf.5.html&quot; target=&quot;_blank&quot;&gt;man page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Advanced analysis tools are becoming more useful as the modern firmware in embedded systems is getting highly complicated. Such tools enable developers to better understand how optimization flags, standard libraries, or even coding style affect memory consumption. Dismissive attitude towards optimization may lead to nonrecoverable software failures after deployment, especially on embedded systems where code space is a very constrained resource.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html">Have you ever wondered how the linker is assigning physical memory, where your code is placed in Flash, or how much RAM is used by an OS or peripheral drivers?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-1.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-12-14-memory-analysis-part-2/memory-analysis-part-2-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source November Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-november-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source November Updates" /><published>2020-12-04T00:00:00+02:00</published><updated>2020-12-04T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-november-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-november-updates.html">&lt;p&gt;Welcome to the November 2020 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-november-news.jpg&quot; alt=&quot;PlatformIO Open Source November Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During November, we implemented several feature requests, added support for Zephyr v2.4, rolled out updates for ST STM32, Microchip SAM/megaAVR, Shakti RISC-V platforms and fixed a lot of issues. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-core-503&quot; id=&quot;markdown-toc-platformio-core-503&quot;&gt;PlatformIO Core 5.0.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#zephyr-v24-new-boards-initial-support-for-vmm-and-new-tcp-stack&quot; id=&quot;markdown-toc-zephyr-v24-new-boards-initial-support-for-vmm-and-new-tcp-stack&quot;&gt;Zephyr v2.4: New boards, initial support for VMM and new TCP stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-sam-dev-platform-v50&quot; id=&quot;markdown-toc-atmel-sam-dev-platform-v50&quot;&gt;Atmel SAM dev-platform v5.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-megaavr-dev-platform-v13&quot; id=&quot;markdown-toc-atmel-megaavr-dev-platform-v13&quot;&gt;Atmel megaAVR dev-platform v1.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shakti-risc-v-dev-platform-v11&quot; id=&quot;markdown-toc-shakti-risc-v-dev-platform-v11&quot;&gt;Shakti RISC-V dev-platform v1.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#st-stm32-dev-platform-v100&quot; id=&quot;markdown-toc-st-stm32-dev-platform-v100&quot;&gt;ST STM32 dev-platform v10.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-core-503&quot;&gt;PlatformIO Core 5.0.3&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/core/index.html&quot;&gt;PlatformIO Core&lt;/a&gt; is a heart of the whole PlatformIO ecosystem and we are glad to announce the next 5.0.3 release with improvements and bugfixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added an error selector for &lt;a href=&quot;https://docs.platformio.org/page/integration/ide/sublimetext.html&quot;&gt;Sublime Text&lt;/a&gt; build runner (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3733&quot;&gt;issue #3733&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Generate a working “projectEnvName” for PlatformIO IDE’s debugger for VSCode&lt;/li&gt;
  &lt;li&gt;Force VSCode’s intelliSenseMode to “gcc-x64” when GCC toolchain is used&lt;/li&gt;
  &lt;li&gt;Print ignored test suites and environments in the test summary report only in verbose mode (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3726&quot;&gt;issue #3726&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue when the package manager tries to install a built-in library from the registry (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3662&quot;&gt;issue #3662&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue when &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/package/cmd_pack.html&quot;&gt;pio package pack&lt;/a&gt; ignores some folders (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3730&quot;&gt;issue #3730&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.0.3&quot;&gt;Release Notes&lt;/a&gt; for more detailed information and use &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html&quot;&gt;pio upgrade&lt;/a&gt; command to update to the latest version.&lt;/p&gt;

&lt;h2 id=&quot;zephyr-v24-new-boards-initial-support-for-vmm-and-new-tcp-stack&quot;&gt;Zephyr v2.4: New boards, initial support for VMM and new TCP stack&lt;/h2&gt;

&lt;p&gt;We’re happy to announce updated support for a new release v2.4 of Zephyr Project - a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with safety and security in mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Major enhancements in v2.4:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Introduced initial support for virtual memory management, device memory-mapped I/O APIs, and reduced memory requirements for kernel thread stacks when user mode is enabled&lt;/li&gt;
  &lt;li&gt;Added Bluetooth host-level support for periodic advertisement and isochronous channels, laying the groundwork for Bluetooth LE audio support in a future release.&lt;/li&gt;
  &lt;li&gt;The networking subsystem switched over to the TCP2 implementation as the default, allowing for better network protocol testing than the previous TCP implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Zephyr framework&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.4.0&quot;&gt;Release notes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.4.0&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html&quot;&gt;Documentation for Zephyr framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#platforms&quot;&gt;Supported development platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html#boards&quot;&gt;Supported boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-sam-dev-platform-v50&quot;&gt;Atmel SAM dev-platform v5.0&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/atmelsam&quot;&gt;Atmel SAM&lt;/a&gt; dev-platform comes with updated Zephyr, Arduino frameworks and several minor improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.4.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.4.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino SAMD core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.8.9&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-samd/releases/tag/1.8.9&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Pull &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meteca&lt;/code&gt; packages from its own organization&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelsam/releases/tag/v5.0.1&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h2 id=&quot;atmel-megaavr-dev-platform-v13&quot;&gt;Atmel megaAVR dev-platform v1.3&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/atmelmegaavr&quot;&gt;Atmel megaAVR&lt;/a&gt; brings handy enhancements for dynamic fuses calculation and bootloader programming:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added support for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MegaCoreX&lt;/code&gt; fuses and bootloader programming&lt;/li&gt;
  &lt;li&gt;Fixed build process that generated broken images for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uno_wifi_rev2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano_every&lt;/code&gt; boards&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/releases/tag/v1.3.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Atmel megaAVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;shakti-risc-v-dev-platform-v11&quot;&gt;Shakti RISC-V dev-platform v1.1&lt;/h2&gt;

&lt;p&gt;The new release of the &lt;a href=&quot;https://platformio.org/platforms/shakti&quot;&gt;Shakti&lt;/a&gt; dev-platform comes with three new boards and the latest Shakti SDK:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added support for &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/shakti/parashu.html&quot;&gt;Parashu&lt;/a&gt;, &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/shakti/pinaka.html&quot;&gt;Pinaka&lt;/a&gt; and &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/shakti/vajra.html&quot;&gt;Vajra&lt;/a&gt; boards&lt;/li&gt;
  &lt;li&gt;Updated Shakti SDK to the latest available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-shakti/releases/tag/v1.1.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Shakti dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/shakti.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-shakti/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;st-stm32-dev-platform-v100&quot;&gt;ST STM32 dev-platform v10.0&lt;/h2&gt;

&lt;p&gt;Improved support for the STM32Cube framework is perhaps our most anticipated update of this version. We’ve had plans on updating it for a long time and finally we finished the development needed to use the official packages from the ST Microelectronics &lt;a href=&quot;https://github.com/STMicroelectronics?q=stm32cube&amp;amp;type=&amp;amp;language=&quot;&gt;repositories&lt;/a&gt;. Now users are able to easily develop applications using the latest STM32Cube packages for popular ST MCU families. Other updates include new boards, updated Arduino cores, improved support for Zephyr framework and several fixes and improvements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added new boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/nucleo_h745zi_q.html&quot;&gt;ST Nucleo H745ZI-Q&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/olimex_f103.html&quot;&gt;Olimex STM32-H103&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/waveshare_open103z.html&quot;&gt;Waveshare Open103Z&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated Zephyr framework to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.4.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr/releases/tag/zephyr-v2.4.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated support for STM32Cube framework&lt;/li&gt;
  &lt;li&gt;Updated Arduino Maple core to the latest available&lt;/li&gt;
  &lt;li&gt;Updated Arduino MXChip core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.0.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/microsoft/devkit-sdk/releases/tag/2.0.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor bugfixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-ststm32/releases/tag/v10.0.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h1 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h1&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the November 2020 updates of PlatformIO Open Source professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-november-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-november-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Labs joins Eclipse Foundation</title><link href="https://piolabs.com/blog/press-releases/platformio-labs-joins-eclipse-foundation.html" rel="alternate" type="text/html" title="PlatformIO Labs joins Eclipse Foundation" /><published>2020-12-01T00:00:00+02:00</published><updated>2020-12-01T00:00:00+02:00</updated><id>https://piolabs.com/blog/press-releases/platformio-labs-joins-eclipse-foundation</id><content type="html" xml:base="https://piolabs.com/blog/press-releases/platformio-labs-joins-eclipse-foundation.html">&lt;ul&gt;
  &lt;li&gt;Modern software and new standards enable more developers to tackle the embedded systems and IoT markets&lt;/li&gt;
  &lt;li&gt;Open, flexible, and neutral ecosystem tools improve growth for hardware and toolchain providers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;December 1, 2020&lt;/strong&gt;, &lt;a href=&quot;https://piolabs.com/&quot;&gt;PlatformIO Labs&lt;/a&gt;, the corporate sponsor of the beloved &lt;a href=&quot;https://platformio.org/&quot; target=&quot;_blank&quot;&gt;PlatformIO.Org&lt;/a&gt; next-generation, professional collaborative platform for embedded development, today announces joining the &lt;a href=&quot;https://www.eclipse.org/&quot; target=&quot;_blank&quot;&gt;Eclipse Foundation&lt;/a&gt; as a contributing member to introduce a tighter integration with the Eclipse ecosystem.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-12-01-platformio-labs-joins-eclipse-foundation/piolabs-joins-eclipse-foundation.jpg&quot; alt=&quot;PlatformIO Labs joins Eclipse Foundation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Eclipse ecosystem has been remarkably successful and has established the Eclipse Foundation as a leading Integrated Development Environment (IDE) platform provider. The Eclipse IDE gained popularity because of its support for cross-platform development and flexible plug-in architecture, which addresses challenges faced by developers creating complex products involving real-time operating systems and resource-constrained embedded hardware.&lt;/p&gt;

&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
&lt;p class=&quot;h2 mb-5 mb-md-7 text-center text-primary&quot;&gt;
“We are excited to welcome PlatformIO Labs as a member of the Eclipse Foundation.
PlatformIO Labs is a great example of a company with a strong commitment to the open-source community. We look forward to them contributing their expertise and collaborating on shaping the future evolution of development tools for embedded systems.”
&lt;/p&gt;
&lt;footer class=&quot;text-center&quot;&gt;
  &lt;p class=&quot;h4 mb-0&quot;&gt;Mike Milinkovich&lt;/p&gt;
  &lt;p class=&quot;font-size-sm text-muted mb-0&quot;&gt;Executive director of the Eclipse Foundation&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;p&gt;PlatformIO Labs technology and expertise complements the Eclipse ecosystem. It also provides customers with tools that are cross-platform and completely vendor-agnostic. Its modular architecture enables developers to access a best-of-breed integrated development environment, by combining their favorite editor with a choice of SDKs frameworks, and enjoying the ease by which PlatformIO’s modern and powerful features speed up yet simplify the creation and delivery of embedded products. Dependencies are automatically taken care of, advanced debugging and editing support is integrated, and all the top features found in more cumbersome, proprietary, and expensive-to-license tools are freely available. Joining the Eclipse Foundation strengthens PlatformIO Labs’ commitment to open-source software and opens up new opportunities for hardware platform vendors by improving interoperability between both hardware and supporting software technologies.&lt;/p&gt;

&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
&lt;p class=&quot;h2 mb-5 mb-md-7 text-center text-primary&quot;&gt;
&quot;We are focused on improving the lives of everyday engineers with free, open-source, and next-generation instruments that enhance professional development productivity. We're honored to become a new member of the Eclipse Foundation, an organization that shares similar values of industry collaboration and transparency. By working closely together with the Eclipse community on integrating some of our products, we can further develop and improve open-source tools that benefit the embedded systems market.&quot;
&lt;/p&gt;
&lt;footer class=&quot;text-center&quot;&gt;
  &lt;p class=&quot;h4 mb-0&quot;&gt;Ivan Kravets&lt;/p&gt;
  &lt;p class=&quot;font-size-sm text-muted mb-0&quot;&gt;Founder and CEO of PlatformIO Labs&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;h2 id=&quot;about-eclipse-foundation&quot;&gt;About Eclipse Foundation&lt;/h2&gt;

&lt;p&gt;The Eclipse Foundation provides individuals and organizations with a business-friendly environment for open source software collaboration and innovation. The Foundation is home to the Eclipse IDE, Jakarta EE, and over 375 projects, including runtimes, tools, and frameworks for cloud and edge applications, IoT, AI, automotive, systems engineering, distributed ledger technologies, open processor designs, and more. The Foundation is an international non-profit association supported by over 300 members, including industry leaders who value open source as a key enabler for their business strategies. Learn more at &lt;a href=&quot;https://www.eclipse.org/&quot; target=&quot;_blank&quot;&gt;eclipse.org&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;about-platformio-labs&quot;&gt;About PlatformIO Labs&lt;/h2&gt;

&lt;p&gt;PlatformIO Labs is the corporate sponsor behind the PlatformIO open-source project. PlatformIO is a next-generation, professional collaborative platform for embedded development that enables customers to save resources and time by vastly reducing the expenses and labor associated with creating and maintaining product software. Its modern architecture is unmatched in the embedded tools market, and the result benefits developers everywhere by simplifying complexity and increasing productivity. PlatformIO Labs is a privately-held company headquartered in Tallinn, Estonia and with an R&amp;amp;D branch in Ukraine. To learn more, follow them on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt;, Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt;, or visit &lt;a href=&quot;https://piolabs.com/&quot;&gt;piolabs.com&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="press-releases" /><summary type="html">Modern software and new standards enable more developers to tackle the embedded systems and IoT markets Open, flexible, and neutral ecosystem tools improve growth for hardware and toolchain providers December 1, 2020, PlatformIO Labs, the corporate sponsor of the beloved PlatformIO.Org next-generation, professional collaborative platform for embedded development, today announces joining the Eclipse Foundation as a contributing member to introduce a tighter integration with the Eclipse ecosystem.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-12-01-platformio-labs-joins-eclipse-foundation/piolabs-joins-eclipse-foundation.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-12-01-platformio-labs-joins-eclipse-foundation/piolabs-joins-eclipse-foundation.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Labs joins OpenHW Group</title><link href="https://piolabs.com/blog/press-releases/platformio-labs-joins-openhw-group.html" rel="alternate" type="text/html" title="PlatformIO Labs joins OpenHW Group" /><published>2020-11-23T00:00:00+02:00</published><updated>2020-11-23T00:00:00+02:00</updated><id>https://piolabs.com/blog/press-releases/platformio-labs-joins-openhw-group</id><content type="html" xml:base="https://piolabs.com/blog/press-releases/platformio-labs-joins-openhw-group.html">&lt;ul&gt;
  &lt;li&gt;A free, modern software development ecosystem is the perfect complement to support open hardware communities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;November 23, 2020&lt;/strong&gt;, &lt;a href=&quot;https://piolabs.com/&quot;&gt;PlatformIO Labs&lt;/a&gt;, an independent provider of next-generation technology for the embedded systems industry, joins the &lt;a href=&quot;https://www.openhwgroup.org/&quot; target=&quot;_blank&quot;&gt;OpenHW Group&lt;/a&gt; to bring its extensive expertise in the development and design of modern embedded development environments to the open hardware community. &lt;!-- more --&gt; PlatformIO tooling supports developers at various complexity levels from newcomers to avid professionals. Built-in platform-specific examples yield quick success and encourage developers to adopt open hardware while accelerating the time to market of new products.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-11-23-platformio-labs-joins-openhw-group/piolabs-joins-openhw.jpg&quot; alt=&quot;PlatformIO Labs joins OpenHW Group&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Established just a year ago, the OpenHW group has already achieved significant results by engaging world-class partners and releasing the CORE-V family of open-source RISC-V cores. This family of high-quality core IP is in line with industry best practices in both silicon and FPGA optimized implementations. CORE-V IP collaboration among members drives faster innovation for all.&lt;/p&gt;

&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
&lt;p class=&quot;h2 mb-5 mb-md-7 text-center text-primary&quot;&gt;
&quot;We are happy to welcome PlatformIO Labs as a new member in the OpenHW Group and look forward to their contributions. The community will greatly benefit from their broad expertise to boost further adoption of the CORE-V family of open-source RISC-V cores.&quot;
&lt;/p&gt;
&lt;footer class=&quot;text-center&quot;&gt;
  &lt;p class=&quot;h4 mb-0&quot;&gt;Rick O’Connor&lt;/p&gt;
  &lt;p class=&quot;font-size-sm text-muted mb-0&quot;&gt;President &amp;amp; CEO of the OpenHW Group&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;p&gt;PlatformIO Labs provides customers with a flexible and completely vendor-neutral development ecosystem. PlatformIO’s modular and modern design supports the integration of semiconductors and software needed to create new products. Developers enjoy a simplified process that is easier to debug, is reproducible, and that speeds their delivery of embedded products. The partnership underscores PlatformIO Labs’ goal to provide highly customizable and robust development instruments to the RISC-V ecosystem and the OpenHW Group community.&lt;/p&gt;

&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
&lt;p class=&quot;h2 mb-5 mb-md-7 text-center text-primary&quot;&gt;
&quot;Having already supported RISC-V cores since the earliest days, we are excited to become a member of the OpenHW Group and continue to improve our vendor-agnostic tools for CORE-V IP. We look forward to collaborating with industry leaders in the OpenHW Group to accelerate the RISC-V industry towards modern and flexible open-source development tools.&quot;
&lt;/p&gt;
&lt;footer class=&quot;text-center&quot;&gt;
  &lt;p class=&quot;h4 mb-0&quot;&gt;Ivan Kravets&lt;/p&gt;
  &lt;p class=&quot;font-size-sm text-muted mb-0&quot;&gt;Founder and CEO the of PlatformIO Labs&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;hr class=&quot;hr-md my-7&quot; /&gt;

&lt;h2 id=&quot;about-openhw-group&quot;&gt;About OpenHW Group&lt;/h2&gt;

&lt;p&gt;OpenHW Group is a not-for-profit, global organization driven by its members and individual contributors where hardware and software designers collaborate in the development of open-source cores, related IP, tools and software. OpenHW provides an infrastructure for hosting high-quality open-source HW developments in line with industry best practices.&lt;/p&gt;

&lt;p&gt;CORE-V is a series of RISC-V based open-source cores with associated processor subsystem IP, tools and software for electronic system designers. The CORE-V family provides quality core IP in line with industry best practices. The IP is available in both silicon and FPGA optimized implementations. These cores can be used to facilitate rapid design innovation and ensure effective manufacturability of high-volume production SoCs.&lt;/p&gt;

&lt;p&gt;To learn more, visit &lt;a href=&quot;https://www.openhwgroup.org/&quot; target=&quot;_blank&quot;&gt;OpenHWGroup.org&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;about-platformio-labs&quot;&gt;About PlatformIO Labs&lt;/h2&gt;

&lt;p&gt;PlatformIO Labs is the corporate sponsor behind the PlatformIO open-source project. PlatformIO is a next-generation, professional collaborative platform for embedded development that enables customers to save resources and time by vastly reducing the expenses and labor associated with creating and maintaining product software. Its modern architecture is unmatched in the embedded tools market, and the result benefits developers everywhere by simplifying complexity and increasing productivity. PlatformIO Labs is a privately-held company headquartered in Tallinn, Estonia and with an R&amp;amp;D branch in Ukraine. To learn more, follow them on &lt;a href=&quot;https://www.linkedin.com/company/platformio&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt;, Twitter &lt;a href=&quot;https://twitter.com/PlatformIO_Org&quot; target=&quot;_blank&quot;&gt;@PlatformIO_Org&lt;/a&gt;, or visit &lt;a href=&quot;https://piolabs.com/&quot;&gt;piolabs.com&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="press-releases" /><summary type="html">A free, modern software development ecosystem is the perfect complement to support open hardware communities. November 23, 2020, PlatformIO Labs, an independent provider of next-generation technology for the embedded systems industry, joins the OpenHW Group to bring its extensive expertise in the development and design of modern embedded development environments to the open hardware community.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-11-23-platformio-labs-joins-openhw-group/piolabs-joins-openhw.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-11-23-platformio-labs-joins-openhw-group/piolabs-joins-openhw.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Analyze your firmware footprint with PlatformIO: Part 1. Intro and basic analysis</title><link href="https://piolabs.com/blog/insights/memory-analysis-part-1.html" rel="alternate" type="text/html" title="Analyze your firmware footprint with PlatformIO: Part 1. Intro and basic analysis" /><published>2020-11-16T00:00:00+02:00</published><updated>2020-11-16T00:00:00+02:00</updated><id>https://piolabs.com/blog/insights/memory-analysis-part-1</id><content type="html" xml:base="https://piolabs.com/blog/insights/memory-analysis-part-1.html">&lt;p&gt;Nowadays, microcontrollers are becoming more powerful and efficient, but at the same time, embedded applications are getting even more sophisticated. That complexity requires additional RAM and Flash memory to support all expected features.&lt;!-- more --&gt;  Besides, if a device needs additional memory to perform over-the-air updates then the memory requirements become even more crucial.&lt;/p&gt;

&lt;p&gt;This blog post is the first part of a series on how to analyze the memory footprint in the PlatformIO ecosystem. We will start by analyzing the default memory report after the successful compilation, in the next posts we’ll try more advanced PlatformIO instruments which help analyze application memory usage more precisely and comprehensively.&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#executables&quot; id=&quot;markdown-toc-executables&quot;&gt;Executables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#memory-layout&quot; id=&quot;markdown-toc-memory-layout&quot;&gt;Memory layout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#real-world-example&quot; id=&quot;markdown-toc-real-world-example&quot;&gt;Real-world Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;executables&quot;&gt;Executables&lt;/h2&gt;

&lt;p&gt;Typically the process of creating an executable consists of several steps and uses a few tools from an appropriate toolchain package. After source files are compiled, the corresponding relocatable object files and additional libraries are linked together into an executable file by a special tool called “linker”. The linker knows where to place the data from object files and libraries by reading linker scripts that describe the actual memory structure specific to the hardware and a use case.&lt;/p&gt;

&lt;figure class=&quot;figure mb-7&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-1.png&quot; alt=&quot;Compilation and linking process&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Linking process
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Describing the compilation process is outside the scope of this article. If you are interested in the understanding of compilation and linking processes, here is &lt;a href=&quot;https://blog.feabhas.com/2012/06/the-c-build-process/&quot; target=&quot;_blank&quot;&gt;a great introduction&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;memory-layout&quot;&gt;Memory layout&lt;/h2&gt;

&lt;p&gt;There are several formats of binary files, one of the most used is &lt;a href=&quot;https://en.wikipedia.org/wiki/Executable_and_Linkable_Format&quot; target=&quot;_blank&quot;&gt;Executable and Linkable Format&lt;/a&gt; (ELF) which is quite widespread among different platforms. To move further to the next steps, we need to get acquainted with the most important memory sections. Typically, an application contains the following commonly known sections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; - contains data that can be modified by the application at runtime (statically initialized global and local variables without the default value). Usually, the system initializes this data with zeros before the program begins to run.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.data&lt;/code&gt; - contains data that can be modified by the application at runtime (statically initialized global and local variables with the default value)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rodata&lt;/code&gt; - a read-only section for constant data (e.g. numeric constants, strings, etc)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.text&lt;/code&gt; - a read-only section that contains the executable instructions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An approximate memory layout for a hypothetical target might be organized in the following way:&lt;/p&gt;

&lt;figure class=&quot;figure mb-7&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-2.png&quot; alt=&quot;Memory layout of a simple embedded binary&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Memory layout of a simple embedded binary
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As shown on the figure above, the free memory area between the end of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bss&lt;/code&gt; section and the lowest address in the stack can be be used for dynamic memory allocations.&lt;/p&gt;

&lt;h2 id=&quot;real-world-example&quot;&gt;Real-world Example&lt;/h2&gt;

&lt;p&gt;Let’s try to run a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blink&lt;/code&gt; example based on the &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/stm32cube.html&quot; target=&quot;_blank&quot;&gt;STM32Cube&lt;/a&gt; framework on any supported board, in this article &lt;a href=&quot;https://docs.platformio.org/en/latest/boards/ststm32/nucleo_f401re.html&quot; target=&quot;_blank&quot;&gt;ST Nucleo-F401RE&lt;/a&gt; is used.&lt;/p&gt;

&lt;p&gt;First, we need to install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ST STM32&lt;/code&gt; platform by following instructions on &lt;a href=&quot;https://platformio.org/platforms/ststm32/installation&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;. Once the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ststm32&lt;/code&gt; dev-platform is installed, we can import a basic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STM32Cube&lt;/code&gt; example and compile it:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown on the image above, after the successful compilation PlatformIO reported basic information about Flash and RAM usage. In our case, it’s 44 bytes of RAM and 1244 bytes of Flash memory. This approximate information should be enough for most cases when developers just need to verify that new changes to the code base don’t introduce unnecessary memory overhead. But if such overhead has occurred, it might be useful to compile the project in verbose mode and see what exact sections are using up the largest part of the memory:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, we see the memory footprint per section and their addresses in the decimal format. The most interesting of them were already described in the previous chapter, so let’s focus on a few new items (keep in mind that the full format of the ELF contains many more items):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;._user_heap_stack&lt;/code&gt; - an auxiliary section specified in the linker script that checks whether there is enough RAM left&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ARM.attributes&lt;/code&gt; - a section for hardware-specific attributes&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.comment&lt;/code&gt; - a section that holds version control information&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.debug_frame&lt;/code&gt; - additional debug information (part of the DWARF standard)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.isr_section&lt;/code&gt; - interrupt vector table at the start of the Flash memory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.init_array&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.fini_array&lt;/code&gt; - sections that hold arrays of pointers to functions that will be called on application initialization and termination accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;As it turned out, memory analysis is not that hard and even the default build information contains enough data to help estimate the memory footprint. In the next article, we’ll run through advanced PlatformIO instruments that show different ways of optimizing embedded applications by generating more comprehensive reports on memory usage.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="insights" /><summary type="html">Nowadays, microcontrollers are becoming more powerful and efficient, but at the same time, embedded applications are getting even more sophisticated. That complexity requires additional RAM and Flash memory to support all expected features.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-2.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-11-16-memory-analysis-part-1/memory-analysis-part-1-2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Open Source October Updates</title><link href="https://piolabs.com/blog/news/platformio-oss-october-updates.html" rel="alternate" type="text/html" title="PlatformIO Open Source October Updates" /><published>2020-11-02T00:00:00+02:00</published><updated>2020-11-02T00:00:00+02:00</updated><id>https://piolabs.com/blog/news/platformio-oss-october-updates</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-oss-october-updates.html">&lt;p&gt;Welcome to the October 2020 updates of &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO Open Source&lt;/a&gt; professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/oss-updates/platformio-oss-october-news.jpg&quot; alt=&quot;PlatformIO Open Source October Updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This month, we launched new features and improvements, fixed a lot of issues, rolled out new updates for Nordic nRF52 and Microchip AVR/megaAVR platforms. Some of the key highlights include:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#platformio-core-502&quot; id=&quot;markdown-toc-platformio-core-502&quot;&gt;PlatformIO Core 5.0.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-avr-dev-platform-v30&quot; id=&quot;markdown-toc-atmel-avr-dev-platform-v30&quot;&gt;Atmel AVR dev-platform v3.0&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#avr-gdb-stub&quot; id=&quot;markdown-toc-avr-gdb-stub&quot;&gt;AVR GDB stub&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#atmel-megaavr-dev-platform-v12&quot; id=&quot;markdown-toc-atmel-megaavr-dev-platform-v12&quot;&gt;Atmel megaAVR dev-platform v1.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nordic-nrf52-dev-platform-v45&quot; id=&quot;markdown-toc-nordic-nrf52-dev-platform-v45&quot;&gt;Nordic nRF52 dev-platform v4.5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stay-in-touch-with-us&quot; id=&quot;markdown-toc-stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platformio-core-502&quot;&gt;PlatformIO Core 5.0.2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/core/index.html&quot;&gt;PlatformIO Core&lt;/a&gt; is a heart of the whole PlatformIO ecosystem and we are glad to announce the next 5.0.2 release with a lot of improvements and bugfixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initialize a new project or update the existing passing working environment name and its options (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3686&quot;&gt;issue #3686&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Automatically build PlatformIO Core extra Python dependencies on a host machine if they are missed in the registry (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3700&quot;&gt;issue #3700&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Improved “core.call” RPC for PlatformIO Home (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3671&quot;&gt;issue #3671&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed a “PermissionError: [WinError 5]” on Windows when an external repository is used with &lt;a href=&quot;https://docs.platformio.org/page/projectconf/section_env_library.html#lib-deps&quot;&gt;lib_deps&lt;/a&gt; option (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3664&quot;&gt;issue #3664&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed a “KeyError: ‘versions’” when dependency does not exist in the registry (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3666&quot;&gt;issue #3666&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue with GCC linker when “native” dev-platform is used in pair with library dependencies (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3669&quot;&gt;issue #3669&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an “AssertionError: ensure_dir_exists” when checking library updates from simultaneous subprocesses (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3677&quot;&gt;issue #3677&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue when &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/package/cmd_publish.html&quot;&gt;pio package publish&lt;/a&gt; command removes original archive after submitting to the registry (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3716&quot;&gt;issue #3716&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue when multiple &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/lib/cmd_install.html&quot;&gt;pio lib install&lt;/a&gt; command with the same local library results in duplicates in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib_deps&lt;/code&gt; (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3715&quot;&gt;issue #3715&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed an issue with a “wrong” timestamp in device monitor output using &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/device/cmd_monitor.html#filters&quot;&gt;“time” filter&lt;/a&gt; (&lt;a href=&quot;https://github.com/platformio/platformio-core/issues/3712&quot;&gt;issue #3712&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.0.2&quot;&gt;Release Notes&lt;/a&gt; for more detailed information and use &lt;a href=&quot;https://docs.platformio.org/en/latest/core/userguide/cmd_upgrade.html&quot;&gt;pio upgrade&lt;/a&gt; command to update to the latest version.&lt;/p&gt;

&lt;h2 id=&quot;atmel-avr-dev-platform-v30&quot;&gt;Atmel AVR dev-platform v3.0&lt;/h2&gt;

&lt;p&gt;Happy to announce a massive update for &lt;a href=&quot;https://platformio.org/platforms/atmelavr&quot;&gt;Atmel AVR&lt;/a&gt; dev-platform (supports 8-bit MCUs that deliver a unique combination of performance, power efficiency and design flexibility):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Added initial support for &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debug-tools/avr-stub.html&quot;&gt;avr-stub&lt;/a&gt; debug tool based on &lt;a href=&quot;https://github.com/jdolinay/avr_debug&quot;&gt;avr_debug&lt;/a&gt; GDB stub&lt;/li&gt;
  &lt;li&gt;Updated cores:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino AVR&lt;/code&gt; v1.8.3&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MightyCore&lt;/code&gt; v2.0.6 (&lt;a href=&quot;https://github.com/MCUdude/MightyCore/releases/tag/v2.0.6&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MiniCore&lt;/code&gt; v2.0.7 (&lt;a href=&quot;https://github.com/MCUdude/MiniCore/releases/tag/v2.0.7&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MegaCore&lt;/code&gt; v2.0.4 (&lt;a href=&quot;https://github.com/MCUdude/MegaCore/releases/tag/v2.0.4&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MajorCore&lt;/code&gt; v2.0.3 (&lt;a href=&quot;https://github.com/MCUdude/MajorCore/releases/tag/v2.0.3&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MicroCore&lt;/code&gt; v1.0.7 (&lt;a href=&quot;https://github.com/MCUdude/MicroCore/releases/tag/v1.0.7&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Improved support for more flexible fuses and bootloader programming. More information with examples in the &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelavr.html#overriding-default-fuses-command&quot;&gt;docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelavr/releases/tag/v3.0.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h3 id=&quot;avr-gdb-stub&quot;&gt;AVR GDB stub&lt;/h3&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-11-02-oss-october-updates/avr-stub-demo.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-11-02-oss-october-updates/avr-stub-demo.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AVR GDB stub is a source-level debugger based on the GDB stub mechanism that allows debugging for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATmega328&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATmega1280&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATmega2560&lt;/code&gt; MCUs using only a serial port, so no additional hardware is required.&lt;/p&gt;

&lt;p&gt;More detailed information about configuration steps and inherent limitations can be found in the AVR GDB stub &lt;a href=&quot;https://docs.platformio.org/en/latest/plus/debug-tools/avr-stub.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Atmel AVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;atmel-megaavr-dev-platform-v12&quot;&gt;Atmel megaAVR dev-platform v1.2&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/atmelmegaavr&quot;&gt;Atmel megaAVR&lt;/a&gt; dev-platform adds support for new boards and &lt;a href=&quot;https://github.com/MCUdude/MegaCoreX&quot;&gt;MCUDude/MegaCoreX&lt;/a&gt; Arduino core:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New boards:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega1608.html&quot;&gt;ATmega1608&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega1609.html&quot;&gt;ATmega1609&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega3208.html&quot;&gt;ATmega3208&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega3209.html&quot;&gt;ATmega3209&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega4808.html&quot;&gt;ATmega4808&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega4809.html&quot;&gt;ATmega4809&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega808.html&quot;&gt;ATmega808&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/ATmega809.html&quot;&gt;ATmega809&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/avr_iot_wg.html&quot;&gt;avr_iot_wg&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/curiosity_nano_4809.html&quot;&gt;curiosity_nano_4809&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/boards/atmelmegaavr/xplained_pro_4809.html&quot;&gt;xplained_pro_4809&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Added support for &lt;a href=&quot;https://github.com/MCUdude/MegaCoreX&quot;&gt;MCUDude/MegaCoreX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/releases/tag/v1.2.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Atmel megaAVR dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/atmelmegaavr.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-atmelmegaavr/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nordic-nrf52-dev-platform-v45&quot;&gt;Nordic nRF52 dev-platform v4.5&lt;/h2&gt;

&lt;p&gt;The new release of &lt;a href=&quot;https://platformio.org/platforms/nordicnrf52&quot;&gt;Nordic nRF52&lt;/a&gt; dev-platform comes with updated Arduino cores and other improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Arduino Core for mbed enabled devices to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.3.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/arduino/ArduinoCore-mbed/releases/tag/1.3.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Updated Arduino Adafruit core to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.21.0&lt;/code&gt; (&lt;a href=&quot;https://github.com/adafruit/Adafruit_nRF52_Arduino/releases/tag/0.21.0&quot;&gt;release notes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Minor fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/platformio/platform-nordicnrf52/releases/tag/v4.5.0&quot;&gt;Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related resources for Nordic nRF52 dev-platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/platformio/platform-nordicnrf52/tree/develop/examples&quot;&gt;Project Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/nordicnrf52.html#tutorials&quot;&gt;Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;stay-in-touch-with-us&quot;&gt;Stay in touch with us&lt;/h1&gt;

&lt;p&gt;We hope this summary has been useful. Please &lt;a href=&quot;https://www.linkedin.com/company/platformio/&quot; target=&quot;_blank&quot;&gt;follow us on LinkedIn&lt;/a&gt; to keep up to date with all our activity.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="news" /><summary type="html">Welcome to the October 2020 updates of PlatformIO Open Source professional collaborative platform for embedded development. There are plenty of updates pushed in this month that we hope you will like.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-october-news.jpg" /><media:content medium="image" url="https://piolabs.com/assets/posts/oss-updates/platformio-oss-october-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Enabling PlatformIO and Zephyr on custom hardware</title><link href="https://piolabs.com/blog/engineering/platformio-zephyr-custom-hardware.html" rel="alternate" type="text/html" title="Enabling PlatformIO and Zephyr on custom hardware" /><published>2020-10-12T00:00:00+03:00</published><updated>2020-10-12T00:00:00+03:00</updated><id>https://piolabs.com/blog/engineering/platformio-zephyr-custom-hardware</id><content type="html" xml:base="https://piolabs.com/blog/engineering/platformio-zephyr-custom-hardware.html">&lt;p&gt;In this post, we will create a simple BLE beacon that broadcasts its name as the payload. We will use the Zephyr RTOS on a custom board based on the Nordic nRF52833 SoC. A JLink debug probe will be used for uploading and debugging our application.&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot; id=&quot;markdown-toc-prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-the-zephyr-project&quot; id=&quot;markdown-toc-what-is-the-zephyr-project&quot;&gt;What is the Zephyr Project?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot; id=&quot;markdown-toc-getting-started&quot;&gt;Getting Started&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#installing-nordic-nrf52-dev-platform&quot; id=&quot;markdown-toc-installing-nordic-nrf52-dev-platform&quot;&gt;Installing Nordic nRF52 dev-platform&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#project-setup&quot; id=&quot;markdown-toc-project-setup&quot;&gt;Project setup&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#adding-a-custom-board-to-zephyr&quot; id=&quot;markdown-toc-adding-a-custom-board-to-zephyr&quot;&gt;Adding a custom board to Zephyr&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#adding-a-custom-board-to-platformio&quot; id=&quot;markdown-toc-adding-a-custom-board-to-platformio&quot;&gt;Adding a custom board to PlatformIO&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#compile-and-upload&quot; id=&quot;markdown-toc-compile-and-upload&quot;&gt;Compile and Upload&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#debugging&quot; id=&quot;markdown-toc-debugging&quot;&gt;Debugging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;This article uses the following components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/en/latest/integration/ide/vscode.html&quot;&gt;VSCode with installed PlatformIO IDE extension&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Any board based on &lt;a href=&quot;https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52833&quot;&gt;Nordic nRF52833 SoC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Any &lt;a href=&quot;https://www.segger.com/products/debug-probes/j-link/&quot;&gt;JLink probe&lt;/a&gt; (used for uploading and debugging)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-the-zephyr-project&quot;&gt;What is the Zephyr Project?&lt;/h2&gt;

&lt;p&gt;The Zephyr Project is a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource-constrained devices, and built with security in mind.&lt;/p&gt;

&lt;p&gt;The Zephyr Project is perfect for building simple connected sensors, LED wearables, up to modems and small IoT wireless gateways. Because the Zephyr RTOS is modular and supports multiple architectures, developers are able to easily come up with optimal applications to meet their needs. As a true open source project, the community can evolve the project to support new hardware, developer tools, sensors, and device drivers. Enhancements in security, device management capabilities, connectivity stacks, and file systems can be easily implemented.&lt;/p&gt;

&lt;p&gt;Zephyr RTOS has several great features that make it a good choice for developing embedded applications. The Zephyr RTOS’s goal is to establish a neutral project where silicon vendors, OEMs, ODMs, ISVs, and OSVs can contribute technology to reduce the cost and accelerate time to market for developing the billions of devices that will make up the majority of the Internet of Things. The operating system itself also has a number of powerful features, including a device model, symmetric multiprocess support, and rich networking and Bluetooth stacks.&lt;/p&gt;

&lt;p&gt;Zephyr RTOS is open source under the Apache 2.0 license and the source code is available on &lt;a href=&quot;https://github.com/zephyrproject-rtos/zephyr&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;h3 id=&quot;installing-nordic-nrf52-dev-platform&quot;&gt;Installing Nordic nRF52 dev-platform&lt;/h3&gt;

&lt;p&gt;PlatformIO dev-platforms contain a lot of required information about supported packages (toolchains, SDKs, uploaders, etc), configurations for popular development boards/kits, examples. Also, all dev-platforms include predefined build scripts that help you compile, upload, and debug embedded applications. The platform can be installed automatically when you run your project the first time we can use &lt;a href=&quot;https://docs.platformio.org/en/latest/home/index.html&quot;&gt;PlatformIO Home&lt;/a&gt; directly in the IDE.&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-2.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-2.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can install the platform manually from CLI using the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;platformio platform &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nordicnrf52
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;project-setup&quot;&gt;Project setup&lt;/h3&gt;

&lt;p&gt;Once the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nordicnrf52&lt;/code&gt; dev-platform is installed, we have everything to start developing for the Zephyr RTOS. The platform already contains a BLE beacon example that we can use as a boilerplate for our project. To import the example, open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlatformIO Home&lt;/code&gt; page and press the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Examples&lt;/code&gt; button in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quick Access&lt;/code&gt; menu, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zephyr-ble-beacon&lt;/code&gt; in the input field and push the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-3.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the successful import you should see a typical PlatformIO project with a bunch of folders and a special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project_dir
├── include
├── lib
├── src
│    └── main.c
├── test
├── zephyr
│    ├── prj.conf
│    └── CMakeLists.txt
└── platformio.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Besides files and folders related to PlatformIO, there is a special folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zephyr&lt;/code&gt; that contains Zephyr-specific files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prj.conf&lt;/code&gt;, a rough description of these files is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;: tells the build system where to find the other application files, and links the application directory with Zephyr’s build system. This link provides features supported by Zephyr’s build system, such as board-specific kernel configuration files, the ability to run and debug compiled binaries on real or emulated hardware, and more.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prj.conf&lt;/code&gt;: describes application-specific values for one or more kernel configuration options. These application settings are merged with board-specific settings to produce a kernel configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since PlatformIO is able to generate CMake-based projects for certain IDEs, Zephyr-specific files are moved to a separate folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zephyr&lt;/code&gt; in order to avoid conflicts between CMakeLists.txt files. That requires users to specify relative paths to source files in already existing projects. After adding Zephyr-specific files, our project should look like this:&lt;/p&gt;

&lt;p&gt;If you need more information about configuration steps, please go through the official PlatformIO &lt;a href=&quot;https://docs.platformio.org/en/latest/frameworks/zephyr.html&quot;&gt;configuration guide&lt;/a&gt; for the Zephyr project.&lt;/p&gt;

&lt;h3 id=&quot;adding-a-custom-board-to-zephyr&quot;&gt;Adding a custom board to Zephyr&lt;/h3&gt;

&lt;p&gt;Since our board is neither directly supported by Zephyr nor by PlatformIO, we need to create the required board files manually. First, let’s add support for our board to Zephyr. There is comprehensive &lt;a href=&quot;https://docs.zephyrproject.org/latest/application/index.html#custom-board-definition&quot;&gt;official Zephyr documentation&lt;/a&gt; on how to integrate out-of-tree board definitions. In a nutshell, the structure needed to support an out-of-tree board or SoC development is similar to how boards and SoCs are maintained in the official Zephyr tree.&lt;/p&gt;

&lt;p&gt;Fortunately, our board uses the Nordic nRF52833 SoC that’s already supported and used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nrf52833dk_nrf52833&lt;/code&gt; board. We can use that board as boilerplate, so we just need to copy and modify the board files according to our needs. Adding a custom board is usually done using the following structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boards/&amp;lt;architecture&amp;gt;/&amp;lt;board_name&amp;gt;&lt;/code&gt;. Files in this folder extend the SoC configuration, apply the pin-muxing settings, and much more. A special file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;board_name&amp;gt;_defconfig&lt;/code&gt; defines which SoC and basic features and interfaces are included.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PLATFORMIO_PACKAGES_DIR/framework-zephyr/boards/arm/nrf52833dk_nrf52833&lt;/code&gt; where &lt;a href=&quot;https://docs.platformio.org/en/latest/projectconf/section_platformio.html?highlight=core_dir#packages-dir&quot;&gt;PLATFORMIO_PACKAGES_DIR&lt;/a&gt; is a special folder with all installed PlatformIO packages. Copy all files from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nrf52833dk_nrf52833&lt;/code&gt; folder to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zephyr&lt;/code&gt; folder in our project so the final path will look like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zephyr/boards/arm/ble_beacon_nrf52833&lt;/code&gt;. Then rename the files according to our board name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ble_beacon_nrf52833&lt;/code&gt;, the final files should look like the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;board.cmake
Kconfig
Kconfig.board
Kconfig.defconfig
ble_beacon_nrf52833_defconfig
ble_beacon_nrf52833.dts
ble_beacon_nrf52833.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that we need to fix values in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kconfig.board&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kconfig.defconfig&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ble_beacon_nrf52833.yaml&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ble_beacon_nrf52833_defconfig&lt;/code&gt; so the Zephyr build system will be able to generate configuration and C definitions for our board.&lt;/p&gt;

&lt;p&gt;Once the board structure is ready, we need to specify the location of our custom board information with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOARD_ROOT&lt;/code&gt; parameter to the CMake build system. The easiest way is to specify this path at the top of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeList.txt&lt;/code&gt; file like this:&lt;/p&gt;

&lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Path to out-of-tree boards definitions&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;BOARD_ROOT &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cmake_minimum_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;VERSION 3.13.1&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;$ENV{ZEPHYR_BASE}/cmake/app/boilerplate.cmake NO_POLICY_SCOPE&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;custom-board&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;target_sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;app PRIVATE ../src/main.c&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;adding-a-custom-board-to-platformio&quot;&gt;Adding a custom board to PlatformIO&lt;/h3&gt;

&lt;p&gt;The next step is to add support for our board to the PlatformIO &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nordicnrf52&lt;/code&gt; dev-platform. The easiest and most portable way to do it is to create a new folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boards&lt;/code&gt; in the root of our project and add a special JSON manifest file with the name of our board &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ble_beacon_nrf52833.json&lt;/code&gt; and with the following contents:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cpu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cortex-m4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;f_cpu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;64000000L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mcu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nrf52833&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;zephyr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;variant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ble_beacon_nrf52833&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;connectivity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bluetooth&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;jlink_device&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nRF52833_xxAA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;svd_path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nrf52.svd&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;frameworks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zephyr&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BLE Beacon nRF52833&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;upload&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;maximum_ram_size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;131072&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;maximum_size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;524288&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;protocol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jlink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;protocols&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jlink&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Vendor Name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s briefly go through the main parts of the above configuration:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; section contains information about CPU architecture, framework configurations, MCU name, etc. As the variant for Zephyr, we specified the same name as the board name used in the Zephyr configuration files&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug&lt;/code&gt; section sets the configuration for debug tools and the path SVD file. Since we plan to use a JLink probe, we need to specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jlink_device&lt;/code&gt; name used for connecting to our board. The list of supported JLink devices can be found on &lt;a href=&quot;https://www.segger.com/downloads/supported-devices.php&quot;&gt;the official JLink website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;framework&lt;/code&gt; represents is a list of supported frameworks/SDKs which can be used with our board. We plan to use only Zephyr, so we specified only one framework.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upload&lt;/code&gt; section specifies maximum memory sizes and available upload protocols. We specified &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jlink&lt;/code&gt; as the protocol since we plan to use the debug probe to upload firmware to the device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other sections are not mandatory, but they might be useful if we decide to push our board manifest to the upstream repository to make the board publicly available for other users.
More detailed information about the JSON structure of board manifests can be found in the &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/creating_board.html#json-structure&quot;&gt;PlatformIO Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The final project structure should like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project_dir
├── boards
│     └── ble_beacon_nrf52833.json
├── include
├── lib
├── src
│    └── main.c
├── test
├── zephyr
│    ├── boards
│    │     └── arm
│    │          └── ble_beacon_nrf52833
│    ├── prj.conf
│    └── CMakeLists.txt
└── platformio.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that we can use the new board in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:ble_beacon_nrf52833]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nordicnrf52&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zephyr&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ble_beacon_nrf52833&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; Use the debug probe for uploading
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;upload_protocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jlink&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we need to specify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jlink&lt;/code&gt; as the upload method to force PlatformIO to use the debug probe for uploading.&lt;/p&gt;

&lt;h3 id=&quot;compile-and-upload&quot;&gt;Compile and Upload&lt;/h3&gt;

&lt;p&gt;After the previous configuration steps, we are ready to compile the project. It can be done using the CLI command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio run&lt;/code&gt; or via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build&lt;/code&gt; button on the Toolbar:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-4.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything went well, we should see a successful result message in the terminal window:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-5.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-5.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uploading the code to the board varies across hardware platforms. As for this article, the board is connected to the computer via a JLink debug probe so it will be used to flash the firmware. Just make sure your board is connected to the computer and run the CLI command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio run -t upload&lt;/code&gt; or use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Upload&lt;/code&gt; button on the Toolbar:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-6.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-6.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything went well, we can open any desktop/mobile application which is able to show near BLE devices, for example here is how the device is showed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nRF Connect&lt;/code&gt; tool:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-7.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-7.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;debugging&quot;&gt;Debugging&lt;/h3&gt;

&lt;p&gt;The PlatformIO dev-platforms already have predefined configurations for popular debug probes, including the JLink probe used in this article. All we need is to specify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug_tool&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:ble_beacon_nrf52833]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nordicnrf52&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zephyr&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ble_beacon_nrf52833&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;upload_protocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jlink&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;debug_tool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jlink&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and push the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Debug&lt;/code&gt; button. PlatformIO will do all the heavy lifting for us:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-8.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-100&quot; src=&quot;/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-8.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post, we went over:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An introduction to the Zephyr project&lt;/li&gt;
  &lt;li&gt;Setup and installation steps&lt;/li&gt;
  &lt;li&gt;Adding a custom board to Zephyr and PlatformIO&lt;/li&gt;
  &lt;li&gt;Compiling and uploading a simple BLE example&lt;/li&gt;
  &lt;li&gt;Debugging the application using a JLink probe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zephyr RTOS is a promising project with a long list of supported hardware. The active community, permissive license, comprehensive documentation, rich set of features, focus on security all this makes Zephyr a great choice for modern embedded development.&lt;/p&gt;</content><author><name>Valerii Koval</name></author><category term="blog" /><category term="engineering" /><summary type="html">In this post, we will create a simple BLE beacon that broadcasts its name as the payload. We will use the Zephyr RTOS on a custom board based on the Nordic nRF52833 SoC. A JLink debug probe will be used for uploading and debugging our application. Table of Contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-1.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-10-12-platformio-zephyr-custom-hardware/platformio-zephyr-custom-hardware-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO IDE 2.0 for VSCode 🚀</title><link href="https://piolabs.com/blog/news/platformio-ide-2-0-for-vscode-released.html" rel="alternate" type="text/html" title="PlatformIO IDE 2.0 for VSCode 🚀" /><published>2020-09-10T00:00:00+03:00</published><updated>2020-09-10T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-ide-2-0-for-vscode-released</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-ide-2-0-for-vscode-released.html">&lt;p&gt;We are happy to announce the major release of &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide&quot; target=&quot;_blank&quot;&gt;PlatformIO IDE 2.0 for Microsoft Visual Studio Code (VSCode)&lt;/a&gt; that brings “Task Explorer”, “Project Environment Switcher”, and a new installer!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/2020-09-10-platformio-ide-2-0-for-vscode-released/platformio-ide-for-vscode.png&quot; alt=&quot;PlatformIO IDE 2.0 for VSCode 🚀&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-new&quot; id=&quot;markdown-toc-what-is-new&quot;&gt;What is New&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#task-explorer&quot; id=&quot;markdown-toc-task-explorer&quot;&gt;Task Explorer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#project-environment-switcher&quot; id=&quot;markdown-toc-project-environment-switcher&quot;&gt;Project Environment Switcher&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#new-installer&quot; id=&quot;markdown-toc-new-installer&quot;&gt;New Installer&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#upgrade&quot; id=&quot;markdown-toc-upgrade&quot;&gt;Upgrade&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-new&quot;&gt;What is New&lt;/h2&gt;

&lt;p&gt;In this section, we are going to highlight the most important changes and
features introduced in PlatformIO IDE 2.0 for VSCode. Please visit &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/releases/tag/v2.0.0&quot; target=&quot;_blank&quot;&gt;PlatformIO IDE for VSCode Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h3 id=&quot;task-explorer&quot;&gt;Task Explorer&lt;/h3&gt;

&lt;p&gt;PlatformIO IDE 2.0 for VSCode finally brings a powerful task explorer with the next features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instant access to the Project Tasks within the VSCode Explorer&lt;/li&gt;
  &lt;li&gt;Grouped tasks: Generic, Advanced, Remote Development, Platform, Custom, etc.&lt;/li&gt;
  &lt;li&gt;Support for PlatformIO &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/index.html&quot;&gt;development platform&lt;/a&gt; targets (Program FPGA bitstream, Burn bootloader, Upload to FS, OTA Update, etc). The list of tasks depends on a particular dev-platform&lt;/li&gt;
  &lt;li&gt;Access to &lt;a href=&quot;https://docs.platformio.org/page/projectconf/advanced_scripting.html#custom-targets&quot;&gt;User Custom Targets&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The latest version of &lt;a href=&quot;https://platformio.org/platforms/chipsalliance&quot;&gt;CHIPS Alliance&lt;/a&gt; dev-platform provides custom targets such as programming of FPGA board, starting simulator, etc. See a demo of a project from &lt;a href=&quot;https://www.imgtec.com/news/press-release/imagination-announces-the-first-risc-v-computer-architecture-course/&quot; target=&quot;_blank&quot;&gt;RVfpga: Understanding Computer Architecture&lt;/a&gt; course by &lt;a href=&quot;https://www.imgtec.com/&quot; target=&quot;_blank&quot;&gt;Imagination Technologies&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-09-10-platformio-ide-2-0-for-vscode-released/task-explorer.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-50&quot; src=&quot;/assets/posts/2020-09-10-platformio-ide-2-0-for-vscode-released/task-explorer.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;project-environment-switcher&quot;&gt;Project Environment Switcher&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Project Environment Switcher&lt;/strong&gt; was the most requested feature by our community. It is possible now to switch between project environments without any changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio.ini&lt;/code&gt; configuration file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Switch between project environments declared in &lt;a href=&quot;https://docs.platformio.org/en/latest/projectconf/index.html&quot;&gt;platformio.ini&lt;/a&gt; project configuration file (issue &lt;a href=&quot;https://github.com/platformio/platformio-vscode-ide/issues/544&quot;&gt;#544&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Activate IntelliSense service based on the current environment&lt;/li&gt;
  &lt;li&gt;Automatically generate a debugging configuration for the active environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A good example of this feature will be &lt;a href=&quot;https://github.com/MarlinFirmware/Marlin&quot; target=&quot;_blank&quot;&gt;Marlin&lt;/a&gt; project, an optimized firmware for RepRap 3D printers. Developers can now easily switch between pre-configured settings:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-09-10-platformio-ide-2-0-for-vscode-released/project-environment-switcher.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-75&quot; src=&quot;/assets/posts/2020-09-10-platformio-ide-2-0-for-vscode-released/project-environment-switcher.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;new-installer&quot;&gt;New Installer&lt;/h3&gt;

&lt;p&gt;PlatformIO IDE installer was rewritten from the scratch. It now is based on the cross-platform and portable &lt;a href=&quot;https://github.com/platformio/platformio-core-installer&quot; target=&quot;_blank&quot;&gt;get-platformio.py&lt;/a&gt; installer script. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get-platformio.py&lt;/code&gt; can also be used for &lt;a href=&quot;https://docs.platformio.org/en/latest/core/installation.html#integration-with-custom-applications-extensions-plugins&quot;&gt;integration with custom applications or plugins&lt;/a&gt;. It automatically installs PlatformIO Core into the isolated Python environment with the rest dependencies.&lt;/p&gt;

&lt;p&gt;The next major improvement is &lt;strong&gt;installation progress&lt;/strong&gt;. The new installer will show detailed information about each step:&lt;/p&gt;

&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;imgSrc&amp;quot;: &amp;quot;/assets/posts/2020-09-10-platformio-ide-2-0-for-vscode-released/new-ide-installer.png&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img class=&quot;img-fluid screenshot mw-md-75&quot; src=&quot;/assets/posts/2020-09-10-platformio-ide-2-0-for-vscode-released/new-ide-installer.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;upgrade&quot;&gt;Upgrade&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Requires PlatformIO Core 5.0 or above&lt;/strong&gt;
&lt;strong&gt;Requires VSCode 1.44 or above&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please navigate to “VSCode &amp;gt; View &amp;gt; Extensions” and click “Update”.&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><category term="featured" /><summary type="html">We are happy to announce the major release of PlatformIO IDE 2.0 for Microsoft Visual Studio Code (VSCode) that brings “Task Explorer”, “Project Environment Switcher”, and a new installer!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-09-10-platformio-ide-2-0-for-vscode-released/platformio-ide-for-vscode.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-09-10-platformio-ide-2-0-for-vscode-released/platformio-ide-for-vscode.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PlatformIO Core 5.0 🚀</title><link href="https://piolabs.com/blog/news/platformio-core-5-0-released.html" rel="alternate" type="text/html" title="PlatformIO Core 5.0 🚀" /><published>2020-09-03T00:00:00+03:00</published><updated>2020-09-03T00:00:00+03:00</updated><id>https://piolabs.com/blog/news/platformio-core-5-0-released</id><content type="html" xml:base="https://piolabs.com/blog/news/platformio-core-5-0-released.html">&lt;p&gt;We are happy to announce the major release of PlatformIO Core with full support for the PlatformIO Trusted Registry, SCons 4.0, custom targets, and refactored package management system!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class=&quot;figure-img img-fluid rounded&quot; src=&quot;/assets/posts/2020-09-03-platformio-core-5-0-released/platformio-core-5-0-released.png&quot; alt=&quot;PlatformIO Core 5.0 🚀&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-new&quot; id=&quot;markdown-toc-what-is-new&quot;&gt;What is New&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#platformio-trusted-registry&quot; id=&quot;markdown-toc-platformio-trusted-registry&quot;&gt;PlatformIO Trusted Registry&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#collaborative-platform&quot; id=&quot;markdown-toc-collaborative-platform&quot;&gt;Collaborative Platform&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#package-management&quot; id=&quot;markdown-toc-package-management&quot;&gt;Package Management&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#library-manager&quot; id=&quot;markdown-toc-library-manager&quot;&gt;Library Manager&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build-system&quot; id=&quot;markdown-toc-build-system&quot;&gt;Build System&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#migration&quot; id=&quot;markdown-toc-migration&quot;&gt;Migration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#upgrade&quot; id=&quot;markdown-toc-upgrade&quot;&gt;Upgrade&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-new&quot;&gt;What is New&lt;/h2&gt;

&lt;p&gt;In this section, we are going to highlight the most important changes and
features introduced in PlatformIO Core 5.0. Please visit &lt;a href=&quot;https://github.com/platformio/platformio-core/releases/tag/v5.0.0&quot; target=&quot;_blank&quot;&gt;PlatformIO 5.0.0 Release Notes&lt;/a&gt; for more detailed information.&lt;/p&gt;

&lt;h3 id=&quot;platformio-trusted-registry&quot;&gt;PlatformIO Trusted Registry&lt;/h3&gt;

&lt;p&gt;PlatformIO Core 5.0 has been switched to the official &lt;strong&gt;PlatformIO Trusted Registry&lt;/strong&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enterprise-grade package storage with high availability (multi replicas)&lt;/li&gt;
  &lt;li&gt;Secure, fast, and reliable global content delivery network (CDN)&lt;/li&gt;
  &lt;li&gt;Universal support for all packages:
    &lt;ul&gt;
      &lt;li&gt;Libraries&lt;/li&gt;
      &lt;li&gt;Development platforms&lt;/li&gt;
      &lt;li&gt;Toolchains&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Built-in fine-grained access control (role-based, &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/team/index.html&quot;&gt;teams&lt;/a&gt;, &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/org/index.html&quot;&gt;organizations&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The new Web front-end and upgraded &lt;a href=&quot;https://docs.platformio.org/page/home/index.html&quot;&gt;PlatformIO Home&lt;/a&gt; are coming soon.&lt;/p&gt;

&lt;h3 id=&quot;collaborative-platform&quot;&gt;Collaborative Platform&lt;/h3&gt;

&lt;p&gt;PlatformIO Core 5.0 is fully unlocked for developers and teams. They can now share their packages (libraries, &lt;a href=&quot;https://docs.platformio.org/page/platforms/index.html&quot;&gt;Development Platforms&lt;/a&gt;, toolchains) with team members or collaborate on open source projects. There are new CLI commands that help you to manage organizations, teams, team memberships, and resource access:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/core/userguide/package/index.html&quot;&gt;platformio package&lt;/a&gt; – manage packages in the registry&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/core/userguide/org/index.html&quot;&gt;platformio org&lt;/a&gt; - manage organizations&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/core/userguide/team/index.html&quot;&gt;platformio team&lt;/a&gt; - manage teams and team memberships&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/core/userguide/access/index.html&quot;&gt;platformio access&lt;/a&gt; – manage package access for users, teams, and maintainers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;package-management&quot;&gt;Package Management&lt;/h3&gt;

&lt;p&gt;The package management infrastructure has been rewritten from scratch. It is based now on the new &lt;strong&gt;PlatformIO Trusted Registry&lt;/strong&gt; that supports a strict dependency declaration using the package owner. This improvement resolves the issues when package maintainers publish packages under the same name.&lt;/p&gt;

&lt;p&gt;PlatformIO Core 5.0 does not handle packages from unofficial repositories declared via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;packageRepositories&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platform.json&lt;/code&gt;. There were a lot of security issues and reports when PlatformIO Core 4.0 hangs when you manage external dependencies.&lt;/p&gt;

&lt;p&gt;PlatformIO Core 5.0 uses THE ONLY official &lt;strong&gt;PlatformIO Trusted Registry&lt;/strong&gt; that supports not only the libraries but also &lt;a href=&quot;https://docs.platformio.org/page/platforms/index.html&quot;&gt;Development Platforms&lt;/a&gt; and toolchains.&lt;/p&gt;

&lt;p&gt;Package maintainers can publish their libraries, development platforms, and toolchains to the registry using &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/package/index.html&quot;&gt;platformio package&lt;/a&gt; CLI.&lt;/p&gt;

&lt;h3 id=&quot;library-manager&quot;&gt;Library Manager&lt;/h3&gt;

&lt;p&gt;The biggest improvement for &lt;a href=&quot;https://docs.platformio.org/page/librarymanager/index.html&quot;&gt;Library Management&lt;/a&gt; is the owner-based dependency declaration. You can finally forget about conflicts with library names in the registry. Use the new syntax &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ownername/pkgname&lt;/code&gt; to declare an owner-based dependency in &lt;a href=&quot;https://docs.platformio.org/page/projectconf/index.html&quot;&gt;“platformio.ini” (Project Configuration File)&lt;/a&gt; via &lt;a href=&quot;https://docs.platformio.org/page/projectconf/section_env_library.html#projectconf-lib-deps&quot;&gt;lib_deps&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[env:myenv]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;lib_deps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;bblanchon/ArduinoJson&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;^6.16.1&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;knolleary/PubSubClient&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;^2.8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find an owner name of a library in the registry using &lt;a href=&quot;https://docs.platformio.org/page/home/index.html&quot;&gt;PlatformIO Home&lt;/a&gt; &amp;gt; Libraries &amp;gt; Some Library &amp;gt; Installation tab.&lt;/p&gt;

&lt;h3 id=&quot;build-system&quot;&gt;Build System&lt;/h3&gt;

&lt;h4 id=&quot;scons-40&quot;&gt;SCons 4.0&lt;/h4&gt;

&lt;p&gt;PlatformIO Core 5.0 build engine has been upgraded to the latest &lt;a href=&quot;https://scons.org/&quot; target=&quot;_blank&quot;&gt;SCons 4.0 - a next-generation software construction tool&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.platformio.org/page/projectconf/advanced_scripting.html&quot;&gt;Configuration files are Python scripts&lt;/a&gt; – use the power of a real programming language to solve build problems&lt;/li&gt;
  &lt;li&gt;Built-in reliable and automatic dependency analysis&lt;/li&gt;
  &lt;li&gt;Improved support for parallel builds&lt;/li&gt;
  &lt;li&gt;Ability to &lt;a href=&quot;https://docs.platformio.org/page/projectconf/section_platformio.html#projectconf-pio-cache-dir&quot;&gt;share built files in a cache&lt;/a&gt; to speed up multiple builds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;custom-targets&quot;&gt;Custom Targets&lt;/h4&gt;

&lt;p&gt;PlatformIO Core 5.0 gives more freedom to developers and &lt;a href=&quot;https://docs.platformio.org/page/platforms/index.html&quot;&gt;Development Platforms&lt;/a&gt; maintainers. They can now declare the &lt;a href=&quot;https://docs.platformio.org/page/projectconf/advanced_scripting.html#projectconf-advanced-scripting-custom-targets&quot;&gt;Custom Targets&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pre/Post processing based on dependent sources (another target, source file, etc.)&lt;/li&gt;
  &lt;li&gt;Command launcher with own arguments&lt;/li&gt;
  &lt;li&gt;Launch command with custom options declared in &lt;a href=&quot;https://docs.platformio.org/page/projectconf/index.html&quot;&gt;“platformio.ini” (Project Configuration File)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Python callback as a target (use the power of Python interpreter and PlatformIO Build API)&lt;/li&gt;
  &lt;li&gt;List available project targets (including dev-platform specific and custom targets) with a new &lt;a href=&quot;https://docs.platformio.org/page/core/userguide/cmd_run.html#cmdoption-platformio-run-list-targets&quot;&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platformio run --list-targets&lt;/code&gt; &lt;/a&gt; command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;strong&gt;Build System&lt;/strong&gt; section in &lt;a href=&quot;https://docs.platformio.org/page/core/history.html#release-notes-5&quot;&gt;PlatformIO Core 5&lt;/a&gt; release notes for more details.&lt;/p&gt;

&lt;h2 id=&quot;migration&quot;&gt;Migration&lt;/h2&gt;

&lt;p&gt;PlatformIO Core 5.0 is fully backward compatible with PlatformIO 4.0 projects.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://docs.platformio.org/page/core/migration.html&quot;&gt;migration guide from 4.x to 5.0&lt;/a&gt; for the further details.&lt;/p&gt;

&lt;h2 id=&quot;upgrade&quot;&gt;Upgrade&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PlatformIO IDE&lt;/strong&gt;: Left Sidebar &amp;gt; PlatformIO (icon) &amp;gt; Quick Access &amp;gt; Upgrade PlatformIO Core&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Terminal&lt;/strong&gt;: Please run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pio upgrade&lt;/code&gt; command in terminal.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="news" /><summary type="html">We are happy to announce the major release of PlatformIO Core with full support for the PlatformIO Trusted Registry, SCons 4.0, custom targets, and refactored package management system!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-09-03-platformio-core-5-0-released/platformio-core-5-0-released.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-09-03-platformio-core-5-0-released/platformio-core-5-0-released.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Next-generation IDE for decades, not years</title><link href="https://piolabs.com/blog/insights/next-generation-ide-for-decades.html" rel="alternate" type="text/html" title="Next-generation IDE for decades, not years" /><published>2020-09-01T00:00:00+03:00</published><updated>2020-09-01T00:00:00+03:00</updated><id>https://piolabs.com/blog/insights/next-generation-ide-for-decades</id><content type="html" xml:base="https://piolabs.com/blog/insights/next-generation-ide-for-decades.html">&lt;p&gt;6 years ago we founded PlatformIO to solve the problem of multi-platform development in the embedded systems industry. At that time, (and even today) each
vendor platform required using a specific development tool that was often complex and limited in terms of OS and editor support.&lt;/p&gt;

&lt;p&gt;Our unique philosophy gives embedded developers true freedom. &lt;!-- more --&gt; They can personally decide which operating system, editor, hardware, and framework to use.&lt;/p&gt;

&lt;p&gt;In this blog post, we openly discuss the important role that integrated development environments (IDEs) play for the success and speed of embedded systems
development. It isn’t just hardware specifications that professionals look at, they also care deeply about the quality of the available software development tools.&lt;/p&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#who-needs-an-ide&quot; id=&quot;markdown-toc-who-needs-an-ide&quot;&gt;Who needs an IDE?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-common&quot; id=&quot;markdown-toc-what-is-common&quot;&gt;What is common?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#create-an-in-house-ide-or-use-a-commercial-one&quot; id=&quot;markdown-toc-create-an-in-house-ide-or-use-a-commercial-one&quot;&gt;Create an in-house IDE or use a commercial one?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#best-of-both-worlds&quot; id=&quot;markdown-toc-best-of-both-worlds&quot;&gt;Best of both worlds?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-power-of-platformio&quot; id=&quot;markdown-toc-the-power-of-platformio&quot;&gt;The Power of PlatformIO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#global-discussion&quot; id=&quot;markdown-toc-global-discussion&quot;&gt;Global discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;who-needs-an-ide&quot;&gt;Who needs an IDE?&lt;/h2&gt;

&lt;p&gt;So, who actually needs an IDE? “Developers” is the simplest answer that comes to mind, and in most cases and that’s correct.
But, it turns out that there are other parties interested in offering a quality IDE solution:&lt;/p&gt;

&lt;figure class=&quot;figure mb-7&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-09-01-next-generation-ide-for-decades/next-generation-ide-for-decades-who-needs.png&quot; alt=&quot;Parties interested in IDE solutions&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Parties interested in IDE solutions
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;“Manufacturers” and “Chip Vendors” (semiconductor companies) want to make it easy for developers to build products based on their technology.
Manufacturers tend to focus on combining hardware and software solutions that simplify the entrance to the chip vendor’s product line. They
play a significant role in promoting and adding extra value to chip vendor solutions. If chip vendor development tools are limited, a manufacturer
can gain a competitive advantage by offering better tools that please their developer customers and speed time to market.&lt;/p&gt;

&lt;h2 id=&quot;what-is-common&quot;&gt;What is common?&lt;/h2&gt;

&lt;figure class=&quot;figure mb-7&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-09-01-next-generation-ide-for-decades/next-generation-ide-for-decades-what-is-common.png&quot; alt=&quot;Parties interested in IDE solutions&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    An IDE is common ground for all parties
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It becomes apparent that all three parties need an IDE. Unfortunately, we see an acute problem in the embedded systems industry.
A lot of semiconductor companies don’t think about manufacturers who offer more than one chipset solution. In such cases, manufacturers may end up
having to both offer and support their developer customers with multiple tools. If manufacturers choose to promote different tools than chip vendors, then
developers get caught in the middle, perhaps having to learn both. Developers want the same IDE for both semiconductor and manufacturer products. And they
don’t want to have to learn a new tool for each different chipset that is incorporated into the breadth of an entire embedded product solution.
That’s why having a “democratic” and flexible mutli-platform IDE can significantly reduce time-to-market costs and make developers happy.&lt;/p&gt;

&lt;h2 id=&quot;create-an-in-house-ide-or-use-a-commercial-one&quot;&gt;Create an in-house IDE or use a commercial one?&lt;/h2&gt;

&lt;p&gt;If you are a manufacturer or chip vendor, what type of IDE is best for your product?
Should you create your own or should you forward your customers to a third-party commercial (paid and proprietary) IDE?
Let’s take a look at the following comparison table:&lt;/p&gt;

&lt;figure class=&quot;figure mb-7&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-09-01-next-generation-ide-for-decades/next-generation-ide-for-decades-own-or-commercial.png&quot; alt=&quot;Parties interested in IDE solutions&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    Pros and cons of different IDEs
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There is only one benefit of using a commercial IDE over your own. It’s time.
Although time is a valuable resource, a commercial IDE doesn’t allow you to easily provide security updates for your software products and bundled examples.
On the other hand, creating your own IDE inevitably leads to additional risks and expenses.&lt;/p&gt;

&lt;p&gt;For chip vendors and hardware manufacturers, providing software and tooling is a necessary burden, but it is often under-funded and under-resourced.
Developers often end up carrying the burden of visiting chip vendor and manufacturer websites, checking for software and toolchain updates, downloading
the latest versions, and manually applying them on each development machine. Developers want a single, flexible IDE solution that can support any and all hardware.
But they don’t want to pay for it, and they don’t want to be stuck to a specific one if there’s a better solution available.&lt;/p&gt;

&lt;h2 id=&quot;best-of-both-worlds&quot;&gt;Best of both worlds?&lt;/h2&gt;

&lt;p&gt;What features and factors must be analyzed and satsified to get the best of both worlds, that will yield the happiest and most productive developers?
Here is a list of factors involved in achieving a comprehensive and flexible IDE solution:&lt;/p&gt;

&lt;figure class=&quot;figure mb-7&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-09-01-next-generation-ide-for-decades/next-generation-ide-for-decades-yet-another.png&quot; alt=&quot;Parties interested in IDE solutions&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    IDE development factors
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Any brand new IDE solution will require a significant amount of time, effort, and resources to gain decent adoption in the market.
And again, all factors involved in creating a new IDE solution are accompanied by unknown risk, time, and cost complications.&lt;/p&gt;

&lt;p&gt;We have already brought up a lot of difficult questions. One last difficult one is how to achieve a best-of-breed next generation IDE
that doesn’t stay static for today’s hardware, but that will grow and be ready for tomorrow.
An IDE should be prepared for unpredictable changes in the market and be ready when one editor goes into history books and a much better one replaces it.
Yes, solving all these problems might sound like magic, but it’s achievable.&lt;/p&gt;

&lt;h2 id=&quot;the-power-of-platformio&quot;&gt;The Power of PlatformIO&lt;/h2&gt;

&lt;p&gt;We would like to show you a simple and powerful IDE solution used, loved and proven to be the favorite of over a million developers around the world.
PlatformIO is a flexible next-generation IDE solution that will make your existing developers happier and significantly reduces the barrier of adoption
by new developers who may be interested in your hardware.&lt;/p&gt;

&lt;figure class=&quot;figure mb-7&quot;&gt;
  &lt;img class=&quot;figure-img img-fluid rounded lift lift-lg&quot; src=&quot;/assets/posts/2020-09-01-next-generation-ide-for-decades/next-generation-ide-for-decades-platformio.png&quot; alt=&quot;Parties interested in IDE solutions&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption text-center&quot;&gt;
    PlatformIO benefits
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is the power of PlatformIO! It’s the only free-for-developers, completely neutral, and open source ecosystem for embedded development.
It’s a place where developers have true freedom, where they have a choice to use their favorite editor and operating system. PlatformIO guarantees
full reproducibility starting from project building and ending with 1-click debugging. Also, PlatformIO offers a significantly gentler learning
curve in comparison with toolsets from the past decade. Your customers save money and time because a broad range of software developers can get
started easily, in comparison with today when only the highest-skilled and most-experienced hardware engineers are required to build products.&lt;/p&gt;

&lt;h2 id=&quot;global-discussion&quot;&gt;Global discussion&lt;/h2&gt;

&lt;p&gt;We had an opportunity to raise our concerns at the &lt;a href=&quot;https://riscv.org/2019/12/risc-v-summit-2019-proceedings/&quot; target=&quot;_blank&quot;&gt;RISC-V Summit 2019&lt;/a&gt;
in San Jose, &lt;strong&gt;California, USA&lt;/strong&gt;, where we presented our vision of how a new generation of development ecosystems could rapidly renovate the core
components of embedded development infrastructure using modern software frameworks and technologies.&lt;/p&gt;

&lt;p&gt;You can watch the recorded version of the presentation here:&lt;/p&gt;

&lt;hr class=&quot;hr-md mb-7&quot; /&gt;

&lt;!-- Youtube video --&gt;
&lt;p&gt;&lt;a data-bigpicture=&quot;{&amp;quot;ytSrc&amp;quot;: &amp;quot;0eYDKION0Bs&amp;quot;}&quot; href=&quot;#&quot;&gt;
  &lt;img src=&quot;/assets/posts/2020-09-01-next-generation-ide-for-decades/summit-talk-ikravets-youtube-video-cover.jpg&quot; class=&quot;img-fluid&quot; alt=&quot;Next-generation IDE for decades, not years&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;hr class=&quot;hr-md mb-7&quot; /&gt;

&lt;p class=&quot;text-center&quot;&gt;
  The slides from the presentation are available on &lt;a href=&quot;https://www.slideshare.net/ivankravets/riscv-summit-2019-nextgeneration-ide-for-your-riscv-product-in-20-minutes&quot; target=&quot;_blank&quot;&gt;SlideShare&lt;/a&gt;.
&lt;/p&gt;</content><author><name>Ivan Kravets</name></author><category term="blog" /><category term="insights" /><category term="featured" /><category term="featured-top" /><summary type="html">6 years ago we founded PlatformIO to solve the problem of multi-platform development in the embedded systems industry. At that time, (and even today) each vendor platform required using a specific development tool that was often complex and limited in terms of OS and editor support. Our unique philosophy gives embedded developers true freedom.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://piolabs.com/assets/posts/2020-09-01-next-generation-ide-for-decades/next-generation-ide-for-decades-own-or-commercial.png" /><media:content medium="image" url="https://piolabs.com/assets/posts/2020-09-01-next-generation-ide-for-decades/next-generation-ide-for-decades-own-or-commercial.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>